
C:\Users\khanh\AppData\Local\Temp\VMBuilds\ZDS_UAV\teensy36\Debug/ZDS_UAV.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 00 03 20 d1 01 00 00 25 3b 00 00 dd 3a 00 00     ... ....%;...:..
      10:	dd 3a 00 00 dd 3a 00 00 dd 3a 00 00 dd 3a 00 00     .:...:...:...:..
      20:	dd 3a 00 00 dd 3a 00 00 dd 3a 00 00 25 3b 00 00     .:...:...:..%;..
      30:	25 3b 00 00 dd 3a 00 00 25 55 00 00 29 56 00 00     %;...:..%U..)V..
      40:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
      50:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
      60:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
      70:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
      80:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
      90:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
      a0:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
      b0:	25 3b 00 00 25 3b 00 00 25 3b 00 00 15 5e 00 00     %;..%;..%;...^..
      c0:	25 3b 00 00 41 5f 00 00 25 3b 00 00 a9 40 00 00     %;..A_..%;...@..
      d0:	25 3b 00 00 6d 60 00 00 25 3b 00 00 25 3b 00 00     %;..m`..%;..%;..
      e0:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
      f0:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     100:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     110:	25 3b 00 00 31 45 00 00 25 3b 00 00 25 3b 00 00     %;..1E..%;..%;..
     120:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     130:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     140:	25 3b 00 00 25 3b 00 00 a5 42 00 00 25 3b 00 00     %;..%;...B..%;..
     150:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     160:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     170:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     180:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     190:	25 3b 00 00 25 3b 00 00 65 61 00 00 25 3b 00 00     %;..%;..ea..%;..
     1a0:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     1b0:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..
     1c0:	25 3b 00 00 25 3b 00 00 25 3b 00 00 25 3b 00 00     %;..%;..%;..%;..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b5c      	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f003 fca2 	bl	3b2c <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b57      	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a56      	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a56      	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	60da      	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	4b56      	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     1fe:	601a      	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	4b55      	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	4a56      	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	601a      	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	4b56      	ldr	r3, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	781a      	ldrb	r2, [r3, #0]
     20a:	0711      	lsls	r1, r2, #28
     20c:	d503      	bpl.n	216 <ResetHandler+0x46>
     20e:	781a      	ldrb	r2, [r3, #0]
     210:	f042 0208 	orr.w	r2, r2, #8
     214:	701a      	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	4b53      	ldr	r3, [pc, #332]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	4953      	ldr	r1, [pc, #332]	; (368 <ResetHandler+0x198>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	22aa      	movs	r2, #170	; 0xaa
     21c:	701a      	strb	r2, [r3, #0]
     21e:	4a53      	ldr	r2, [pc, #332]	; (36c <ResetHandler+0x19c>)
     220:	4b53      	ldr	r3, [pc, #332]	; (370 <ResetHandler+0x1a0>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	428b      	cmp	r3, r1
     224:	d204      	bcs.n	230 <ResetHandler+0x60>
     226:	f852 0f04 	ldr.w	r0, [r2, #4]!
     22a:	f843 0b04 	str.w	r0, [r3], #4
     22e:	e7f8      	b.n	222 <ResetHandler+0x52>
     230:	4b50      	ldr	r3, [pc, #320]	; (374 <ResetHandler+0x1a4>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	4951      	ldr	r1, [pc, #324]	; (378 <ResetHandler+0x1a8>)
     234:	2200      	movs	r2, #0
     236:	428b      	cmp	r3, r1
     238:	d202      	bcs.n	240 <ResetHandler+0x70>
     23a:	f843 2b04 	str.w	r2, [r3], #4
     23e:	e7fa      	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	494e      	ldr	r1, [pc, #312]	; (37c <ResetHandler+0x1ac>)
     242:	4a4f      	ldr	r2, [pc, #316]	; (380 <ResetHandler+0x1b0>)
     244:	2300      	movs	r3, #0
     246:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     24a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     24e:	3301      	adds	r3, #1
     250:	2b74      	cmp	r3, #116	; 0x74
     252:	d1f8      	bne.n	246 <ResetHandler+0x76>
     254:	4b4b      	ldr	r3, [pc, #300]	; (384 <ResetHandler+0x1b4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	4a4c      	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	2180      	movs	r1, #128	; 0x80
     25a:	f803 1b01 	strb.w	r1, [r3], #1
     25e:	4293      	cmp	r3, r2
     260:	d1fb      	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	4b4a      	ldr	r3, [pc, #296]	; (38c <ResetHandler+0x1bc>)
     264:	4a45      	ldr	r2, [pc, #276]	; (37c <ResetHandler+0x1ac>)
     266:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	4b49      	ldr	r3, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26a:	228a      	movs	r2, #138	; 0x8a
     26c:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     272:	2224      	movs	r2, #36	; 0x24
     274:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	22a0      	movs	r2, #160	; 0xa0
     278:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	799a      	ldrb	r2, [r3, #6]
     27c:	0792      	lsls	r2, r2, #30
     27e:	d5fc      	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	799a      	ldrb	r2, [r3, #6]
     282:	06d4      	lsls	r4, r2, #27
     284:	d4fc      	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	4a43      	ldr	r2, [pc, #268]	; (394 <ResetHandler+0x1c4>)
     288:	7993      	ldrb	r3, [r2, #6]
     28a:	f003 030c 	and.w	r3, r3, #12
     28e:	2b08      	cmp	r3, #8
     290:	d1fa      	bne.n	288 <ResetHandler+0xb8>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     292:	4b41      	ldr	r3, [pc, #260]	; (398 <ResetHandler+0x1c8>)
     294:	2260      	movs	r2, #96	; 0x60
     296:	701a      	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     298:	3302      	adds	r3, #2
     29a:	781a      	ldrb	r2, [r3, #0]
     29c:	2a80      	cmp	r2, #128	; 0x80
     29e:	d1fc      	bne.n	29a <ResetHandler+0xca>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2a0:	4b3c      	ldr	r3, [pc, #240]	; (394 <ResetHandler+0x1c4>)
     2a2:	2201      	movs	r2, #1
     2a4:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2a6:	225d      	movs	r2, #93	; 0x5d
     2a8:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2aa:	799a      	ldrb	r2, [r3, #6]
     2ac:	0690      	lsls	r0, r2, #26
     2ae:	d5fc      	bpl.n	2aa <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2b0:	7999      	ldrb	r1, [r3, #6]
     2b2:	4a38      	ldr	r2, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b4:	0649      	lsls	r1, r1, #25
     2b6:	d5fb      	bpl.n	2b0 <ResetHandler+0xe0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2b8:	4b38      	ldr	r3, [pc, #224]	; (39c <ResetHandler+0x1cc>)
     2ba:	4939      	ldr	r1, [pc, #228]	; (3a0 <ResetHandler+0x1d0>)
     2bc:	6019      	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2be:	2100      	movs	r1, #0
     2c0:	6059      	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2c2:	2320      	movs	r3, #32
     2c4:	7013      	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2c6:	7993      	ldrb	r3, [r2, #6]
     2c8:	f003 030c 	and.w	r3, r3, #12
     2cc:	2b0c      	cmp	r3, #12
     2ce:	d1fa      	bne.n	2c6 <ResetHandler+0xf6>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2d0:	4b34      	ldr	r3, [pc, #208]	; (3a4 <ResetHandler+0x1d4>)
     2d2:	4a35      	ldr	r2, [pc, #212]	; (3a8 <ResetHandler+0x1d8>)
     2d4:	601a      	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2d6:	4a35      	ldr	r2, [pc, #212]	; (3ac <ResetHandler+0x1dc>)
     2d8:	4c35      	ldr	r4, [pc, #212]	; (3b0 <ResetHandler+0x1e0>)
     2da:	6813      	ldr	r3, [r2, #0]
     2dc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     2e0:	d103      	bne.n	2ea <ResetHandler+0x11a>
		RTC_SR = 0;
     2e2:	6023      	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2e4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     2e8:	6013      	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	4b32      	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	4a32      	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	2200      	movs	r2, #0
     2f2:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	2207      	movs	r2, #7
     2f6:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	4a30      	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     302:	f003 fd55 	bl	3db0 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	6823      	ldr	r3, [r4, #0]
     308:	07da      	lsls	r2, r3, #31
     30a:	d505      	bpl.n	318 <ResetHandler+0x148>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30c:	482c      	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     30e:	f003 fcdf 	bl	3cd0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     312:	4b2c      	ldr	r3, [pc, #176]	; (3c4 <ResetHandler+0x1f4>)
     314:	4a2c      	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     316:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     318:	4b2c      	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	065b      	lsls	r3, r3, #25
     31e:	d509      	bpl.n	334 <ResetHandler+0x164>
     320:	4c28      	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     322:	4b29      	ldr	r3, [pc, #164]	; (3c8 <ResetHandler+0x1f8>)
     324:	6822      	ldr	r2, [r4, #0]
     326:	429a      	cmp	r2, r3
     328:	d104      	bne.n	334 <ResetHandler+0x164>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32a:	4825      	ldr	r0, [pc, #148]	; (3c0 <ResetHandler+0x1f0>)
     32c:	f003 fcd0 	bl	3cd0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     330:	2300      	movs	r3, #0
     332:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     334:	f006 fc9c 	bl	6c70 <__libc_init_array>

	startup_late_hook();
     338:	f003 fbfe 	bl	3b38 <startup_late_hook>
	main();
     33c:	f005 f97c 	bl	5638 <main>
     340:	e7fe      	b.n	340 <ResetHandler+0x170>
     342:	bf00      	nop
     344:	4005200e 	.word	0x4005200e
     348:	40048030 	.word	0x40048030
     34c:	00043f82 	.word	0x00043f82
     350:	2b000001 	.word	0x2b000001
     354:	e000ed88 	.word	0xe000ed88
     358:	e0082000 	.word	0xe0082000
     35c:	85000003 	.word	0x85000003
     360:	4007d002 	.word	0x4007d002
     364:	4007e000 	.word	0x4007e000
     368:	1fff11e8 	.word	0x1fff11e8
     36c:	0000ba78 	.word	0x0000ba78
     370:	1fff0730 	.word	0x1fff0730
     374:	1fff11e8 	.word	0x1fff11e8
     378:	1fff1a7c 	.word	0x1fff1a7c
     37c:	1fff0200 	.word	0x1fff0200
     380:	00000000 	.word	0x00000000
     384:	e000e400 	.word	0xe000e400
     388:	e000e464 	.word	0xe000e464
     38c:	e000ed08 	.word	0xe000ed08
     390:	40065000 	.word	0x40065000
     394:	40064000 	.word	0x40064000
     398:	4007e001 	.word	0x4007e001
     39c:	40048044 	.word	0x40048044
     3a0:	02060000 	.word	0x02060000
     3a4:	40048004 	.word	0x40048004
     3a8:	000710c0 	.word	0x000710c0
     3ac:	4003d010 	.word	0x4003d010
     3b0:	4003d014 	.word	0x4003d014
     3b4:	e000e014 	.word	0xe000e014
     3b8:	0002bf1f 	.word	0x0002bf1f
     3bc:	20200000 	.word	0x20200000
     3c0:	5e8cefb4 	.word	0x5e8cefb4
     3c4:	4003e01c 	.word	0x4003e01c
     3c8:	5a94c3a5 	.word	0x5a94c3a5
     3cc:	4007f000 	.word	0x4007f000
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff11e8 	.word	0x1fff11e8
     42c:	00000000 	.word	0x00000000
     430:	0000ba74 	.word	0x0000ba74

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff11ec 	.word	0x1fff11ec
     460:	0000ba74 	.word	0x0000ba74
     464:	1fff11e8 	.word	0x1fff11e8
     468:	00000000 	.word	0x00000000

0000046c <Datalog::~Datalog()>:
#include <SD_t3.h>
#include <SD.h>


// Funktionierend jedoch nicht inline
class Datalog
     46c:	b510      	push	{r4, lr}
     46e:	4604      	mov	r4, r0
     470:	3014      	adds	r0, #20
     472:	f001 fa1d 	bl	18b0 <File::~File()>
     476:	1d20      	adds	r0, r4, #4
     478:	f005 fa64 	bl	5944 <String::~String()>
     47c:	4620      	mov	r0, r4
     47e:	bd10      	pop	{r4, pc}

00000480 <setup>:
float testAlt = 0.0;
unsigned char i = 0;


void setup()
{
     480:	b508      	push	{r3, lr}
     482:	f640 31b8 	movw	r1, #3000	; 0xbb8
     486:	4816      	ldr	r0, [pc, #88]	; (4e0 <setup+0x60>)
     488:	f001 f894 	bl	15b4 <VisualMicroDebug::init(unsigned long)>
     48c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     490:	4813      	ldr	r0, [pc, #76]	; (4e0 <setup+0x60>)
     492:	f001 f88b 	bl	15ac <VisualMicroDebug::begin(unsigned long)>
     496:	2101      	movs	r1, #1
     498:	4811      	ldr	r0, [pc, #68]	; (4e0 <setup+0x60>)
     49a:	f001 f861 	bl	1560 <VisualMicroDebug::outPacketStart(bool)>
     49e:	b150      	cbz	r0, 4b6 <setup+0x36>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4a0:	2110      	movs	r1, #16
     4a2:	4810      	ldr	r0, [pc, #64]	; (4e4 <setup+0x64>)
     4a4:	f004 fed8 	bl	5258 <usb_serial_write>
     4a8:	480d      	ldr	r0, [pc, #52]	; (4e0 <setup+0x60>)
     4aa:	210a      	movs	r1, #10
     4ac:	f000 ffce 	bl	144c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     4b0:	480b      	ldr	r0, [pc, #44]	; (4e0 <setup+0x60>)
     4b2:	f001 f879 	bl	15a8 <VisualMicroDebug::outPacketEnd()>
     4b6:	2100      	movs	r1, #0
     4b8:	2201      	movs	r2, #1
     4ba:	4809      	ldr	r0, [pc, #36]	; (4e0 <setup+0x60>)
     4bc:	f001 f926 	bl	170c <VisualMicroDebug::start(bool, bool)>

class HardwareSerial5 : public HardwareSerial
{
public:
	constexpr HardwareSerial5() {}
	virtual void begin(uint32_t baud) { serial5_begin(BAUD2DIV3(baud)); }
     4c0:	f243 00d4 	movw	r0, #12500	; 0x30d4
     4c4:	f003 fe5c 	bl	4180 <serial5_begin>

class HardwareSerial3 : public HardwareSerial
{
public:
	constexpr HardwareSerial3() {}
	virtual void begin(uint32_t baud) { serial3_begin(BAUD2DIV3(baud)); }
     4c8:	f243 00d4 	movw	r0, #12500	; 0x30d4
     4cc:	f003 fd78 	bl	3fc0 <serial3_begin>
    gpsPort.begin(9600);
    LoRaPort.begin(9600);
    //Probe_serial.begin(115200);

    datensatz.init(chipSelect);

     4d0:	4b05      	ldr	r3, [pc, #20]	; (4e8 <setup+0x68>)
     4d2:	4806      	ldr	r0, [pc, #24]	; (4ec <setup+0x6c>)
     4d4:	6819      	ldr	r1, [r3, #0]
    //Serial.println();
    //Serial.println("Sats HDOP Latitude  Longitude  Fix  Date       Time     Date Alt    Course Speed Card  Distance Course Card  Chars Sentences Checksum");
    //Serial.println("          (deg)     (deg)      Age                      Age  (m)    --- from GPS ----  ---- to London  ----  RX    RX        Fail");
    //Serial.println("-------------------------------------------------------------------------------------------------------------------------------------");
}

     4d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpsPort.begin(9600);
    LoRaPort.begin(9600);
    //Probe_serial.begin(115200);

    datensatz.init(chipSelect);

     4da:	f000 b991 	b.w	800 <Datalog::init(int)>
     4de:	bf00      	nop
     4e0:	1fff134c 	.word	0x1fff134c
     4e4:	0000b1fc 	.word	0x0000b1fc
     4e8:	1fff0734 	.word	0x1fff0734
     4ec:	1fff1204 	.word	0x1fff1204

000004f0 <loop>:
    //Serial.println("          (deg)     (deg)      Age                      Age  (m)    --- from GPS ----  ---- to London  ----  RX    RX        Fail");
    //Serial.println("-------------------------------------------------------------------------------------------------------------------------------------");
}

void loop()
{
     4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4f4:	4ca0      	ldr	r4, [pc, #640]	; (778 <loop+0x288>)
     4f6:	b094      	sub	sp, #80	; 0x50
     4f8:	6823      	ldr	r3, [r4, #0]
     4fa:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
     4fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     4fe:	b923      	cbnz	r3, 50a <loop+0x1a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     500:	6823      	ldr	r3, [r4, #0]
     502:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
     504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     506:	2b01      	cmp	r3, #1
     508:	d921      	bls.n	54e <loop+0x5e>
     50a:	489c      	ldr	r0, [pc, #624]	; (77c <loop+0x28c>)
     50c:	4d9c      	ldr	r5, [pc, #624]	; (780 <loop+0x290>)
     50e:	f000 ffaf 	bl	1470 <VisualMicroDebug::DBG_Millis()>
     512:	682a      	ldr	r2, [r5, #0]
     514:	499b      	ldr	r1, [pc, #620]	; (784 <loop+0x294>)
     516:	4290      	cmp	r0, r2
     518:	4603      	mov	r3, r0
     51a:	6008      	str	r0, [r1, #0]
     51c:	f0c0 8113 	bcc.w	746 <loop+0x256>
     520:	1a9a      	subs	r2, r3, r2
     522:	2af9      	cmp	r2, #249	; 0xf9
     524:	d913      	bls.n	54e <loop+0x5e>
     526:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     52a:	4894      	ldr	r0, [pc, #592]	; (77c <loop+0x28c>)
     52c:	602b      	str	r3, [r5, #0]
     52e:	f000 ffa9 	bl	1484 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
     532:	2101      	movs	r1, #1
     534:	4891      	ldr	r0, [pc, #580]	; (77c <loop+0x28c>)
     536:	f001 f813 	bl	1560 <VisualMicroDebug::outPacketStart(bool)>
     53a:	2800      	cmp	r0, #0
     53c:	f040 8105 	bne.w	74a <loop+0x25a>
     540:	488e      	ldr	r0, [pc, #568]	; (77c <loop+0x28c>)
     542:	2105      	movs	r1, #5
     544:	f000 ff82 	bl	144c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     548:	488c      	ldr	r0, [pc, #560]	; (77c <loop+0x28c>)
     54a:	f000 ffff 	bl	154c <VisualMicroDebug::OnBreakPointEnd()>
    //unsigned long age;

    //print_int(gps.satellites(), TinyGPS::GPS_INVALID_SATELLITES, 5);
    //print_int(gps.hdop(), TinyGPS::GPS_INVALID_HDOP, 5);
    gps.f_get_position(&flat, &flon, &age);
    //print_float(flat, TinyGPS::GPS_INVALID_F_ANGLE, 10, 6);
     54e:	ad0b      	add	r5, sp, #44	; 0x2c
     550:	462b      	mov	r3, r5
     552:	aa0a      	add	r2, sp, #40	; 0x28
     554:	a909      	add	r1, sp, #36	; 0x24
     556:	488c      	ldr	r0, [pc, #560]	; (788 <loop+0x298>)
     558:	f000 feac 	bl	12b4 <TinyGPS::f_get_position(float*, float*, unsigned long*)>
    //gps.stats(&chars, &sentences, &failed);
    //print_int(chars, 0xFFFFFFFF, 6);
    //print_int(sentences, 0xFFFFFFFF, 10);
    //print_int(failed, 0xFFFFFFFF, 9);
    Serial.println();
    gps.crack_datetime(&year, &month, &day, &hour, &minute, &second, &hundredths, &age);
     55c:	488b      	ldr	r0, [pc, #556]	; (78c <loop+0x29c>)
     55e:	f005 f8af 	bl	56c0 <Print::println()>
   
     562:	f10d 0023 	add.w	r0, sp, #35	; 0x23
     566:	f10d 0122 	add.w	r1, sp, #34	; 0x22
     56a:	f10d 0221 	add.w	r2, sp, #33	; 0x21
     56e:	ab08      	add	r3, sp, #32
     570:	9003      	str	r0, [sp, #12]
     572:	9102      	str	r1, [sp, #8]
     574:	9201      	str	r2, [sp, #4]
     576:	a90c      	add	r1, sp, #48	; 0x30
     578:	f10d 021e 	add.w	r2, sp, #30
     57c:	9300      	str	r3, [sp, #0]
     57e:	4882      	ldr	r0, [pc, #520]	; (788 <loop+0x298>)
     580:	9504      	str	r5, [sp, #16]
     582:	f10d 031f 	add.w	r3, sp, #31
     586:	f000 fecd 	bl	1324 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     58a:	2024      	movs	r0, #36	; 0x24
     58c:	f004 fee8 	bl	5360 <usb_serial_putchar>

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
     590:	487e      	ldr	r0, [pc, #504]	; (78c <loop+0x29c>)
     592:	f005 f895 	bl	56c0 <Print::println()>
    Serial.println('$');
    sprintf(sz, "%02d:%02d:%02d", hour, minute, second);
    Serial.println(sz);
     596:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
     59a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     59e:	f89d 2020 	ldrb.w	r2, [sp, #32]
     5a2:	9100      	str	r1, [sp, #0]
     5a4:	a812      	add	r0, sp, #72	; 0x48
     5a6:	497a      	ldr	r1, [pc, #488]	; (790 <loop+0x2a0>)
     5a8:	f007 f95e 	bl	7868 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     5ac:	a812      	add	r0, sp, #72	; 0x48
     5ae:	f007 fa47 	bl	7a40 <strlen>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     5b2:	4601      	mov	r1, r0
     5b4:	a812      	add	r0, sp, #72	; 0x48
     5b6:	f004 fe4f 	bl	5258 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     5ba:	4874      	ldr	r0, [pc, #464]	; (78c <loop+0x29c>)
     5bc:	f005 f880 	bl	56c0 <Print::println()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
     5c2:	f005 fff3 	bl	65ac <__aeabi_f2d>
     5c6:	ec41 0b10 	vmov	d0, r0, r1
     5ca:	210a      	movs	r1, #10
     5cc:	486f      	ldr	r0, [pc, #444]	; (78c <loop+0x29c>)
     5ce:	f005 f8c7 	bl	5760 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     5d2:	486e      	ldr	r0, [pc, #440]	; (78c <loop+0x29c>)
     5d4:	f005 f874 	bl	56c0 <Print::println()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     5d8:	980a      	ldr	r0, [sp, #40]	; 0x28
     5da:	f005 ffe7 	bl	65ac <__aeabi_f2d>
     5de:	ec41 0b10 	vmov	d0, r0, r1
     5e2:	210a      	movs	r1, #10
     5e4:	4869      	ldr	r0, [pc, #420]	; (78c <loop+0x29c>)
     5e6:	f005 f8bb 	bl	5760 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     5ea:	4868      	ldr	r0, [pc, #416]	; (78c <loop+0x29c>)
     5ec:	f005 f868 	bl	56c0 <Print::println()>

    
    Serial.println(flat,DEC);
    Serial.println(flon,DEC);
    Serial.println(gps.f_altitude());
    alt = gps.f_altitude();
     5f0:	4865      	ldr	r0, [pc, #404]	; (788 <loop+0x298>)
     5f2:	f000 ff15 	bl	1420 <TinyGPS::f_altitude()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     5f6:	ee10 0a10 	vmov	r0, s0
     5fa:	f005 ffd7 	bl	65ac <__aeabi_f2d>
     5fe:	ec41 0b10 	vmov	d0, r0, r1
     602:	2102      	movs	r1, #2
     604:	4861      	ldr	r0, [pc, #388]	; (78c <loop+0x29c>)
     606:	f005 f8ab 	bl	5760 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     60a:	4860      	ldr	r0, [pc, #384]	; (78c <loop+0x29c>)
     60c:	f005 f858 	bl	56c0 <Print::println()>
    //Serial.println( );
     610:	485d      	ldr	r0, [pc, #372]	; (788 <loop+0x298>)
     612:	f000 ff05 	bl	1420 <TinyGPS::f_altitude()>
    u_flon.floatingPoint_lon = flon;
    u_alt.floatingPoint_alt = alt;
    */

    testSecond += 1;
    if(testSecond == 60){
     616:	495f      	ldr	r1, [pc, #380]	; (794 <loop+0x2a4>)
     618:	780b      	ldrb	r3, [r1, #0]
     61a:	3301      	adds	r3, #1
     61c:	b2db      	uxtb	r3, r3
      testSecond = 0;
     61e:	2b3c      	cmp	r3, #60	; 0x3c
    u_flon.floatingPoint_lon = flon;
    u_alt.floatingPoint_alt = alt;
    */

    testSecond += 1;
    if(testSecond == 60){
     620:	700b      	strb	r3, [r1, #0]
      testSecond = 0;
     622:	d076      	beq.n	712 <loop+0x222>
     624:	4a5c      	ldr	r2, [pc, #368]	; (798 <loop+0x2a8>)
     626:	495d      	ldr	r1, [pc, #372]	; (79c <loop+0x2ac>)
     628:	485d      	ldr	r0, [pc, #372]	; (7a0 <loop+0x2b0>)
      testMinute += 1;
    }
    if(testMinute == 60){
      testMinute = 0;
      testHour += 1;
    }
     62a:	f8df c198 	ldr.w	ip, [pc, #408]	; 7c4 <loop+0x2d4>
     62e:	7807      	ldrb	r7, [r0, #0]
     630:	f89c e000 	ldrb.w	lr, [ip]
     634:	fba2 5203 	umull	r5, r2, r2, r3
     638:	fba1 5103 	umull	r5, r1, r1, r3
     63c:	0896      	lsrs	r6, r2, #2
     63e:	08d5      	lsrs	r5, r2, #3
     640:	08c9      	lsrs	r1, r1, #3
     642:	0912      	lsrs	r2, r2, #4
     644:	eb06 0686 	add.w	r6, r6, r6, lsl #2
     648:	eb05 0585 	add.w	r5, r5, r5, lsl #2
     64c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     650:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
     654:	1b9e      	subs	r6, r3, r6
     656:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
     65a:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
     65e:	1a59      	subs	r1, r3, r1
    if(testSecond == 60){
      testSecond = 0;
      testMinute += 1;
    }
    if(testMinute == 60){
      testMinute = 0;
     660:	2f3c      	cmp	r7, #60	; 0x3c
     662:	b2f6      	uxtb	r6, r6
     664:	b2ed      	uxtb	r5, r5
     666:	b2d2      	uxtb	r2, r2
     668:	b2c9      	uxtb	r1, r1
     66a:	d063      	beq.n	734 <loop+0x244>
      testHour += 1;
    }
    if(testHour == 24) testHour = 0;

     66c:	f1be 0f18 	cmp.w	lr, #24
     670:	bf04      	itt	eq
     672:	f04f 0e00 	moveq.w	lr, #0
     676:	f88c e000 	strbeq.w	lr, [ip]
    if(testSecond % 5 == 0) testLat = (float) 19.236237;
    if (testSecond % 10 == 0) testLong = (float) 912.134341;
     67a:	2e00      	cmp	r6, #0
     67c:	d045      	beq.n	70a <loop+0x21a>
     67e:	4e49      	ldr	r6, [pc, #292]	; (7a4 <loop+0x2b4>)
    if (testSecond % 15 == 0)  testAlt = (float) 23.3544;
     680:	4849      	ldr	r0, [pc, #292]	; (7a8 <loop+0x2b8>)
     682:	b90d      	cbnz	r5, 688 <loop+0x198>
     684:	4d49      	ldr	r5, [pc, #292]	; (7ac <loop+0x2bc>)
     686:	6005      	str	r5, [r0, #0]
    if(testSecond % 20 == 0) { // Reset
     688:	2900      	cmp	r1, #0
     68a:	d033      	beq.n	6f4 <loop+0x204>
     68c:	4948      	ldr	r1, [pc, #288]	; (7b0 <loop+0x2c0>)
       testLat = 0.0;
     68e:	2a00      	cmp	r2, #0
     690:	d135      	bne.n	6fe <loop+0x20e>
       testLong = 0.0;
     692:	2200      	movs	r2, #0
     694:	4615      	mov	r5, r2
     696:	6032      	str	r2, [r6, #0]
     698:	4694      	mov	ip, r2
       testAlt = 0.0;
     69a:	6002      	str	r2, [r0, #0]
     69c:	4690      	mov	r8, r2
    }
     69e:	600a      	str	r2, [r1, #0]
    
      


    serial_dataset.start_char = '$';
    //serial_dataset.hour = hour;
     6a0:	4a44      	ldr	r2, [pc, #272]	; (7b4 <loop+0x2c4>)
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
     6a2:	2110      	movs	r1, #16
     6a4:	4610      	mov	r0, r2
     6a6:	2624      	movs	r6, #36	; 0x24
    //serial_dataset.minute = minute;
    //serial_dataset.second = second;
    serial_dataset.hour = testHour;
    serial_dataset.minute = testMinute;
    serial_dataset.second = testSecond;
    serial_dataset.latitude = testLat;
     6a8:	70d3      	strb	r3, [r2, #3]
    serial_dataset.longitude = testLong;
    serial_dataset.altitude = testAlt;

     6aa:	60d5      	str	r5, [r2, #12]
    serial_dataset.start_char = '$';
    //serial_dataset.hour = hour;
    //serial_dataset.minute = minute;
    //serial_dataset.second = second;
    serial_dataset.hour = testHour;
    serial_dataset.minute = testMinute;
     6ac:	f882 e001 	strb.w	lr, [r2, #1]
    serial_dataset.second = testSecond;
     6b0:	7097      	strb	r7, [r2, #2]
    serial_dataset.latitude = testLat;
    serial_dataset.longitude = testLong;
     6b2:	f8c2 8004 	str.w	r8, [r2, #4]
    serial_dataset.altitude = testAlt;
     6b6:	f8c2 c008 	str.w	ip, [r2, #8]
    
      


    serial_dataset.start_char = '$';
    //serial_dataset.hour = hour;
     6ba:	7016      	strb	r6, [r2, #0]
     6bc:	f003 fcce 	bl	405c <serial3_write>
    datensatz.closeFile();
    */


    Serial.println();
    smartdelay(1000);
     6c0:	4832      	ldr	r0, [pc, #200]	; (78c <loop+0x29c>)
     6c2:	f004 fffd 	bl	56c0 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6c6:	6823      	ldr	r3, [r4, #0]
     6c8:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
     6ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
     6cc:	f003 fda6 	bl	421c <serial5_available>
static void smartdelay(unsigned long ms)
{
    unsigned long start = millis();
    do {
        while (gpsPort.available())
            gps.encode(gpsPort.read());
     6d0:	b948      	cbnz	r0, 6e6 <loop+0x1f6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6d2:	6823      	ldr	r3, [r4, #0]
     6d4:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
     6d6:	9b10      	ldr	r3, [sp, #64]	; 0x40

static void smartdelay(unsigned long ms)
{
    unsigned long start = millis();
    do {
        while (gpsPort.available())
     6d8:	1b5b      	subs	r3, r3, r5
     6da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     6de:	d3f5      	bcc.n	6cc <loop+0x1dc>


    Serial.println();
    smartdelay(1000);
}

     6e0:	b014      	add	sp, #80	; 0x50
     6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	virtual int peek(void)          { return serial5_peek(); }
	virtual int read(void)          { return serial5_getchar(); }
     6e6:	f003 fda9 	bl	423c <serial5_getchar>
{
    unsigned long start = millis();
    do {
        while (gpsPort.available())
            gps.encode(gpsPort.read());
    } while (millis() - start < ms);
     6ea:	b2c1      	uxtb	r1, r0
     6ec:	4826      	ldr	r0, [pc, #152]	; (788 <loop+0x298>)
     6ee:	f000 fd79 	bl	11e4 <TinyGPS::encode(char)>
     6f2:	e7eb      	b.n	6cc <loop+0x1dc>
    if(testHour == 24) testHour = 0;

    if(testSecond % 5 == 0) testLat = (float) 19.236237;
    if (testSecond % 10 == 0) testLong = (float) 912.134341;
    if (testSecond % 15 == 0)  testAlt = (float) 23.3544;
    if(testSecond % 20 == 0) { // Reset
     6f4:	492e      	ldr	r1, [pc, #184]	; (7b0 <loop+0x2c0>)
     6f6:	4d30      	ldr	r5, [pc, #192]	; (7b8 <loop+0x2c8>)
     6f8:	600d      	str	r5, [r1, #0]
       testLat = 0.0;
     6fa:	2a00      	cmp	r2, #0
     6fc:	d0c9      	beq.n	692 <loop+0x1a2>
     6fe:	f8d6 8000 	ldr.w	r8, [r6]
     702:	f8d0 c000 	ldr.w	ip, [r0]
     706:	680d      	ldr	r5, [r1, #0]
     708:	e7ca      	b.n	6a0 <loop+0x1b0>
      testHour += 1;
    }
    if(testHour == 24) testHour = 0;

    if(testSecond % 5 == 0) testLat = (float) 19.236237;
    if (testSecond % 10 == 0) testLong = (float) 912.134341;
     70a:	4e26      	ldr	r6, [pc, #152]	; (7a4 <loop+0x2b4>)
     70c:	482b      	ldr	r0, [pc, #172]	; (7bc <loop+0x2cc>)
     70e:	6030      	str	r0, [r6, #0]
     710:	e7b6      	b.n	680 <loop+0x190>

    testSecond += 1;
    if(testSecond == 60){
      testSecond = 0;
      testMinute += 1;
    }
     712:	4823      	ldr	r0, [pc, #140]	; (7a0 <loop+0x2b0>)
    if(testMinute == 60){
      testMinute = 0;
      testHour += 1;
    }
     714:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 7c4 <loop+0x2d4>

    testSecond += 1;
    if(testSecond == 60){
      testSecond = 0;
      testMinute += 1;
    }
     718:	7807      	ldrb	r7, [r0, #0]
    if(testMinute == 60){
      testMinute = 0;
      testHour += 1;
    }
     71a:	f89c e000 	ldrb.w	lr, [ip]

    testSecond += 1;
    if(testSecond == 60){
      testSecond = 0;
      testMinute += 1;
    }
     71e:	3701      	adds	r7, #1
     720:	b2ff      	uxtb	r7, r7
    */

    testSecond += 1;
    if(testSecond == 60){
      testSecond = 0;
      testMinute += 1;
     722:	2300      	movs	r3, #0
    }
    if(testMinute == 60){
      testMinute = 0;
     724:	2f3c      	cmp	r7, #60	; 0x3c
    */

    testSecond += 1;
    if(testSecond == 60){
      testSecond = 0;
      testMinute += 1;
     726:	700b      	strb	r3, [r1, #0]
     728:	461a      	mov	r2, r3
    }
     72a:	7007      	strb	r7, [r0, #0]
     72c:	4619      	mov	r1, r3
     72e:	461d      	mov	r5, r3
     730:	461e      	mov	r6, r3
    if(testMinute == 60){
      testMinute = 0;
     732:	d19b      	bne.n	66c <loop+0x17c>
      testHour += 1;
    }
     734:	f10e 0e01 	add.w	lr, lr, #1
     738:	fa5f fe8e 	uxtb.w	lr, lr
      testSecond = 0;
      testMinute += 1;
    }
    if(testMinute == 60){
      testMinute = 0;
      testHour += 1;
     73c:	2700      	movs	r7, #0
    }
     73e:	f88c e000 	strb.w	lr, [ip]
      testSecond = 0;
      testMinute += 1;
    }
    if(testMinute == 60){
      testMinute = 0;
      testHour += 1;
     742:	7007      	strb	r7, [r0, #0]
     744:	e792      	b.n	66c <loop+0x17c>
    //Serial.println("          (deg)     (deg)      Age                      Age  (m)    --- from GPS ----  ---- to London  ----  RX    RX        Fail");
    //Serial.println("-------------------------------------------------------------------------------------------------------------------------------------");
}

void loop()
{
     746:	602b      	str	r3, [r5, #0]
     748:	e701      	b.n	54e <loop+0x5e>
     74a:	2101      	movs	r1, #1
     74c:	480b      	ldr	r0, [pc, #44]	; (77c <loop+0x28c>)
     74e:	f000 feab 	bl	14a8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
     752:	2101      	movs	r1, #1
     754:	481a      	ldr	r0, [pc, #104]	; (7c0 <loop+0x2d0>)
     756:	f004 fd7f 	bl	5258 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     75a:	6823      	ldr	r3, [r4, #0]
     75c:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
     75e:	990f      	ldr	r1, [sp, #60]	; 0x3c

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     760:	480a      	ldr	r0, [pc, #40]	; (78c <loop+0x29c>)
     762:	2300      	movs	r3, #0
     764:	220a      	movs	r2, #10
     766:	f004 ffbb 	bl	56e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     76a:	4804      	ldr	r0, [pc, #16]	; (77c <loop+0x28c>)
     76c:	f000 fee0 	bl	1530 <VisualMicroDebug::OnBreakPointPrintEnd()>
     770:	4802      	ldr	r0, [pc, #8]	; (77c <loop+0x28c>)
     772:	f000 ff19 	bl	15a8 <VisualMicroDebug::outPacketEnd()>
     776:	e6e3      	b.n	540 <loop+0x50>
     778:	1fff1610 	.word	0x1fff1610
     77c:	1fff134c 	.word	0x1fff134c
     780:	1fff133c 	.word	0x1fff133c
     784:	1fff1348 	.word	0x1fff1348
     788:	1fff1254 	.word	0x1fff1254
     78c:	1fff0784 	.word	0x1fff0784
     790:	0000b214 	.word	0x0000b214
     794:	1fff1340 	.word	0x1fff1340
     798:	cccccccd 	.word	0xcccccccd
     79c:	88888889 	.word	0x88888889
     7a0:	1fff1238 	.word	0x1fff1238
     7a4:	1fff1344 	.word	0x1fff1344
     7a8:	1fff1240 	.word	0x1fff1240
     7ac:	44640899 	.word	0x44640899
     7b0:	1fff123c 	.word	0x1fff123c
     7b4:	1fff1244 	.word	0x1fff1244
     7b8:	41bad5d0 	.word	0x41bad5d0
     7bc:	4199e3d0 	.word	0x4199e3d0
     7c0:	0000b210 	.word	0x0000b210
     7c4:	1fff1338 	.word	0x1fff1338

000007c8 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__>:
    for (int i = 0; i < len; ++i) {
        Serial.print(i < slen ? str[i] : ' ');
    }
    smartdelay(0);
}
     7c8:	b510      	push	{r4, lr}
     7ca:	4c09      	ldr	r4, [pc, #36]	; (7f0 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0x28>)
#include "TinyGPS_mod.h"


TinyGPS gps;
//Datalog* datensatz;
Datalog datensatz;
     7cc:	4809      	ldr	r0, [pc, #36]	; (7f4 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0x2c>)
     7ce:	f000 f8f5 	bl	9bc <TinyGPS::TinyGPS()>
     7d2:	2100      	movs	r1, #0
     7d4:	1d20      	adds	r0, r4, #4
     7d6:	f005 f8f5 	bl	59c4 <String::String(char const*)>
     7da:	f104 0014 	add.w	r0, r4, #20
     7de:	f001 f859 	bl	1894 <File::File()>
// 
// ------------------------------------
     7e2:	4620      	mov	r0, r4
     7e4:	4a04      	ldr	r2, [pc, #16]	; (7f8 <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0x30>)
     7e6:	4905      	ldr	r1, [pc, #20]	; (7fc <_GLOBAL__sub_I___VisualMicro_DEBUG_1_HITCOUNTER__+0x34>)
    for (int i = 0; i < len; ++i) {
        Serial.print(i < slen ? str[i] : ' ');
    }
    smartdelay(0);
}
     7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

TinyGPS gps;
//Datalog* datensatz;
Datalog datensatz;
// 
// ------------------------------------
     7ec:	f006 ba2a 	b.w	6c44 <__aeabi_atexit>
     7f0:	1fff1204 	.word	0x1fff1204
     7f4:	1fff1254 	.word	0x1fff1254
     7f8:	1fff0730 	.word	0x1fff0730
     7fc:	0000046d 	.word	0x0000046d

00000800 <Datalog::init(int)>:
Aktuell gibt die Funktion nur eine Serielle-Ausgabe, ob der Schreib- und Lesevorgang erfolgreich war.
Evtl. ist es sinnvoll eine bool-Abfrage zu machen, um weitere Aktionen taetigen zu koennen.
Funktion zum Speichern der Daten im File "Data.txt" bei jedem Neustart des Systems wird die Datei ueberschrieben!!!
*/
void Datalog::init(int chipSelect)
{
     800:	b570      	push	{r4, r5, r6, lr}
    if (SD.begin(chipSelect))                                               // Check if the microSD card exists and is usable
     802:	b2c9      	uxtb	r1, r1
Aktuell gibt die Funktion nur eine Serielle-Ausgabe, ob der Schreib- und Lesevorgang erfolgreich war.
Evtl. ist es sinnvoll eine bool-Abfrage zu machen, um weitere Aktionen taetigen zu koennen.
Funktion zum Speichern der Daten im File "Data.txt" bei jedem Neustart des Systems wird die Datei ueberschrieben!!!
*/
void Datalog::init(int chipSelect)
{
     804:	b0a0      	sub	sp, #128	; 0x80
     806:	4604      	mov	r4, r0
    if (SD.begin(chipSelect))                                               // Check if the microSD card exists and is usable
     808:	485d      	ldr	r0, [pc, #372]	; (980 <Datalog::init(int)+0x180>)
     80a:	f001 f8fb 	bl	1a04 <SDClass::begin(unsigned char)>
     80e:	2800      	cmp	r0, #0
     810:	f000 8099 	beq.w	946 <Datalog::init(int)+0x146>
     814:	2110      	movs	r1, #16
     816:	485b      	ldr	r0, [pc, #364]	; (984 <Datalog::init(int)+0x184>)
     818:	f004 fd1e 	bl	5258 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     81c:	485a      	ldr	r0, [pc, #360]	; (988 <Datalog::init(int)+0x188>)
     81e:	f004 ff4f 	bl	56c0 <Print::println()>
    {
        Serial.println("microSD is ready");

        if (SD.exists("Data.txt"))                                          // Check, ob die Datei "Data.txt" vorhanden ist
     822:	495a      	ldr	r1, [pc, #360]	; (98c <Datalog::init(int)+0x18c>)
     824:	4856      	ldr	r0, [pc, #344]	; (980 <Datalog::init(int)+0x180>)
     826:	f001 fa0d 	bl	1c44 <SDClass::exists(char const*)>
     82a:	2800      	cmp	r0, #0
     82c:	f040 8094 	bne.w	958 <Datalog::init(int)+0x158>
     830:	212b      	movs	r1, #43	; 0x2b
     832:	4857      	ldr	r0, [pc, #348]	; (990 <Datalog::init(int)+0x190>)
     834:	f004 fd10 	bl	5258 <usb_serial_write>
     838:	4853      	ldr	r0, [pc, #332]	; (988 <Datalog::init(int)+0x188>)
     83a:	f004 ff41 	bl	56c0 <Print::println()>
        {
            Serial.println("Data.txt doesn't exist and must be created.");  // Warnung, das die Datei noch erstellt werden muss
        }
        // return true;                                                     // if not - stop sketch

        this->dataFile = SD.open("Data.txt", FILE_WRITE);    // Das File "Data.txt" wird geoeffnet / erstellt und Daten werden in diesem gespeichert
     83e:	a818      	add	r0, sp, #96	; 0x60
     840:	2313      	movs	r3, #19
     842:	4a52      	ldr	r2, [pc, #328]	; (98c <Datalog::init(int)+0x18c>)
     844:	494e      	ldr	r1, [pc, #312]	; (980 <Datalog::init(int)+0x180>)
     846:	f001 f989 	bl	1b5c <SDClass::open(char const*, unsigned char)>
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     84a:	aa20      	add	r2, sp, #128	; 0x80
     84c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     84e:	f812 0d14 	ldrb.w	r0, [r2, #-20]!
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     852:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
     856:	f884 0020 	strb.w	r0, [r4, #32]
     85a:	61e3      	str	r3, [r4, #28]
     85c:	7621      	strb	r1, [r4, #24]
#include <utility/SdFatUtil.h>

#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

class File : public Stream {
     85e:	f104 0321 	add.w	r3, r4, #33	; 0x21
     862:	f104 002e 	add.w	r0, r4, #46	; 0x2e
     866:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     86a:	f803 1b01 	strb.w	r1, [r3], #1
     86e:	4298      	cmp	r0, r3
     870:	d1f9      	bne.n	866 <Datalog::init(int)+0x66>
     872:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
     874:	6323      	str	r3, [r4, #48]	; 0x30
     876:	a818      	add	r0, sp, #96	; 0x60
        if (dataFile)                                       // If the file is ready, write to it:
     878:	f104 0514 	add.w	r5, r4, #20
        {
            Serial.println("Data.txt doesn't exist and must be created.");  // Warnung, das die Datei noch erstellt werden muss
        }
        // return true;                                                     // if not - stop sketch

        this->dataFile = SD.open("Data.txt", FILE_WRITE);    // Das File "Data.txt" wird geoeffnet / erstellt und Daten werden in diesem gespeichert
     87c:	f001 f818 	bl	18b0 <File::~File()>
        if (dataFile)                                       // If the file is ready, write to it:
     880:	4628      	mov	r0, r5
     882:	f001 f817 	bl	18b4 <File::operator bool()>
     886:	2800      	cmp	r0, #0
     888:	d064      	beq.n	954 <Datalog::init(int)+0x154>
        {
            S_Ueberschrift = String("Hour ") + String("Minute ") + String("Second ") + String("Latitude ") + String("Longitude ") + String("Altitude ");
     88a:	4668      	mov	r0, sp
     88c:	4941      	ldr	r1, [pc, #260]	; (994 <Datalog::init(int)+0x194>)
     88e:	f005 f899 	bl	59c4 <String::String(char const*)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     892:	4669      	mov	r1, sp
     894:	a808      	add	r0, sp, #32
     896:	f005 f8a9 	bl	59ec <String::String(String const&)>
     89a:	a804      	add	r0, sp, #16
     89c:	493e      	ldr	r1, [pc, #248]	; (998 <Datalog::init(int)+0x198>)
     89e:	f005 f891 	bl	59c4 <String::String(char const*)>
     8a2:	a904      	add	r1, sp, #16
     8a4:	a808      	add	r0, sp, #32
     8a6:	f005 f8f1 	bl	5a8c <operator+(StringSumHelper const&, String const&)>
     8aa:	493c      	ldr	r1, [pc, #240]	; (99c <Datalog::init(int)+0x19c>)
     8ac:	4606      	mov	r6, r0
     8ae:	a80c      	add	r0, sp, #48	; 0x30
     8b0:	f005 f888 	bl	59c4 <String::String(char const*)>
     8b4:	a90c      	add	r1, sp, #48	; 0x30
     8b6:	4630      	mov	r0, r6
     8b8:	f005 f8e8 	bl	5a8c <operator+(StringSumHelper const&, String const&)>
     8bc:	4938      	ldr	r1, [pc, #224]	; (9a0 <Datalog::init(int)+0x1a0>)
     8be:	4606      	mov	r6, r0
     8c0:	a810      	add	r0, sp, #64	; 0x40
     8c2:	f005 f87f 	bl	59c4 <String::String(char const*)>
     8c6:	a910      	add	r1, sp, #64	; 0x40
     8c8:	4630      	mov	r0, r6
     8ca:	f005 f8df 	bl	5a8c <operator+(StringSumHelper const&, String const&)>
     8ce:	4935      	ldr	r1, [pc, #212]	; (9a4 <Datalog::init(int)+0x1a4>)
     8d0:	4606      	mov	r6, r0
     8d2:	a814      	add	r0, sp, #80	; 0x50
     8d4:	f005 f876 	bl	59c4 <String::String(char const*)>
     8d8:	a914      	add	r1, sp, #80	; 0x50
     8da:	4630      	mov	r0, r6
     8dc:	f005 f8d6 	bl	5a8c <operator+(StringSumHelper const&, String const&)>
     8e0:	4931      	ldr	r1, [pc, #196]	; (9a8 <Datalog::init(int)+0x1a8>)
     8e2:	4606      	mov	r6, r0
     8e4:	a818      	add	r0, sp, #96	; 0x60
     8e6:	f005 f86d 	bl	59c4 <String::String(char const*)>
     8ea:	a918      	add	r1, sp, #96	; 0x60
     8ec:	4630      	mov	r0, r6
     8ee:	f005 f8cd 	bl	5a8c <operator+(StringSumHelper const&, String const&)>
     8f2:	3404      	adds	r4, #4
     8f4:	4601      	mov	r1, r0
     8f6:	4620      	mov	r0, r4
     8f8:	f005 f888 	bl	5a0c <String::operator=(String const&)>
     8fc:	a818      	add	r0, sp, #96	; 0x60
     8fe:	f005 f821 	bl	5944 <String::~String()>
     902:	a814      	add	r0, sp, #80	; 0x50
     904:	f005 f81e 	bl	5944 <String::~String()>
     908:	a810      	add	r0, sp, #64	; 0x40
     90a:	f005 f81b 	bl	5944 <String::~String()>
     90e:	a80c      	add	r0, sp, #48	; 0x30
     910:	f005 f818 	bl	5944 <String::~String()>
     914:	a804      	add	r0, sp, #16
     916:	f005 f815 	bl	5944 <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     91a:	a808      	add	r0, sp, #32
     91c:	f005 f812 	bl	5944 <String::~String()>
     920:	4668      	mov	r0, sp
     922:	f005 f80f 	bl	5944 <String::~String()>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
     926:	4621      	mov	r1, r4
     928:	4628      	mov	r0, r5
     92a:	f004 fea3 	bl	5674 <Print::print(String const&)>
     92e:	4628      	mov	r0, r5
     930:	f004 fec6 	bl	56c0 <Print::println()>
     934:	212c      	movs	r1, #44	; 0x2c
     936:	481d      	ldr	r0, [pc, #116]	; (9ac <Datalog::init(int)+0x1ac>)
     938:	f004 fc8e 	bl	5258 <usb_serial_write>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     93c:	4812      	ldr	r0, [pc, #72]	; (988 <Datalog::init(int)+0x188>)
     93e:	f004 febf 	bl	56c0 <Print::println()>
    else
    {
        Serial.println("Card failed, or not present");
        // return false;                                                    // if not - stop sketch
    }
}
     942:	b020      	add	sp, #128	; 0x80
     944:	bd70      	pop	{r4, r5, r6, pc}
     946:	211b      	movs	r1, #27
     948:	4819      	ldr	r0, [pc, #100]	; (9b0 <Datalog::init(int)+0x1b0>)
     94a:	f004 fc85 	bl	5258 <usb_serial_write>
     94e:	480e      	ldr	r0, [pc, #56]	; (988 <Datalog::init(int)+0x188>)
     950:	f004 feb6 	bl	56c0 <Print::println()>
     954:	b020      	add	sp, #128	; 0x80
     956:	bd70      	pop	{r4, r5, r6, pc}
     958:	2128      	movs	r1, #40	; 0x28
     95a:	4816      	ldr	r0, [pc, #88]	; (9b4 <Datalog::init(int)+0x1b4>)
     95c:	f004 fc7c 	bl	5258 <usb_serial_write>
     960:	4809      	ldr	r0, [pc, #36]	; (988 <Datalog::init(int)+0x188>)
     962:	f004 fead 	bl	56c0 <Print::println()>
     966:	2117      	movs	r1, #23
     968:	4813      	ldr	r0, [pc, #76]	; (9b8 <Datalog::init(int)+0x1b8>)
     96a:	f004 fc75 	bl	5258 <usb_serial_write>
     96e:	4806      	ldr	r0, [pc, #24]	; (988 <Datalog::init(int)+0x188>)
     970:	f004 fea6 	bl	56c0 <Print::println()>

        if (SD.exists("Data.txt"))                                          // Check, ob die Datei "Data.txt" vorhanden ist
        {
            Serial.println("Old Data.txt exists and will be removed.");
            Serial.println("Removing example.txt...");
            SD.remove("Data.txt");                                          // Falls vorhanden - DELETE, alte Daten werden ueberschrieben!
     974:	4905      	ldr	r1, [pc, #20]	; (98c <Datalog::init(int)+0x18c>)
     976:	4802      	ldr	r0, [pc, #8]	; (980 <Datalog::init(int)+0x180>)
     978:	f001 f972 	bl	1c60 <SDClass::remove(char const*)>
     97c:	e75f      	b.n	83e <Datalog::init(int)+0x3e>
     97e:	bf00      	nop
     980:	1fff1394 	.word	0x1fff1394
     984:	0000b224 	.word	0x0000b224
     988:	1fff0784 	.word	0x1fff0784
     98c:	0000b238 	.word	0x0000b238
     990:	0000b288 	.word	0x0000b288
     994:	0000b2b4 	.word	0x0000b2b4
     998:	0000b2bc 	.word	0x0000b2bc
     99c:	0000b2c4 	.word	0x0000b2c4
     9a0:	0000b2cc 	.word	0x0000b2cc
     9a4:	0000b2d8 	.word	0x0000b2d8
     9a8:	0000b2e4 	.word	0x0000b2e4
     9ac:	0000b2f0 	.word	0x0000b2f0
     9b0:	0000b320 	.word	0x0000b320
     9b4:	0000b244 	.word	0x0000b244
     9b8:	0000b270 	.word	0x0000b270

000009bc <TinyGPS::TinyGPS()>:
#define _GNGNS_TERM   "GNGNS"
#define _GNGSA_TERM   "GNGSA"
#define _GPGSV_TERM   "GPGSV"
#define _GLGSV_TERM   "GLGSV"

TinyGPS::TinyGPS()
     9bc:	b470      	push	{r4, r5, r6}
    , _term_offset(0)
    , _gps_data_good(false)
#ifndef _GPS_NO_STATS
    , _encoded_characters(0)
    , _good_sentences(0)
    , _failed_checksum(0)
     9be:	2200      	movs	r2, #0
     9c0:	f04f 34ff 	mov.w	r4, #4294967295
     9c4:	4912      	ldr	r1, [pc, #72]	; (a10 <TinyGPS::TinyGPS()+0x54>)
     9c6:	6004      	str	r4, [r0, #0]
     9c8:	26ff      	movs	r6, #255	; 0xff
     9ca:	2506      	movs	r5, #6
     9cc:	f8a0 6040 	strh.w	r6, [r0, #64]	; 0x40
     9d0:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
     9d4:	6384      	str	r4, [r0, #56]	; 0x38
     9d6:	6444      	str	r4, [r0, #68]	; 0x44
     9d8:	64c4      	str	r4, [r0, #76]	; 0x4c
     9da:	6082      	str	r2, [r0, #8]
     9dc:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
     9e0:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
     9e4:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
     9e8:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
     9ec:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
     9f0:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
     9f4:	f8a0 20dc 	strh.w	r2, [r0, #220]	; 0xdc
     9f8:	f8a0 20de 	strh.w	r2, [r0, #222]	; 0xde
#endif
{
    _term[0] = '\0';
     9fc:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
    , _term_offset(0)
    , _gps_data_good(false)
#ifndef _GPS_NO_STATS
    , _encoded_characters(0)
    , _good_sentences(0)
    , _failed_checksum(0)
     a00:	6101      	str	r1, [r0, #16]
     a02:	6181      	str	r1, [r0, #24]
     a04:	6201      	str	r1, [r0, #32]
     a06:	6281      	str	r1, [r0, #40]	; 0x28
     a08:	6301      	str	r1, [r0, #48]	; 0x30
#endif
{
    _term[0] = '\0';
}
     a0a:	bc70      	pop	{r4, r5, r6}
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop
     a10:	3b9ac9ff 	.word	0x3b9ac9ff

00000a14 <TinyGPS::parse_decimal()>:
    else
        return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
     a14:	b430      	push	{r4, r5}
    char* p = _term;
    bool isneg = *p == '-';
     a16:	f890 5056 	ldrb.w	r5, [r0, #86]	; 0x56
    if (isneg) ++p;
     a1a:	2d2d      	cmp	r5, #45	; 0x2d
     a1c:	bf0c      	ite	eq
     a1e:	f890 2057 	ldrbeq.w	r2, [r0, #87]	; 0x57
        return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
    char* p = _term;
     a22:	462a      	movne	r2, r5
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
     a24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
        return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
    char* p = _term;
     a28:	bf14      	ite	ne
     a2a:	f100 0156 	addne.w	r1, r0, #86	; 0x56
    bool isneg = *p == '-';
    if (isneg) ++p;
     a2e:	f100 0157 	addeq.w	r1, r0, #87	; 0x57
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
     a32:	2b09      	cmp	r3, #9
     a34:	d82d      	bhi.n	a92 <TinyGPS::parse_decimal()+0x7e>
     a36:	4608      	mov	r0, r1
     a38:	2300      	movs	r3, #0
        ret = 10 * ret + *str++ - '0';
     a3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     a3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
     a42:	f810 2f01 	ldrb.w	r2, [r0, #1]!
     a46:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
     a4a:	2c09      	cmp	r4, #9
        ret = 10 * ret + *str++ - '0';
     a4c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
     a50:	d9f3      	bls.n	a3a <TinyGPS::parse_decimal()+0x26>
unsigned long TinyGPS::parse_decimal()
{
    char* p = _term;
    bool isneg = *p == '-';
    if (isneg) ++p;
    unsigned long ret = 100UL * gpsatol(p);
     a52:	2064      	movs	r0, #100	; 0x64
     a54:	fb00 f003 	mul.w	r0, r0, r3
    while (gpsisdigit(*p)) ++p;
     a58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     a5c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
     a60:	2c09      	cmp	r4, #9
     a62:	d9f9      	bls.n	a58 <TinyGPS::parse_decimal()+0x44>
    if (*p == '.')
     a64:	2a2e      	cmp	r2, #46	; 0x2e
     a66:	d004      	beq.n	a72 <TinyGPS::parse_decimal()+0x5e>
            ret += 10 * (p[1] - '0');
            if (gpsisdigit(p[2]))
                ret += p[2] - '0';
        }
    }
    return isneg ? -ret : ret;
     a68:	2d2d      	cmp	r5, #45	; 0x2d
     a6a:	d100      	bne.n	a6e <TinyGPS::parse_decimal()+0x5a>
     a6c:	4240      	negs	r0, r0
}
     a6e:	bc30      	pop	{r4, r5}
     a70:	4770      	bx	lr
    if (isneg) ++p;
    unsigned long ret = 100UL * gpsatol(p);
    while (gpsisdigit(*p)) ++p;
    if (*p == '.')
    {
        if (gpsisdigit(p[1]))
     a72:	784b      	ldrb	r3, [r1, #1]
     a74:	3b30      	subs	r3, #48	; 0x30
     a76:	b2da      	uxtb	r2, r3
     a78:	2a09      	cmp	r2, #9
     a7a:	d8f5      	bhi.n	a68 <TinyGPS::parse_decimal()+0x54>
        {
            ret += 10 * (p[1] - '0');
            if (gpsisdigit(p[2]))
     a7c:	788a      	ldrb	r2, [r1, #2]
     a7e:	3a30      	subs	r2, #48	; 0x30
    while (gpsisdigit(*p)) ++p;
    if (*p == '.')
    {
        if (gpsisdigit(p[1]))
        {
            ret += 10 * (p[1] - '0');
     a80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
            if (gpsisdigit(p[2]))
     a84:	b2d1      	uxtb	r1, r2
    while (gpsisdigit(*p)) ++p;
    if (*p == '.')
    {
        if (gpsisdigit(p[1]))
        {
            ret += 10 * (p[1] - '0');
     a86:	eb00 0043 	add.w	r0, r0, r3, lsl #1
            if (gpsisdigit(p[2]))
     a8a:	2909      	cmp	r1, #9
                ret += p[2] - '0';
     a8c:	bf98      	it	ls
     a8e:	1880      	addls	r0, r0, r2
     a90:	e7ea      	b.n	a68 <TinyGPS::parse_decimal()+0x54>
unsigned long TinyGPS::parse_decimal()
{
    char* p = _term;
    bool isneg = *p == '-';
    if (isneg) ++p;
    unsigned long ret = 100UL * gpsatol(p);
     a92:	2000      	movs	r0, #0
     a94:	e7e6      	b.n	a64 <TinyGPS::parse_decimal()+0x50>
     a96:	bf00      	nop

00000a98 <TinyGPS::parse_degrees()>:
    return isneg ? -ret : ret;
}

// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
     a98:	b470      	push	{r4, r5, r6}
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
     a9a:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
     a9e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
     aa2:	2b09      	cmp	r3, #9

// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
    char* p;
    unsigned long left_of_decimal = gpsatol(_term);
     aa4:	f100 0156 	add.w	r1, r0, #86	; 0x56
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
     aa8:	d847      	bhi.n	b3a <TinyGPS::parse_degrees()+0xa2>
     aaa:	4608      	mov	r0, r1
     aac:	2300      	movs	r3, #0
        ret = 10 * ret + *str++ - '0';
     aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     ab2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
     ab6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
     aba:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
     abe:	2c09      	cmp	r4, #9
        ret = 10 * ret + *str++ - '0';
     ac0:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
     ac4:	d9f3      	bls.n	aae <TinyGPS::parse_degrees()+0x16>
// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
    char* p;
    unsigned long left_of_decimal = gpsatol(_term);
    unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
     ac6:	4a1e      	ldr	r2, [pc, #120]	; (b40 <TinyGPS::parse_degrees()+0xa8>)
     ac8:	481e      	ldr	r0, [pc, #120]	; (b44 <TinyGPS::parse_degrees()+0xac>)
     aca:	fba2 4203 	umull	r4, r2, r2, r3
     ace:	0952      	lsrs	r2, r2, #5
     ad0:	2464      	movs	r4, #100	; 0x64
     ad2:	fb04 3212 	mls	r2, r4, r2, r3
     ad6:	fb00 f402 	mul.w	r4, r0, r2
    for (p = _term; gpsisdigit(*p); ++p);
     ada:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     ade:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
     ae2:	2809      	cmp	r0, #9
     ae4:	d9f9      	bls.n	ada <TinyGPS::parse_degrees()+0x42>
     ae6:	4d16      	ldr	r5, [pc, #88]	; (b40 <TinyGPS::parse_degrees()+0xa8>)
     ae8:	4817      	ldr	r0, [pc, #92]	; (b48 <TinyGPS::parse_degrees()+0xb0>)
     aea:	fba5 5303 	umull	r5, r3, r5, r3
     aee:	095b      	lsrs	r3, r3, #5
     af0:	fb00 f303 	mul.w	r3, r0, r3
    if (*p == '.')
     af4:	2a2e      	cmp	r2, #46	; 0x2e
     af6:	d007      	beq.n	b08 <TinyGPS::parse_degrees()+0x70>
        {
            hundred1000ths_of_minute += mult * (*p - '0');
            mult /= 10;
        }
    }
    return (left_of_decimal / 100) * 1000000 + (hundred1000ths_of_minute + 3) / 6;
     af8:	4814      	ldr	r0, [pc, #80]	; (b4c <TinyGPS::parse_degrees()+0xb4>)
     afa:	3403      	adds	r4, #3
     afc:	fba0 2004 	umull	r2, r0, r0, r4
     b00:	eb03 0090 	add.w	r0, r3, r0, lsr #2
}
     b04:	bc70      	pop	{r4, r5, r6}
     b06:	4770      	bx	lr
    unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
    for (p = _term; gpsisdigit(*p); ++p);
    if (*p == '.')
    {
        unsigned long mult = 10000;
        while (gpsisdigit(*++p))
     b08:	784e      	ldrb	r6, [r1, #1]
     b0a:	f1a6 0530 	sub.w	r5, r6, #48	; 0x30
     b0e:	b2ea      	uxtb	r2, r5
     b10:	2a09      	cmp	r2, #9
     b12:	f101 0101 	add.w	r1, r1, #1
     b16:	d8ef      	bhi.n	af8 <TinyGPS::parse_degrees()+0x60>
        {
            hundred1000ths_of_minute += mult * (*p - '0');
            mult /= 10;
     b18:	480d      	ldr	r0, [pc, #52]	; (b50 <TinyGPS::parse_degrees()+0xb8>)
    unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
    for (p = _term; gpsisdigit(*p); ++p);
    if (*p == '.')
    {
        unsigned long mult = 10000;
        while (gpsisdigit(*++p))
     b1a:	f242 7210 	movw	r2, #10000	; 0x2710
     b1e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
        {
            hundred1000ths_of_minute += mult * (*p - '0');
     b22:	fb02 4405 	mla	r4, r2, r5, r4
    unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
    for (p = _term; gpsisdigit(*p); ++p);
    if (*p == '.')
    {
        unsigned long mult = 10000;
        while (gpsisdigit(*++p))
     b26:	f1a6 0530 	sub.w	r5, r6, #48	; 0x30
        {
            hundred1000ths_of_minute += mult * (*p - '0');
            mult /= 10;
     b2a:	fba0 6202 	umull	r6, r2, r0, r2
    unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
    for (p = _term; gpsisdigit(*p); ++p);
    if (*p == '.')
    {
        unsigned long mult = 10000;
        while (gpsisdigit(*++p))
     b2e:	b2ee      	uxtb	r6, r5
     b30:	2e09      	cmp	r6, #9
        {
            hundred1000ths_of_minute += mult * (*p - '0');
            mult /= 10;
     b32:	ea4f 02d2 	mov.w	r2, r2, lsr #3
    unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
    for (p = _term; gpsisdigit(*p); ++p);
    if (*p == '.')
    {
        unsigned long mult = 10000;
        while (gpsisdigit(*++p))
     b36:	d9f2      	bls.n	b1e <TinyGPS::parse_degrees()+0x86>
     b38:	e7de      	b.n	af8 <TinyGPS::parse_degrees()+0x60>
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
     b3a:	2300      	movs	r3, #0
// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
    char* p;
    unsigned long left_of_decimal = gpsatol(_term);
    unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
     b3c:	461c      	mov	r4, r3
     b3e:	e7d9      	b.n	af4 <TinyGPS::parse_degrees()+0x5c>
     b40:	51eb851f 	.word	0x51eb851f
     b44:	000186a0 	.word	0x000186a0
     b48:	000f4240 	.word	0x000f4240
     b4c:	aaaaaaab 	.word	0xaaaaaaab
     b50:	cccccccd 	.word	0xcccccccd

00000b54 <TinyGPS::term_complete()>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
     b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (_is_checksum_term)
     b56:	f890 5055 	ldrb.w	r5, [r0, #85]	; 0x55
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
     b5a:	b083      	sub	sp, #12
    if (_is_checksum_term)
     b5c:	b335      	cbz	r5, bac <TinyGPS::term_complete()+0x58>
    {
        byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
     b5e:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
//
// internal utilities
//
int TinyGPS::from_hex(char a)
{
    if (a >= 'A' && a <= 'F')
     b62:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     b66:	2a05      	cmp	r2, #5
     b68:	f240 81b4 	bls.w	ed4 <TinyGPS::term_complete()+0x380>
        return a - 'A' + 10;
    else if (a >= 'a' && a <= 'f')
     b6c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
     b70:	2a05      	cmp	r2, #5
        return a - 'a' + 10;
     b72:	bf94      	ite	ls
     b74:	3b57      	subls	r3, #87	; 0x57
    else
        return a - '0';
     b76:	3b30      	subhi	r3, #48	; 0x30
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
    if (_is_checksum_term)
    {
        byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
     b78:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
//
// internal utilities
//
int TinyGPS::from_hex(char a)
{
    if (a >= 'A' && a <= 'F')
     b7c:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
    if (_is_checksum_term)
    {
        byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
     b80:	011b      	lsls	r3, r3, #4
//
// internal utilities
//
int TinyGPS::from_hex(char a)
{
    if (a >= 'A' && a <= 'F')
     b82:	2905      	cmp	r1, #5
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
    if (_is_checksum_term)
    {
        byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
     b84:	b2db      	uxtb	r3, r3
//
// internal utilities
//
int TinyGPS::from_hex(char a)
{
    if (a >= 'A' && a <= 'F')
     b86:	f200 81a7 	bhi.w	ed8 <TinyGPS::term_complete()+0x384>
        return a - 'A' + 10;
     b8a:	3a37      	subs	r2, #55	; 0x37
bool TinyGPS::term_complete()
{
    if (_is_checksum_term)
    {
        byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
        if (checksum == _parity)
     b8c:	4413      	add	r3, r2
     b8e:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
     b92:	b2db      	uxtb	r3, r3
     b94:	429a      	cmp	r2, r3
     b96:	f000 81ac 	beq.w	ef2 <TinyGPS::term_complete()+0x39e>
            }
        }

#ifndef _GPS_NO_STATS
        else
            ++_failed_checksum;
     b9a:	f8b0 30de 	ldrh.w	r3, [r0, #222]	; 0xde
     b9e:	3301      	adds	r3, #1
     ba0:	f8a0 30de 	strh.w	r3, [r0, #222]	; 0xde
#endif
        return false;
     ba4:	2500      	movs	r5, #0
            }
            break;
        }

    return false;
}
     ba6:	4628      	mov	r0, r5
     ba8:	b003      	add	sp, #12
     baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
        return false;
    }

    // the first term determines the sentence type
    if (_term_number == 0)
     bac:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
     bb0:	b9cb      	cbnz	r3, be6 <TinyGPS::term_complete()+0x92>
    return ret;
}

int TinyGPS::gpsstrcmp(const char* str1, const char* str2)
{
    while (*str1 && *str1 == *str2)
     bb2:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
    }

    // the first term determines the sentence type
    if (_term_number == 0)
    {
        if (!gpsstrcmp(_term, _GPRMC_TERM) || !gpsstrcmp(_term, _GNRMC_TERM))
     bb6:	f100 0656 	add.w	r6, r0, #86	; 0x56
    return ret;
}

int TinyGPS::gpsstrcmp(const char* str1, const char* str2)
{
    while (*str1 && *str1 == *str2)
     bba:	b173      	cbz	r3, bda <TinyGPS::term_complete()+0x86>
     bbc:	2b47      	cmp	r3, #71	; 0x47
     bbe:	f040 82df 	bne.w	1180 <TinyGPS::term_complete()+0x62c>
     bc2:	49e4      	ldr	r1, [pc, #912]	; (f54 <TinyGPS::term_complete()+0x400>)
     bc4:	4632      	mov	r2, r6
     bc6:	e004      	b.n	bd2 <TinyGPS::term_complete()+0x7e>
     bc8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     bcc:	429c      	cmp	r4, r3
     bce:	f040 81b4 	bne.w	f3a <TinyGPS::term_complete()+0x3e6>
     bd2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     bd6:	2b00      	cmp	r3, #0
     bd8:	d1f6      	bne.n	bc8 <TinyGPS::term_complete()+0x74>

    // the first term determines the sentence type
    if (_term_number == 0)
    {
        if (!gpsstrcmp(_term, _GPRMC_TERM) || !gpsstrcmp(_term, _GNRMC_TERM))
            _sentence_type = _GPS_SENTENCE_GPRMC;
     bda:	2301      	movs	r3, #1
     bdc:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
            }
            break;
        }

    return false;
}
     be0:	4628      	mov	r0, r5
     be2:	b003      	add	sp, #12
     be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else
            _sentence_type = _GPS_SENTENCE_OTHER;
        return false;
    }

    if (_sentence_type != _GPS_SENTENCE_OTHER && _term[0])
     be6:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
     bea:	2906      	cmp	r1, #6
     bec:	d0da      	beq.n	ba4 <TinyGPS::term_complete()+0x50>
     bee:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
     bf2:	2a00      	cmp	r2, #0
     bf4:	d0d6      	beq.n	ba4 <TinyGPS::term_complete()+0x50>
        switch (COMBINE(_sentence_type, _term_number))
     bf6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
     bfa:	3b01      	subs	r3, #1
     bfc:	4604      	mov	r4, r0
     bfe:	2bb2      	cmp	r3, #178	; 0xb2
     c00:	d8d1      	bhi.n	ba6 <TinyGPS::term_complete()+0x52>
     c02:	a101      	add	r1, pc, #4	; (adr r1, c08 <TinyGPS::term_complete()+0xb4>)
     c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     c08:	00000fc9 	.word	0x00000fc9
     c0c:	000010bb 	.word	0x000010bb
     c10:	000010ad 	.word	0x000010ad
     c14:	000010a5 	.word	0x000010a5
     c18:	00001097 	.word	0x00001097
     c1c:	000010eb 	.word	0x000010eb
     c20:	000010dd 	.word	0x000010dd
     c24:	000010d5 	.word	0x000010d5
     c28:	000010cd 	.word	0x000010cd
     c2c:	00000ba7 	.word	0x00000ba7
     c30:	00000ba7 	.word	0x00000ba7
     c34:	00000ba7 	.word	0x00000ba7
     c38:	00000ba7 	.word	0x00000ba7
     c3c:	00000ba7 	.word	0x00000ba7
     c40:	00000ba7 	.word	0x00000ba7
     c44:	00000ba7 	.word	0x00000ba7
     c48:	00000ba7 	.word	0x00000ba7
     c4c:	00000ba7 	.word	0x00000ba7
     c50:	00000ba7 	.word	0x00000ba7
     c54:	00000ba7 	.word	0x00000ba7
     c58:	00000ba7 	.word	0x00000ba7
     c5c:	00000ba7 	.word	0x00000ba7
     c60:	00000ba7 	.word	0x00000ba7
     c64:	00000ba7 	.word	0x00000ba7
     c68:	00000ba7 	.word	0x00000ba7
     c6c:	00000ba7 	.word	0x00000ba7
     c70:	00000ba7 	.word	0x00000ba7
     c74:	00000ba7 	.word	0x00000ba7
     c78:	00000ba7 	.word	0x00000ba7
     c7c:	00000ba7 	.word	0x00000ba7
     c80:	00000ba7 	.word	0x00000ba7
     c84:	00000ba7 	.word	0x00000ba7
     c88:	00000fc9 	.word	0x00000fc9
     c8c:	00001101 	.word	0x00001101
     c90:	000010bb 	.word	0x000010bb
     c94:	000010ad 	.word	0x000010ad
     c98:	000010a5 	.word	0x000010a5
     c9c:	00001097 	.word	0x00001097
     ca0:	000010f9 	.word	0x000010f9
     ca4:	0000108f 	.word	0x0000108f
     ca8:	00001063 	.word	0x00001063
     cac:	00000ba7 	.word	0x00000ba7
     cb0:	00000ba7 	.word	0x00000ba7
     cb4:	00000ba7 	.word	0x00000ba7
     cb8:	00000ba7 	.word	0x00000ba7
     cbc:	00000ba7 	.word	0x00000ba7
     cc0:	00000ba7 	.word	0x00000ba7
     cc4:	00000ba7 	.word	0x00000ba7
     cc8:	00000ba7 	.word	0x00000ba7
     ccc:	00000ba7 	.word	0x00000ba7
     cd0:	00000ba7 	.word	0x00000ba7
     cd4:	00000ba7 	.word	0x00000ba7
     cd8:	00000ba7 	.word	0x00000ba7
     cdc:	00000ba7 	.word	0x00000ba7
     ce0:	00000ba7 	.word	0x00000ba7
     ce4:	00000ba7 	.word	0x00000ba7
     ce8:	00000ba7 	.word	0x00000ba7
     cec:	00000ba7 	.word	0x00000ba7
     cf0:	00000ba7 	.word	0x00000ba7
     cf4:	00000ba7 	.word	0x00000ba7
     cf8:	00000ba7 	.word	0x00000ba7
     cfc:	00000ba7 	.word	0x00000ba7
     d00:	00000ba7 	.word	0x00000ba7
     d04:	00000ba7 	.word	0x00000ba7
     d08:	00000fc9 	.word	0x00000fc9
     d0c:	000010bb 	.word	0x000010bb
     d10:	000010ad 	.word	0x000010ad
     d14:	000010a5 	.word	0x000010a5
     d18:	00001097 	.word	0x00001097
     d1c:	00001055 	.word	0x00001055
     d20:	000010dd 	.word	0x000010dd
     d24:	00000ba7 	.word	0x00000ba7
     d28:	00000ba7 	.word	0x00000ba7
     d2c:	00000ba7 	.word	0x00000ba7
     d30:	00000ba7 	.word	0x00000ba7
     d34:	00000ba7 	.word	0x00000ba7
     d38:	00000ba7 	.word	0x00000ba7
     d3c:	00000ba7 	.word	0x00000ba7
     d40:	00000ba7 	.word	0x00000ba7
     d44:	00000ba7 	.word	0x00000ba7
     d48:	00000ba7 	.word	0x00000ba7
     d4c:	00000ba7 	.word	0x00000ba7
     d50:	00000ba7 	.word	0x00000ba7
     d54:	00000ba7 	.word	0x00000ba7
     d58:	00000ba7 	.word	0x00000ba7
     d5c:	00000ba7 	.word	0x00000ba7
     d60:	00000ba7 	.word	0x00000ba7
     d64:	00000ba7 	.word	0x00000ba7
     d68:	00000ba7 	.word	0x00000ba7
     d6c:	00000ba7 	.word	0x00000ba7
     d70:	00000ba7 	.word	0x00000ba7
     d74:	00000ba7 	.word	0x00000ba7
     d78:	00000ba7 	.word	0x00000ba7
     d7c:	00000ba7 	.word	0x00000ba7
     d80:	00000ba7 	.word	0x00000ba7
     d84:	00000ba7 	.word	0x00000ba7
     d88:	00000ba7 	.word	0x00000ba7
     d8c:	00000ba7 	.word	0x00000ba7
     d90:	00000ba7 	.word	0x00000ba7
     d94:	00000ba7 	.word	0x00000ba7
     d98:	00000ba7 	.word	0x00000ba7
     d9c:	00000ba7 	.word	0x00000ba7
     da0:	00000ba7 	.word	0x00000ba7
     da4:	00000ba7 	.word	0x00000ba7
     da8:	00000ba7 	.word	0x00000ba7
     dac:	00000ba7 	.word	0x00000ba7
     db0:	00000ba7 	.word	0x00000ba7
     db4:	00000ba7 	.word	0x00000ba7
     db8:	00000ba7 	.word	0x00000ba7
     dbc:	00000ba7 	.word	0x00000ba7
     dc0:	00000ba7 	.word	0x00000ba7
     dc4:	00000ba7 	.word	0x00000ba7
     dc8:	00000ba7 	.word	0x00000ba7
     dcc:	00000ba7 	.word	0x00000ba7
     dd0:	00000ba7 	.word	0x00000ba7
     dd4:	00000ba7 	.word	0x00000ba7
     dd8:	00000ba7 	.word	0x00000ba7
     ddc:	00000ba7 	.word	0x00000ba7
     de0:	00000ba7 	.word	0x00000ba7
     de4:	00000ba7 	.word	0x00000ba7
     de8:	00000ba7 	.word	0x00000ba7
     dec:	00000ba7 	.word	0x00000ba7
     df0:	00000ba7 	.word	0x00000ba7
     df4:	00000ba7 	.word	0x00000ba7
     df8:	00000ba7 	.word	0x00000ba7
     dfc:	00000ba7 	.word	0x00000ba7
     e00:	00000ba7 	.word	0x00000ba7
     e04:	00000ba7 	.word	0x00000ba7
     e08:	00000ba7 	.word	0x00000ba7
     e0c:	00000fe7 	.word	0x00000fe7
     e10:	00000ba7 	.word	0x00000ba7
     e14:	00000fdb 	.word	0x00000fdb
     e18:	00000ba7 	.word	0x00000ba7
     e1c:	00000ba7 	.word	0x00000ba7
     e20:	0000101f 	.word	0x0000101f
     e24:	00000fdb 	.word	0x00000fdb
     e28:	00000ba7 	.word	0x00000ba7
     e2c:	00000ba7 	.word	0x00000ba7
     e30:	0000101f 	.word	0x0000101f
     e34:	00000fdb 	.word	0x00000fdb
     e38:	00000ba7 	.word	0x00000ba7
     e3c:	00000ba7 	.word	0x00000ba7
     e40:	0000101f 	.word	0x0000101f
     e44:	00000fdb 	.word	0x00000fdb
     e48:	00000ba7 	.word	0x00000ba7
     e4c:	00000ba7 	.word	0x00000ba7
     e50:	0000101f 	.word	0x0000101f
     e54:	00000ba7 	.word	0x00000ba7
     e58:	00000ba7 	.word	0x00000ba7
     e5c:	00000ba7 	.word	0x00000ba7
     e60:	00000ba7 	.word	0x00000ba7
     e64:	00000ba7 	.word	0x00000ba7
     e68:	00000ba7 	.word	0x00000ba7
     e6c:	00000ba7 	.word	0x00000ba7
     e70:	00000ba7 	.word	0x00000ba7
     e74:	00000ba7 	.word	0x00000ba7
     e78:	00000ba7 	.word	0x00000ba7
     e7c:	00000ba7 	.word	0x00000ba7
     e80:	00000ba7 	.word	0x00000ba7
     e84:	00000ba7 	.word	0x00000ba7
     e88:	00000ba7 	.word	0x00000ba7
     e8c:	00000fe7 	.word	0x00000fe7
     e90:	00000ba7 	.word	0x00000ba7
     e94:	00000fdb 	.word	0x00000fdb
     e98:	00000ba7 	.word	0x00000ba7
     e9c:	00000ba7 	.word	0x00000ba7
     ea0:	0000101f 	.word	0x0000101f
     ea4:	00000fdb 	.word	0x00000fdb
     ea8:	00000ba7 	.word	0x00000ba7
     eac:	00000ba7 	.word	0x00000ba7
     eb0:	0000101f 	.word	0x0000101f
     eb4:	00000fdb 	.word	0x00000fdb
     eb8:	00000ba7 	.word	0x00000ba7
     ebc:	00000ba7 	.word	0x00000ba7
     ec0:	0000101f 	.word	0x0000101f
     ec4:	00000fdb 	.word	0x00000fdb
     ec8:	00000ba7 	.word	0x00000ba7
     ecc:	00000ba7 	.word	0x00000ba7
     ed0:	0000101f 	.word	0x0000101f
// internal utilities
//
int TinyGPS::from_hex(char a)
{
    if (a >= 'A' && a <= 'F')
        return a - 'A' + 10;
     ed4:	3b37      	subs	r3, #55	; 0x37
     ed6:	e64f      	b.n	b78 <TinyGPS::term_complete()+0x24>
    else if (a >= 'a' && a <= 'f')
     ed8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
     edc:	2905      	cmp	r1, #5
        return a - 'a' + 10;
     ede:	bf94      	ite	ls
     ee0:	3a57      	subls	r2, #87	; 0x57
    else
        return a - '0';
     ee2:	3a30      	subhi	r2, #48	; 0x30
bool TinyGPS::term_complete()
{
    if (_is_checksum_term)
    {
        byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
        if (checksum == _parity)
     ee4:	4413      	add	r3, r2
     ee6:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
     eea:	b2db      	uxtb	r3, r3
     eec:	429a      	cmp	r2, r3
     eee:	f47f ae54 	bne.w	b9a <TinyGPS::term_complete()+0x46>
        {
            if (_sentence_type == _GPS_SENTENCE_GPRMC)   //set the time and date even if not tracking
     ef2:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
            {
                _time = _new_time;
                _date = _new_date;
            }
            if (_gps_data_good)
     ef6:	f890 5068 	ldrb.w	r5, [r0, #104]	; 0x68
    if (_is_checksum_term)
    {
        byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
        if (checksum == _parity)
        {
            if (_sentence_type == _GPS_SENTENCE_GPRMC)   //set the time and date even if not tracking
     efa:	2b01      	cmp	r3, #1
     efc:	d049      	beq.n	f92 <TinyGPS::term_complete()+0x43e>
            {
                _time = _new_time;
                _date = _new_date;
            }
            if (_gps_data_good)
     efe:	2d00      	cmp	r5, #0
     f00:	f43f ae50 	beq.w	ba4 <TinyGPS::term_complete()+0x50>
            {
#ifndef _GPS_NO_STATS
                ++_good_sentences;
     f04:	f8b0 20dc 	ldrh.w	r2, [r0, #220]	; 0xdc
#endif
                _last_time_fix = _new_time_fix;
     f08:	6c84      	ldr	r4, [r0, #72]	; 0x48
                _last_position_fix = _new_position_fix;
     f0a:	6d01      	ldr	r1, [r0, #80]	; 0x50
            if (_gps_data_good)
            {
#ifndef _GPS_NO_STATS
                ++_good_sentences;
#endif
                _last_time_fix = _new_time_fix;
     f0c:	6444      	str	r4, [r0, #68]	; 0x44
                _date = _new_date;
            }
            if (_gps_data_good)
            {
#ifndef _GPS_NO_STATS
                ++_good_sentences;
     f0e:	3201      	adds	r2, #1
     f10:	f8a0 20dc 	strh.w	r2, [r0, #220]	; 0xdc
#endif
                _last_time_fix = _new_time_fix;
                _last_position_fix = _new_position_fix;
     f14:	64c1      	str	r1, [r0, #76]	; 0x4c

                switch (_sentence_type)
     f16:	2b00      	cmp	r3, #0
     f18:	f47f ae45 	bne.w	ba6 <TinyGPS::term_complete()+0x52>
                    _longitude = _new_longitude;
                    _speed = _new_speed;
                    _course = _new_course;
                    break;
                case _GPS_SENTENCE_GPGGA:
                    _altitude = _new_altitude;
     f1c:	6a47      	ldr	r7, [r0, #36]	; 0x24
                    _time = _new_time;
     f1e:	6846      	ldr	r6, [r0, #4]
                    _latitude = _new_latitude;
     f20:	6944      	ldr	r4, [r0, #20]
                    _longitude = _new_longitude;
     f22:	69c1      	ldr	r1, [r0, #28]
                    _numsats = _new_numsats;
     f24:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
                    _hdop = _new_hdop;
     f28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
                    _longitude = _new_longitude;
                    _speed = _new_speed;
                    _course = _new_course;
                    break;
                case _GPS_SENTENCE_GPGGA:
                    _altitude = _new_altitude;
     f2a:	6207      	str	r7, [r0, #32]
                    _time = _new_time;
     f2c:	6006      	str	r6, [r0, #0]
                    _latitude = _new_latitude;
     f2e:	6104      	str	r4, [r0, #16]
                    _longitude = _new_longitude;
     f30:	6181      	str	r1, [r0, #24]
                    _numsats = _new_numsats;
     f32:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
                    _hdop = _new_hdop;
     f36:	6383      	str	r3, [r0, #56]	; 0x38
                    break;
     f38:	e635      	b.n	ba6 <TinyGPS::term_complete()+0x52>
     f3a:	4907      	ldr	r1, [pc, #28]	; (f58 <TinyGPS::term_complete()+0x404>)
    return ret;
}

int TinyGPS::gpsstrcmp(const char* str1, const char* str2)
{
    while (*str1 && *str1 == *str2)
     f3c:	4632      	mov	r2, r6
     f3e:	e003      	b.n	f48 <TinyGPS::term_complete()+0x3f4>
     f40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     f44:	429c      	cmp	r4, r3
     f46:	d109      	bne.n	f5c <TinyGPS::term_complete()+0x408>
     f48:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     f4c:	2b00      	cmp	r3, #0
     f4e:	d1f7      	bne.n	f40 <TinyGPS::term_complete()+0x3ec>
     f50:	e643      	b.n	bda <TinyGPS::term_complete()+0x86>
     f52:	bf00      	nop
     f54:	0000b36c 	.word	0x0000b36c
     f58:	0000b374 	.word	0x0000b374
     f5c:	499a      	ldr	r1, [pc, #616]	; (11c8 <TinyGPS::term_complete()+0x674>)
     f5e:	4632      	mov	r2, r6
     f60:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     f64:	2b00      	cmp	r3, #0
     f66:	f43f ae39 	beq.w	bdc <TinyGPS::term_complete()+0x88>
     f6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     f6e:	429c      	cmp	r4, r3
     f70:	d0f6      	beq.n	f60 <TinyGPS::term_complete()+0x40c>
     f72:	4996      	ldr	r1, [pc, #600]	; (11cc <TinyGPS::term_complete()+0x678>)
     f74:	4632      	mov	r2, r6
     f76:	e004      	b.n	f82 <TinyGPS::term_complete()+0x42e>
     f78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     f7c:	429c      	cmp	r4, r3
     f7e:	f040 80c7 	bne.w	1110 <TinyGPS::term_complete()+0x5bc>
     f82:	f812 3f01 	ldrb.w	r3, [r2, #1]!
     f86:	2b00      	cmp	r3, #0
     f88:	d1f6      	bne.n	f78 <TinyGPS::term_complete()+0x424>
        if (!gpsstrcmp(_term, _GPRMC_TERM) || !gpsstrcmp(_term, _GNRMC_TERM))
            _sentence_type = _GPS_SENTENCE_GPRMC;
        else if (!gpsstrcmp(_term, _GPGGA_TERM))
            _sentence_type = _GPS_SENTENCE_GPGGA;
        else if (!gpsstrcmp(_term, _GNGNS_TERM))
            _sentence_type = _GPS_SENTENCE_GNGNS;
     f8a:	2302      	movs	r3, #2
     f8c:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
     f90:	e609      	b.n	ba6 <TinyGPS::term_complete()+0x52>
        byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
        if (checksum == _parity)
        {
            if (_sentence_type == _GPS_SENTENCE_GPRMC)   //set the time and date even if not tracking
            {
                _time = _new_time;
     f92:	6847      	ldr	r7, [r0, #4]
                _date = _new_date;
     f94:	68c2      	ldr	r2, [r0, #12]
        byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
        if (checksum == _parity)
        {
            if (_sentence_type == _GPS_SENTENCE_GPRMC)   //set the time and date even if not tracking
            {
                _time = _new_time;
     f96:	6007      	str	r7, [r0, #0]
                _date = _new_date;
     f98:	6082      	str	r2, [r0, #8]
            }
            if (_gps_data_good)
     f9a:	2d00      	cmp	r5, #0
     f9c:	f43f ae02 	beq.w	ba4 <TinyGPS::term_complete()+0x50>
            {
#ifndef _GPS_NO_STATS
                ++_good_sentences;
     fa0:	f8b0 30dc 	ldrh.w	r3, [r0, #220]	; 0xdc
#endif
                _last_time_fix = _new_time_fix;
     fa4:	6c86      	ldr	r6, [r0, #72]	; 0x48
                _last_position_fix = _new_position_fix;
     fa6:	6d04      	ldr	r4, [r0, #80]	; 0x50
                switch (_sentence_type)
                {
                case _GPS_SENTENCE_GPRMC:
                    _time = _new_time;
                    _date = _new_date;
                    _latitude = _new_latitude;
     fa8:	6941      	ldr	r1, [r0, #20]
                _last_position_fix = _new_position_fix;

                switch (_sentence_type)
                {
                case _GPS_SENTENCE_GPRMC:
                    _time = _new_time;
     faa:	6007      	str	r7, [r0, #0]
                _date = _new_date;
            }
            if (_gps_data_good)
            {
#ifndef _GPS_NO_STATS
                ++_good_sentences;
     fac:	3301      	adds	r3, #1
                {
                case _GPS_SENTENCE_GPRMC:
                    _time = _new_time;
                    _date = _new_date;
                    _latitude = _new_latitude;
                    _longitude = _new_longitude;
     fae:	69c7      	ldr	r7, [r0, #28]

                switch (_sentence_type)
                {
                case _GPS_SENTENCE_GPRMC:
                    _time = _new_time;
                    _date = _new_date;
     fb0:	6082      	str	r2, [r0, #8]
                _date = _new_date;
            }
            if (_gps_data_good)
            {
#ifndef _GPS_NO_STATS
                ++_good_sentences;
     fb2:	f8a0 30dc 	strh.w	r3, [r0, #220]	; 0xdc
                case _GPS_SENTENCE_GPRMC:
                    _time = _new_time;
                    _date = _new_date;
                    _latitude = _new_latitude;
                    _longitude = _new_longitude;
                    _speed = _new_speed;
     fb6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                    _course = _new_course;
     fb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
            if (_gps_data_good)
            {
#ifndef _GPS_NO_STATS
                ++_good_sentences;
#endif
                _last_time_fix = _new_time_fix;
     fba:	6446      	str	r6, [r0, #68]	; 0x44
                _last_position_fix = _new_position_fix;
     fbc:	64c4      	str	r4, [r0, #76]	; 0x4c
                switch (_sentence_type)
                {
                case _GPS_SENTENCE_GPRMC:
                    _time = _new_time;
                    _date = _new_date;
                    _latitude = _new_latitude;
     fbe:	6101      	str	r1, [r0, #16]
                    _longitude = _new_longitude;
     fc0:	6187      	str	r7, [r0, #24]
                    _speed = _new_speed;
     fc2:	6282      	str	r2, [r0, #40]	; 0x28
                    _course = _new_course;
     fc4:	6303      	str	r3, [r0, #48]	; 0x30
                    break;
     fc6:	e5ee      	b.n	ba6 <TinyGPS::term_complete()+0x52>
        switch (COMBINE(_sentence_type, _term_number))
        {
        case COMBINE(_GPS_SENTENCE_GPRMC, 1): // Time in both sentences
        case COMBINE(_GPS_SENTENCE_GPGGA, 1):
        case COMBINE(_GPS_SENTENCE_GNGNS, 1):
            _new_time = parse_decimal();
     fc8:	f7ff fd24 	bl	a14 <TinyGPS::parse_decimal()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     fcc:	4b80      	ldr	r3, [pc, #512]	; (11d0 <TinyGPS::term_complete()+0x67c>)
     fce:	6060      	str	r0, [r4, #4]
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	9300      	str	r3, [sp, #0]
	return ret;
     fd4:	9b00      	ldr	r3, [sp, #0]
            _new_time_fix = millis();
     fd6:	64a3      	str	r3, [r4, #72]	; 0x48
            break;
     fd8:	e5e5      	b.n	ba6 <TinyGPS::term_complete()+0x52>
        case COMBINE(_GPS_SENTENCE_GPGSV, 16):
        case COMBINE(_GPS_SENTENCE_GLGSV, 4):
        case COMBINE(_GPS_SENTENCE_GLGSV, 8):
        case COMBINE(_GPS_SENTENCE_GLGSV, 12):
        case COMBINE(_GPS_SENTENCE_GLGSV, 16):
            _tracked_satellites_index = atoi(_term);
     fda:	3056      	adds	r0, #86	; 0x56
     fdc:	f005 fe38 	bl	6c50 <atoi>
     fe0:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
            break;
     fe4:	e5df      	b.n	ba6 <TinyGPS::term_complete()+0x52>
          //_sats_used[
            break;
        case COMBINE(_GPS_SENTENCE_GPGSV, 2):   //beginning of sequence
        case COMBINE(_GPS_SENTENCE_GLGSV, 2):   //beginning of sequence
        {
            uint8_t msgId = atoi(_term) - 1;  //start from 0
     fe6:	3056      	adds	r0, #86	; 0x56
     fe8:	f005 fe32 	bl	6c50 <atoi>
     fec:	3801      	subs	r0, #1
            if (msgId == 0) {
     fee:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
                //http://geostar-navigation.com/file/geos3/geos_nmea_protocol_v3_0_eng.pdf
                if (_sentence_type == _GPS_SENTENCE_GPGSV) {
     ff2:	f894 6065 	ldrb.w	r6, [r4, #101]	; 0x65
            break;
        case COMBINE(_GPS_SENTENCE_GPGSV, 2):   //beginning of sequence
        case COMBINE(_GPS_SENTENCE_GLGSV, 2):   //beginning of sequence
        {
            uint8_t msgId = atoi(_term) - 1;  //start from 0
            if (msgId == 0) {
     ff6:	d10b      	bne.n	1010 <TinyGPS::term_complete()+0x4bc>
                //http://geostar-navigation.com/file/geos3/geos_nmea_protocol_v3_0_eng.pdf
                if (_sentence_type == _GPS_SENTENCE_GPGSV) {
     ff8:	2e04      	cmp	r6, #4
     ffa:	f000 80d8 	beq.w	11ae <TinyGPS::term_complete()+0x65a>
     ffe:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    1002:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
                }
                else {
                    //reset GLONASS trackedSatellites: range starts with 23
                    for (uint8_t x = 12; x < 24; x++)
                    {
                        tracked_sat_rec[x] = 0;
    1006:	4611      	mov	r1, r2
    1008:	f843 1f04 	str.w	r1, [r3, #4]!
                        tracked_sat_rec[x] = 0;
                    }
                }
                else {
                    //reset GLONASS trackedSatellites: range starts with 23
                    for (uint8_t x = 12; x < 24; x++)
    100c:	4283      	cmp	r3, r0
    100e:	d1fb      	bne.n	1008 <TinyGPS::term_complete()+0x4b4>
                        tracked_sat_rec[x] = 0;
                    }
                }
            }
            _sat_index = msgId * 4;   //4 sattelites/line
            if (_sentence_type == _GPS_SENTENCE_GLGSV)
    1010:	2e05      	cmp	r6, #5
    1012:	f000 80c7 	beq.w	11a4 <TinyGPS::term_complete()+0x650>
                    {
                        tracked_sat_rec[x] = 0;
                    }
                }
            }
            _sat_index = msgId * 4;   //4 sattelites/line
    1016:	0092      	lsls	r2, r2, #2
    1018:	f884 20d4 	strb.w	r2, [r4, #212]	; 0xd4
    101c:	e5c2      	b.n	ba4 <TinyGPS::term_complete()+0x50>
        case COMBINE(_GPS_SENTENCE_GPGSV, 19):
        case COMBINE(_GPS_SENTENCE_GLGSV, 7):   //strength
        case COMBINE(_GPS_SENTENCE_GLGSV, 11):
        case COMBINE(_GPS_SENTENCE_GLGSV, 15):
        case COMBINE(_GPS_SENTENCE_GLGSV, 19):
            uint8_t stren = (uint8_t)atoi(_term);
    101e:	3056      	adds	r0, #86	; 0x56
    1020:	f005 fe16 	bl	6c50 <atoi>
            if (stren == 0)  //remove the record, 0dB strength
    1024:	f010 0fff 	tst.w	r0, #255	; 0xff
    1028:	f000 80ae 	beq.w	1188 <TinyGPS::term_complete()+0x634>
            {
                tracked_sat_rec[_sat_index + (_term_number - 7) / 4] = 0;
            }
            else
            {
                tracked_sat_rec[_sat_index + (_term_number - 7) / 4] = _tracked_satellites_index << 8 | stren << 1;
    102c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    1030:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
    1034:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
    1038:	1fde      	subs	r6, r3, #7
    103a:	bf48      	it	mi
    103c:	1f1e      	submi	r6, r3, #4
    103e:	eb02 02a6 	add.w	r2, r2, r6, asr #2
    1042:	0043      	lsls	r3, r0, #1
    1044:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
    1048:	321c      	adds	r2, #28
    104a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    104e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    1052:	e5a8      	b.n	ba6 <TinyGPS::term_complete()+0x52>
        case COMBINE(_GPS_SENTENCE_GNGNS, 5):
            if (_term[0] == 'W')
                _new_longitude = -_new_longitude;
            break;
        case COMBINE(_GPS_SENTENCE_GNGNS, 6):
            strncpy(_constellations, _term, 5);
    1054:	f100 0156 	add.w	r1, r0, #86	; 0x56
    1058:	2205      	movs	r2, #5
    105a:	3069      	adds	r0, #105	; 0x69
    105c:	f006 fd5e 	bl	7b1c <strncpy>
            break;
    1060:	e5a1      	b.n	ba6 <TinyGPS::term_complete()+0x52>
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
    1062:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    1066:	2b09      	cmp	r3, #9
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
            _new_course = parse_decimal();
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
            _new_date = gpsatol(_term);
    1068:	f100 0156 	add.w	r1, r0, #86	; 0x56
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
    106c:	f04f 0300 	mov.w	r3, #0
    1070:	d80b      	bhi.n	108a <TinyGPS::term_complete()+0x536>
        ret = 10 * ret + *str++ - '0';
    1072:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1076:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
    107a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    107e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    1082:	2809      	cmp	r0, #9
        ret = 10 * ret + *str++ - '0';
    1084:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char* str)
{
    long ret = 0;
    while (gpsisdigit(*str))
    1088:	d9f3      	bls.n	1072 <TinyGPS::term_complete()+0x51e>
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
            _new_course = parse_decimal();
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
            _new_date = gpsatol(_term);
    108a:	60e3      	str	r3, [r4, #12]
            break;
    108c:	e58b      	b.n	ba6 <TinyGPS::term_complete()+0x52>
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
            _new_speed = parse_decimal();
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
            _new_course = parse_decimal();
    108e:	f7ff fcc1 	bl	a14 <TinyGPS::parse_decimal()>
    1092:	6360      	str	r0, [r4, #52]	; 0x34
            break;
    1094:	e587      	b.n	ba6 <TinyGPS::term_complete()+0x52>
            _new_longitude = parse_degrees();
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 6): // E/W
        case COMBINE(_GPS_SENTENCE_GPGGA, 5):
        case COMBINE(_GPS_SENTENCE_GNGNS, 5):
            if (_term[0] == 'W')
    1096:	2a57      	cmp	r2, #87	; 0x57
    1098:	f47f ad84 	bne.w	ba4 <TinyGPS::term_complete()+0x50>
                _new_longitude = -_new_longitude;
    109c:	69c3      	ldr	r3, [r0, #28]
    109e:	425b      	negs	r3, r3
    10a0:	61c3      	str	r3, [r0, #28]
    10a2:	e580      	b.n	ba6 <TinyGPS::term_complete()+0x52>
                _new_latitude = -_new_latitude;
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 5): // Longitude
        case COMBINE(_GPS_SENTENCE_GPGGA, 4):
        case COMBINE(_GPS_SENTENCE_GNGNS, 4):
            _new_longitude = parse_degrees();
    10a4:	f7ff fcf8 	bl	a98 <TinyGPS::parse_degrees()>
    10a8:	61e0      	str	r0, [r4, #28]
            break;
    10aa:	e57c      	b.n	ba6 <TinyGPS::term_complete()+0x52>
            _new_position_fix = millis();
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 4): // N/S
        case COMBINE(_GPS_SENTENCE_GPGGA, 3):
        case COMBINE(_GPS_SENTENCE_GNGNS, 3):
            if (_term[0] == 'S')
    10ac:	2a53      	cmp	r2, #83	; 0x53
    10ae:	f47f ad79 	bne.w	ba4 <TinyGPS::term_complete()+0x50>
                _new_latitude = -_new_latitude;
    10b2:	6943      	ldr	r3, [r0, #20]
    10b4:	425b      	negs	r3, r3
    10b6:	6143      	str	r3, [r0, #20]
    10b8:	e575      	b.n	ba6 <TinyGPS::term_complete()+0x52>
            _gps_data_good = _term[0] == 'A';
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 3): // Latitude
        case COMBINE(_GPS_SENTENCE_GPGGA, 2):
        case COMBINE(_GPS_SENTENCE_GNGNS, 2):
            _new_latitude = parse_degrees();
    10ba:	f7ff fced 	bl	a98 <TinyGPS::parse_degrees()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    10be:	4b44      	ldr	r3, [pc, #272]	; (11d0 <TinyGPS::term_complete()+0x67c>)
    10c0:	6160      	str	r0, [r4, #20]
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	9301      	str	r3, [sp, #4]
	return ret;
    10c6:	9b01      	ldr	r3, [sp, #4]
            _new_position_fix = millis();
    10c8:	6523      	str	r3, [r4, #80]	; 0x50
            break;
    10ca:	e56c      	b.n	ba6 <TinyGPS::term_complete()+0x52>
            break;
        case COMBINE(_GPS_SENTENCE_GPGGA, 8): // HDOP
            _new_hdop = parse_decimal();
            break;
        case COMBINE(_GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
            _new_altitude = parse_decimal();
    10cc:	f7ff fca2 	bl	a14 <TinyGPS::parse_decimal()>
    10d0:	6260      	str	r0, [r4, #36]	; 0x24
            break;
    10d2:	e568      	b.n	ba6 <TinyGPS::term_complete()+0x52>
        case COMBINE(_GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA): GPS only
        case COMBINE(_GPS_SENTENCE_GNGNS, 7): //  GNGNS counts-in all constellations
            _new_numsats = (unsigned char)atoi(_term);
            break;
        case COMBINE(_GPS_SENTENCE_GPGGA, 8): // HDOP
            _new_hdop = parse_decimal();
    10d4:	f7ff fc9e 	bl	a14 <TinyGPS::parse_decimal()>
    10d8:	63e0      	str	r0, [r4, #60]	; 0x3c
            break;
    10da:	e564      	b.n	ba6 <TinyGPS::term_complete()+0x52>
        case COMBINE(_GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
            _gps_data_good = _term[0] > '0';
            break;
        case COMBINE(_GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA): GPS only
        case COMBINE(_GPS_SENTENCE_GNGNS, 7): //  GNGNS counts-in all constellations
            _new_numsats = (unsigned char)atoi(_term);
    10dc:	3056      	adds	r0, #86	; 0x56
    10de:	f005 fdb7 	bl	6c50 <atoi>
    10e2:	b2c0      	uxtb	r0, r0
    10e4:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
            break;
    10e8:	e55d      	b.n	ba6 <TinyGPS::term_complete()+0x52>
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
            _new_date = gpsatol(_term);
            break;
        case COMBINE(_GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
            _gps_data_good = _term[0] > '0';
    10ea:	2a30      	cmp	r2, #48	; 0x30
    10ec:	bf94      	ite	ls
    10ee:	2200      	movls	r2, #0
    10f0:	2201      	movhi	r2, #1
    10f2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
            break;
    10f6:	e556      	b.n	ba6 <TinyGPS::term_complete()+0x52>
            break;
        case COMBINE(_GPS_SENTENCE_GNGNS, 6):
            strncpy(_constellations, _term, 5);
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
            _new_speed = parse_decimal();
    10f8:	f7ff fc8c 	bl	a14 <TinyGPS::parse_decimal()>
    10fc:	62e0      	str	r0, [r4, #44]	; 0x2c
            break;
    10fe:	e552      	b.n	ba6 <TinyGPS::term_complete()+0x52>
        case COMBINE(_GPS_SENTENCE_GNGNS, 1):
            _new_time = parse_decimal();
            _new_time_fix = millis();
            break;
        case COMBINE(_GPS_SENTENCE_GPRMC, 2): // GPRMC validity
            _gps_data_good = _term[0] == 'A';
    1100:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    1104:	fab2 f282 	clz	r2, r2
    1108:	0952      	lsrs	r2, r2, #5
    110a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
            break;
    110e:	e54a      	b.n	ba6 <TinyGPS::term_complete()+0x52>
    1110:	4930      	ldr	r1, [pc, #192]	; (11d4 <TinyGPS::term_complete()+0x680>)
    return ret;
}

int TinyGPS::gpsstrcmp(const char* str1, const char* str2)
{
    while (*str1 && *str1 == *str2)
    1112:	4632      	mov	r2, r6
    1114:	e003      	b.n	111e <TinyGPS::term_complete()+0x5ca>
    1116:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    111a:	429c      	cmp	r4, r3
    111c:	d107      	bne.n	112e <TinyGPS::term_complete()+0x5da>
    111e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    1122:	2b00      	cmp	r3, #0
    1124:	d1f7      	bne.n	1116 <TinyGPS::term_complete()+0x5c2>
        else if (!gpsstrcmp(_term, _GPGGA_TERM))
            _sentence_type = _GPS_SENTENCE_GPGGA;
        else if (!gpsstrcmp(_term, _GNGNS_TERM))
            _sentence_type = _GPS_SENTENCE_GNGNS;
        else if (!gpsstrcmp(_term, _GNGSA_TERM) || !gpsstrcmp(_term, _GPGSA_TERM))
            _sentence_type = _GPS_SENTENCE_GNGSA;
    1126:	2303      	movs	r3, #3
    1128:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    112c:	e53b      	b.n	ba6 <TinyGPS::term_complete()+0x52>
    112e:	492a      	ldr	r1, [pc, #168]	; (11d8 <TinyGPS::term_complete()+0x684>)
    return ret;
}

int TinyGPS::gpsstrcmp(const char* str1, const char* str2)
{
    while (*str1 && *str1 == *str2)
    1130:	4632      	mov	r2, r6
    1132:	e003      	b.n	113c <TinyGPS::term_complete()+0x5e8>
    1134:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1138:	429c      	cmp	r4, r3
    113a:	d104      	bne.n	1146 <TinyGPS::term_complete()+0x5f2>
    113c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    1140:	2b00      	cmp	r3, #0
    1142:	d1f7      	bne.n	1134 <TinyGPS::term_complete()+0x5e0>
    1144:	e7ef      	b.n	1126 <TinyGPS::term_complete()+0x5d2>
    1146:	4925      	ldr	r1, [pc, #148]	; (11dc <TinyGPS::term_complete()+0x688>)
    1148:	4632      	mov	r2, r6
    114a:	e003      	b.n	1154 <TinyGPS::term_complete()+0x600>
    114c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1150:	429c      	cmp	r4, r3
    1152:	d107      	bne.n	1164 <TinyGPS::term_complete()+0x610>
    1154:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    1158:	2b00      	cmp	r3, #0
    115a:	d1f7      	bne.n	114c <TinyGPS::term_complete()+0x5f8>
        else if (!gpsstrcmp(_term, _GNGNS_TERM))
            _sentence_type = _GPS_SENTENCE_GNGNS;
        else if (!gpsstrcmp(_term, _GNGSA_TERM) || !gpsstrcmp(_term, _GPGSA_TERM))
            _sentence_type = _GPS_SENTENCE_GNGSA;
        else if (!gpsstrcmp(_term, _GPGSV_TERM))
            _sentence_type = _GPS_SENTENCE_GPGSV;
    115c:	2304      	movs	r3, #4
    115e:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    1162:	e520      	b.n	ba6 <TinyGPS::term_complete()+0x52>
    1164:	4a1e      	ldr	r2, [pc, #120]	; (11e0 <TinyGPS::term_complete()+0x68c>)
    1166:	e003      	b.n	1170 <TinyGPS::term_complete()+0x61c>
    return ret;
}

int TinyGPS::gpsstrcmp(const char* str1, const char* str2)
{
    while (*str1 && *str1 == *str2)
    1168:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    116c:	4299      	cmp	r1, r3
    116e:	d107      	bne.n	1180 <TinyGPS::term_complete()+0x62c>
    1170:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    1174:	2b00      	cmp	r3, #0
    1176:	d1f7      	bne.n	1168 <TinyGPS::term_complete()+0x614>
        else if (!gpsstrcmp(_term, _GNGSA_TERM) || !gpsstrcmp(_term, _GPGSA_TERM))
            _sentence_type = _GPS_SENTENCE_GNGSA;
        else if (!gpsstrcmp(_term, _GPGSV_TERM))
            _sentence_type = _GPS_SENTENCE_GPGSV;
        else if (!gpsstrcmp(_term, _GLGSV_TERM))
            _sentence_type = _GPS_SENTENCE_GLGSV;
    1178:	2305      	movs	r3, #5
    117a:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    117e:	e512      	b.n	ba6 <TinyGPS::term_complete()+0x52>
        else
            _sentence_type = _GPS_SENTENCE_OTHER;
    1180:	2306      	movs	r3, #6
    1182:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    1186:	e50e      	b.n	ba6 <TinyGPS::term_complete()+0x52>
        case COMBINE(_GPS_SENTENCE_GLGSV, 15):
        case COMBINE(_GPS_SENTENCE_GLGSV, 19):
            uint8_t stren = (uint8_t)atoi(_term);
            if (stren == 0)  //remove the record, 0dB strength
            {
                tracked_sat_rec[_sat_index + (_term_number - 7) / 4] = 0;
    1188:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
    118c:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    1190:	1fd1      	subs	r1, r2, #7
    1192:	bf48      	it	mi
    1194:	1f11      	submi	r1, r2, #4
    1196:	eb03 03a1 	add.w	r3, r3, r1, asr #2
    119a:	331c      	adds	r3, #28
    119c:	2200      	movs	r2, #0
    119e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    11a2:	e500      	b.n	ba6 <TinyGPS::term_complete()+0x52>
                }
            }
            _sat_index = msgId * 4;   //4 sattelites/line
            if (_sentence_type == _GPS_SENTENCE_GLGSV)
            {
                _sat_index = msgId * 4 + 12;   //Glonass offset by 12
    11a4:	1cd3      	adds	r3, r2, #3
    11a6:	009b      	lsls	r3, r3, #2
    11a8:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
    11ac:	e4fb      	b.n	ba6 <TinyGPS::term_complete()+0x52>
    11ae:	f104 036c 	add.w	r3, r4, #108	; 0x6c
    11b2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
                //http://geostar-navigation.com/file/geos3/geos_nmea_protocol_v3_0_eng.pdf
                if (_sentence_type == _GPS_SENTENCE_GPGSV) {
                    //reset GPS & WAAS trackedSatellites
                    for (uint8_t x = 0; x < 12; x++)
                    {
                        tracked_sat_rec[x] = 0;
    11b6:	f843 2f04 	str.w	r2, [r3, #4]!
            uint8_t msgId = atoi(_term) - 1;  //start from 0
            if (msgId == 0) {
                //http://geostar-navigation.com/file/geos3/geos_nmea_protocol_v3_0_eng.pdf
                if (_sentence_type == _GPS_SENTENCE_GPGSV) {
                    //reset GPS & WAAS trackedSatellites
                    for (uint8_t x = 0; x < 12; x++)
    11ba:	4283      	cmp	r3, r0
                    {
                        tracked_sat_rec[x] = 0;
    11bc:	f04f 0100 	mov.w	r1, #0
            uint8_t msgId = atoi(_term) - 1;  //start from 0
            if (msgId == 0) {
                //http://geostar-navigation.com/file/geos3/geos_nmea_protocol_v3_0_eng.pdf
                if (_sentence_type == _GPS_SENTENCE_GPGSV) {
                    //reset GPS & WAAS trackedSatellites
                    for (uint8_t x = 0; x < 12; x++)
    11c0:	d1f9      	bne.n	11b6 <TinyGPS::term_complete()+0x662>
                    {
                        tracked_sat_rec[x] = 0;
                    }
                }
            }
            _sat_index = msgId * 4;   //4 sattelites/line
    11c2:	f884 10d4 	strb.w	r1, [r4, #212]	; 0xd4
    11c6:	e4ee      	b.n	ba6 <TinyGPS::term_complete()+0x52>
    11c8:	0000b37c 	.word	0x0000b37c
    11cc:	0000b384 	.word	0x0000b384
    11d0:	1fff1610 	.word	0x1fff1610
    11d4:	0000b38c 	.word	0x0000b38c
    11d8:	0000b394 	.word	0x0000b394
    11dc:	0000b39c 	.word	0x0000b39c
    11e0:	0000b3a4 	.word	0x0000b3a4

000011e4 <TinyGPS::encode(char)>:
bool TinyGPS::encode(char c)
{
    bool valid_sentence = false;

#ifndef _GPS_NO_STATS
    ++_encoded_characters;
    11e4:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
//
// public methods
//

bool TinyGPS::encode(char c)
{
    11e8:	b538      	push	{r3, r4, r5, lr}
    11ea:	4603      	mov	r3, r0
    bool valid_sentence = false;

#ifndef _GPS_NO_STATS
    ++_encoded_characters;
    11ec:	3201      	adds	r2, #1
#endif
    switch (c)
    11ee:	f1a1 000a 	sub.w	r0, r1, #10
bool TinyGPS::encode(char c)
{
    bool valid_sentence = false;

#ifndef _GPS_NO_STATS
    ++_encoded_characters;
    11f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
#endif
    switch (c)
    11f6:	2822      	cmp	r0, #34	; 0x22
    11f8:	d83f      	bhi.n	127a <TinyGPS::encode(char)+0x96>
    11fa:	e8df f000 	tbb	[pc, r0]
    11fe:	3e18      	.short	0x3e18
    1200:	3e3e183e 	.word	0x3e3e183e
    1204:	3e3e3e3e 	.word	0x3e3e3e3e
    1208:	3e3e3e3e 	.word	0x3e3e3e3e
    120c:	3e3e3e3e 	.word	0x3e3e3e3e
    1210:	3e3e3e3e 	.word	0x3e3e3e3e
    1214:	3e3e3e3e 	.word	0x3e3e3e3e
    1218:	3e3e3e2f 	.word	0x3e3e3e2f
    121c:	3e183e3e 	.word	0x3e183e3e
    1220:	12          	.byte	0x12
    1221:	00          	.byte	0x00
    {
    case ',': // term terminators
        _parity ^= c;
    1222:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    1226:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
    122a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    122e:	461d      	mov	r5, r3
    case '\r':
    case '\n':
    case '*':
        if (_term_offset < sizeof(_term))
    1230:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    1234:	2b0e      	cmp	r3, #14
    1236:	460c      	mov	r4, r1
    1238:	d932      	bls.n	12a0 <TinyGPS::encode(char)+0xbc>
// public methods
//

bool TinyGPS::encode(char c)
{
    bool valid_sentence = false;
    123a:	2000      	movs	r0, #0
        if (_term_offset < sizeof(_term))
        {
            _term[_term_offset] = 0;
            valid_sentence = term_complete();
        }
        ++_term_number;
    123c:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
        _term_offset = 0;
        _is_checksum_term = c == '*';
    1240:	f1a4 012a 	sub.w	r1, r4, #42	; 0x2a
        if (_term_offset < sizeof(_term))
        {
            _term[_term_offset] = 0;
            valid_sentence = term_complete();
        }
        ++_term_number;
    1244:	3301      	adds	r3, #1
        _term_offset = 0;
    1246:	2200      	movs	r2, #0
        _is_checksum_term = c == '*';
    1248:	fab1 f181 	clz	r1, r1
    124c:	0949      	lsrs	r1, r1, #5
        if (_term_offset < sizeof(_term))
        {
            _term[_term_offset] = 0;
            valid_sentence = term_complete();
        }
        ++_term_number;
    124e:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
        _term_offset = 0;
    1252:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
        _is_checksum_term = c == '*';
    1256:	f885 1055 	strb.w	r1, [r5, #85]	; 0x55
        return valid_sentence;
    125a:	bd38      	pop	{r3, r4, r5, pc}

    case '$': // sentence begin
        _term_number = _term_offset = 0;
    125c:	2000      	movs	r0, #0
        _parity = 0;
        _sentence_type = _GPS_SENTENCE_OTHER;
    125e:	2206      	movs	r2, #6
        _term_offset = 0;
        _is_checksum_term = c == '*';
        return valid_sentence;

    case '$': // sentence begin
        _term_number = _term_offset = 0;
    1260:	f883 0067 	strb.w	r0, [r3, #103]	; 0x67
    1264:	f883 0066 	strb.w	r0, [r3, #102]	; 0x66
        _parity = 0;
    1268:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
        _sentence_type = _GPS_SENTENCE_OTHER;
    126c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        _is_checksum_term = false;
    1270:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
        _gps_data_good = false;
    1274:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
        return valid_sentence;
    1278:	bd38      	pop	{r3, r4, r5, pc}
    }

    // ordinary characters
    if (_term_offset < sizeof(_term) - 1)
    127a:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
    127e:	2a0d      	cmp	r2, #13
    1280:	d805      	bhi.n	128e <TinyGPS::encode(char)+0xaa>
        _term[_term_offset++] = c;
    1282:	1898      	adds	r0, r3, r2
    1284:	3201      	adds	r2, #1
    1286:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    128a:	f880 1056 	strb.w	r1, [r0, #86]	; 0x56
    if (!_is_checksum_term)
    128e:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
    1292:	b968      	cbnz	r0, 12b0 <TinyGPS::encode(char)+0xcc>
        _parity ^= c;
    1294:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    1298:	4051      	eors	r1, r2
    129a:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
    129e:	bd38      	pop	{r3, r4, r5, pc}
    case '\r':
    case '\n':
    case '*':
        if (_term_offset < sizeof(_term))
        {
            _term[_term_offset] = 0;
    12a0:	442b      	add	r3, r5
    12a2:	2200      	movs	r2, #0
    12a4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
            valid_sentence = term_complete();
    12a8:	4628      	mov	r0, r5
    12aa:	f7ff fc53 	bl	b54 <TinyGPS::term_complete()>
    12ae:	e7c5      	b.n	123c <TinyGPS::encode(char)+0x58>
    if (_term_offset < sizeof(_term) - 1)
        _term[_term_offset++] = c;
    if (!_is_checksum_term)
        _parity ^= c;

    return valid_sentence;
    12b0:	2000      	movs	r0, #0
}
    12b2:	bd38      	pop	{r3, r4, r5, pc}

000012b4 <TinyGPS::f_get_position(float*, float*, unsigned long*)>:
    if (age) *age = _last_time_fix == GPS_INVALID_FIX_TIME ?
        GPS_INVALID_AGE : millis() - _last_time_fix;
}

void TinyGPS::f_get_position(float* latitude, float* longitude, unsigned long* fix_age)
{
    12b4:	b470      	push	{r4, r5, r6}

// lat/long in MILLIONTHs of a degree and age of fix in milliseconds
// (note: versions 12 and earlier gave this value in 100,000ths of a degree.
void TinyGPS::get_position(long* latitude, long* longitude, unsigned long* fix_age)
{
    if (latitude) *latitude = _latitude;
    12b6:	6904      	ldr	r4, [r0, #16]
    if (longitude) *longitude = _longitude;
    12b8:	6985      	ldr	r5, [r0, #24]
    if (age) *age = _last_time_fix == GPS_INVALID_FIX_TIME ?
        GPS_INVALID_AGE : millis() - _last_time_fix;
}

void TinyGPS::f_get_position(float* latitude, float* longitude, unsigned long* fix_age)
{
    12ba:	b083      	sub	sp, #12
// (note: versions 12 and earlier gave this value in 100,000ths of a degree.
void TinyGPS::get_position(long* latitude, long* longitude, unsigned long* fix_age)
{
    if (latitude) *latitude = _latitude;
    if (longitude) *longitude = _longitude;
    if (fix_age) *fix_age = _last_position_fix == GPS_INVALID_FIX_TIME ?
    12bc:	b143      	cbz	r3, 12d0 <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x1c>
    12be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
        GPS_INVALID_AGE : millis() - _last_position_fix;
    12c0:	1c46      	adds	r6, r0, #1
    12c2:	d004      	beq.n	12ce <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x1a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12c4:	4e13      	ldr	r6, [pc, #76]	; (1314 <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x60>)
    12c6:	6836      	ldr	r6, [r6, #0]
    12c8:	9601      	str	r6, [sp, #4]
	return ret;
    12ca:	9e01      	ldr	r6, [sp, #4]
    12cc:	1a30      	subs	r0, r6, r0
    12ce:	6018      	str	r0, [r3, #0]

void TinyGPS::f_get_position(float* latitude, float* longitude, unsigned long* fix_age)
{
    long lat, lon;
    get_position(&lat, &lon, fix_age);
    *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    12d0:	4b11      	ldr	r3, [pc, #68]	; (1318 <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x64>)
    12d2:	429c      	cmp	r4, r3
    12d4:	d014      	beq.n	1300 <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x4c>
    12d6:	ee07 4a90 	vmov	s15, r4
    *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    12da:	ee07 5a10 	vmov	s14, r5

void TinyGPS::f_get_position(float* latitude, float* longitude, unsigned long* fix_age)
{
    long lat, lon;
    get_position(&lat, &lon, fix_age);
    *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    12de:	eddf 6a0f 	vldr	s13, [pc, #60]	; 131c <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x68>
    12e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    12e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

void TinyGPS::f_get_position(float* latitude, float* longitude, unsigned long* fix_age)
{
    long lat, lon;
    get_position(&lat, &lon, fix_age);
    *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    12ea:	ee87 6aa6 	vdiv.f32	s12, s15, s13
    *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    12ee:	eec7 7a26 	vdiv.f32	s15, s14, s13

void TinyGPS::f_get_position(float* latitude, float* longitude, unsigned long* fix_age)
{
    long lat, lon;
    get_position(&lat, &lon, fix_age);
    *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    12f2:	ed81 6a00 	vstr	s12, [r1]
    *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    12f6:	edc2 7a00 	vstr	s15, [r2]
}
    12fa:	b003      	add	sp, #12
    12fc:	bc70      	pop	{r4, r5, r6}
    12fe:	4770      	bx	lr

void TinyGPS::f_get_position(float* latitude, float* longitude, unsigned long* fix_age)
{
    long lat, lon;
    get_position(&lat, &lon, fix_age);
    *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    1300:	eddf 7a07 	vldr	s15, [pc, #28]	; 1320 <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x6c>
    1304:	edc1 7a00 	vstr	s15, [r1]
    *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    1308:	edc2 7a00 	vstr	s15, [r2]
}
    130c:	b003      	add	sp, #12
    130e:	bc70      	pop	{r4, r5, r6}
    1310:	4770      	bx	lr
    1312:	bf00      	nop
    1314:	1fff1610 	.word	0x1fff1610
    1318:	3b9ac9ff 	.word	0x3b9ac9ff
    131c:	49742400 	.word	0x49742400
    1320:	447a0000 	.word	0x447a0000

00001324 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)>:

void TinyGPS::crack_datetime(int* year, byte* month, byte* day,
    byte* hour, byte* minute, byte* second, byte* hundredths, unsigned long* age)
{
    1324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1328:	b083      	sub	sp, #12
}

// date as ddmmyy, time as hhmmsscc, and age in milliseconds
void TinyGPS::get_datetime(unsigned long* date, unsigned long* time, unsigned long* age)
{
    if (date) *date = _date;
    132a:	6884      	ldr	r4, [r0, #8]
    *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
}

void TinyGPS::crack_datetime(int* year, byte* month, byte* day,
    byte* hour, byte* minute, byte* second, byte* hundredths, unsigned long* age)
{
    132c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38

// date as ddmmyy, time as hhmmsscc, and age in milliseconds
void TinyGPS::get_datetime(unsigned long* date, unsigned long* time, unsigned long* age)
{
    if (date) *date = _date;
    if (time) *time = _time;
    1330:	6805      	ldr	r5, [r0, #0]
    *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
}

void TinyGPS::crack_datetime(int* year, byte* month, byte* day,
    byte* hour, byte* minute, byte* second, byte* hundredths, unsigned long* age)
{
    1332:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    1336:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    133a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    133c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
// date as ddmmyy, time as hhmmsscc, and age in milliseconds
void TinyGPS::get_datetime(unsigned long* date, unsigned long* time, unsigned long* age)
{
    if (date) *date = _date;
    if (time) *time = _time;
    if (age) *age = _last_time_fix == GPS_INVALID_FIX_TIME ?
    133e:	f1b8 0f00 	cmp.w	r8, #0
    1342:	d00f      	beq.n	1364 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x40>
    1344:	6c40      	ldr	r0, [r0, #68]	; 0x44
        GPS_INVALID_AGE : millis() - _last_time_fix;
    1346:	f1b0 3fff 	cmp.w	r0, #4294967295
    134a:	d009      	beq.n	1360 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    134c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 141c <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xf8>
    1350:	f8d9 9000 	ldr.w	r9, [r9]
    1354:	f8cd 9004 	str.w	r9, [sp, #4]
	return ret;
    1358:	f8dd 9004 	ldr.w	r9, [sp, #4]
    135c:	ebc0 0009 	rsb	r0, r0, r9
    1360:	f8c8 0000 	str.w	r0, [r8]
void TinyGPS::crack_datetime(int* year, byte* month, byte* day,
    byte* hour, byte* minute, byte* second, byte* hundredths, unsigned long* age)
{
    unsigned long date, time;
    get_datetime(&date, &time, age);
    if (year)
    1364:	b179      	cbz	r1, 1386 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x62>
    {
        *year = date % 100;
    1366:	482a      	ldr	r0, [pc, #168]	; (1410 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    1368:	fba0 8004 	umull	r8, r0, r0, r4
    136c:	0940      	lsrs	r0, r0, #5
    136e:	f04f 0864 	mov.w	r8, #100	; 0x64
    1372:	fb08 4010 	mls	r0, r8, r0, r4
        *year += *year > 80 ? 1900 : 2000;
    1376:	2851      	cmp	r0, #81	; 0x51
    1378:	f240 786c 	movw	r8, #1900	; 0x76c
    137c:	bf38      	it	cc
    137e:	f44f 68fa 	movcc.w	r8, #2000	; 0x7d0
    1382:	4440      	add	r0, r8
    1384:	6008      	str	r0, [r1, #0]
    }
    if (month) *month = (date / 100) % 100;
    1386:	b15a      	cbz	r2, 13a0 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x7c>
    1388:	4921      	ldr	r1, [pc, #132]	; (1410 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    138a:	fba1 0804 	umull	r0, r8, r1, r4
    138e:	ea4f 1858 	mov.w	r8, r8, lsr #5
    1392:	fba1 0108 	umull	r0, r1, r1, r8
    1396:	0948      	lsrs	r0, r1, #5
    1398:	2164      	movs	r1, #100	; 0x64
    139a:	fb01 8110 	mls	r1, r1, r0, r8
    139e:	7011      	strb	r1, [r2, #0]
    if (day) *day = date / 10000;
    13a0:	b123      	cbz	r3, 13ac <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x88>
    13a2:	4a1c      	ldr	r2, [pc, #112]	; (1414 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xf0>)
    13a4:	fba2 2404 	umull	r2, r4, r2, r4
    13a8:	0b64      	lsrs	r4, r4, #13
    13aa:	701c      	strb	r4, [r3, #0]
    if (hour) *hour = time / 1000000;
    13ac:	f1bc 0f00 	cmp.w	ip, #0
    13b0:	d005      	beq.n	13be <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x9a>
    13b2:	4b19      	ldr	r3, [pc, #100]	; (1418 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xf4>)
    13b4:	fba3 2305 	umull	r2, r3, r3, r5
    13b8:	0c9b      	lsrs	r3, r3, #18
    13ba:	f88c 3000 	strb.w	r3, [ip]
    if (minute) *minute = (time / 10000) % 100;
    13be:	f1be 0f00 	cmp.w	lr, #0
    13c2:	d00c      	beq.n	13de <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xba>
    13c4:	4b13      	ldr	r3, [pc, #76]	; (1414 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xf0>)
    13c6:	4a12      	ldr	r2, [pc, #72]	; (1410 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    13c8:	fba3 1305 	umull	r1, r3, r3, r5
    13cc:	0b5b      	lsrs	r3, r3, #13
    13ce:	fba2 1203 	umull	r1, r2, r2, r3
    13d2:	0952      	lsrs	r2, r2, #5
    13d4:	2164      	movs	r1, #100	; 0x64
    13d6:	fb01 3312 	mls	r3, r1, r2, r3
    13da:	f88e 3000 	strb.w	r3, [lr]
    if (second) *second = (time / 100) % 100;
    13de:	b157      	cbz	r7, 13f6 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xd2>
    13e0:	4b0b      	ldr	r3, [pc, #44]	; (1410 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    13e2:	fba3 2105 	umull	r2, r1, r3, r5
    13e6:	0949      	lsrs	r1, r1, #5
    13e8:	fba3 2301 	umull	r2, r3, r3, r1
    13ec:	095a      	lsrs	r2, r3, #5
    13ee:	2364      	movs	r3, #100	; 0x64
    13f0:	fb03 1312 	mls	r3, r3, r2, r1
    13f4:	703b      	strb	r3, [r7, #0]
    if (hundredths) *hundredths = time % 100;
    13f6:	b13e      	cbz	r6, 1408 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xe4>
    13f8:	4b05      	ldr	r3, [pc, #20]	; (1410 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    13fa:	fba3 2305 	umull	r2, r3, r3, r5
    13fe:	095b      	lsrs	r3, r3, #5
    1400:	2264      	movs	r2, #100	; 0x64
    1402:	fb02 5513 	mls	r5, r2, r3, r5
    1406:	7035      	strb	r5, [r6, #0]
}
    1408:	b003      	add	sp, #12
    140a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    140e:	bf00      	nop
    1410:	51eb851f 	.word	0x51eb851f
    1414:	d1b71759 	.word	0xd1b71759
    1418:	431bde83 	.word	0x431bde83
    141c:	1fff1610 	.word	0x1fff1610

00001420 <TinyGPS::f_altitude()>:

float TinyGPS::f_altitude()
{
    return _altitude == GPS_INVALID_ALTITUDE ? GPS_INVALID_F_ALTITUDE : _altitude / 100.0;
    1420:	6a03      	ldr	r3, [r0, #32]
    1422:	4a07      	ldr	r2, [pc, #28]	; (1440 <TinyGPS::f_altitude()+0x20>)
    1424:	4293      	cmp	r3, r2
    1426:	d008      	beq.n	143a <TinyGPS::f_altitude()+0x1a>
    1428:	ee07 3a90 	vmov	s15, r3
    142c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1444 <TinyGPS::f_altitude()+0x24>
    1430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1434:	ee87 0a87 	vdiv.f32	s0, s15, s14
    1438:	4770      	bx	lr
    143a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1448 <TinyGPS::f_altitude()+0x28>
}
    143e:	4770      	bx	lr
    1440:	3b9ac9ff 	.word	0x3b9ac9ff
    1444:	42c80000 	.word	0x42c80000
    1448:	49742400 	.word	0x49742400

0000144c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    144c:	4807      	ldr	r0, [pc, #28]	; (146c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    144e:	b082      	sub	sp, #8
    1450:	6803      	ldr	r3, [r0, #0]
    1452:	9301      	str	r3, [sp, #4]
	return ret;
    1454:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1456:	4411      	add	r1, r2
    1458:	e001      	b.n	145e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    145a:	4299      	cmp	r1, r3
    145c:	d304      	bcc.n	1468 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    145e:	6803      	ldr	r3, [r0, #0]
    1460:	9300      	str	r3, [sp, #0]
	return ret;
    1462:	9b00      	ldr	r3, [sp, #0]
    1464:	429a      	cmp	r2, r3
    1466:	d9f8      	bls.n	145a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    1468:	b002      	add	sp, #8
    146a:	4770      	bx	lr
    146c:	1fff1610 	.word	0x1fff1610

00001470 <VisualMicroDebug::DBG_Millis()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1470:	4b03      	ldr	r3, [pc, #12]	; (1480 <VisualMicroDebug::DBG_Millis()+0x10>)
{
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
    1472:	b082      	sub	sp, #8
    1474:	681b      	ldr	r3, [r3, #0]
    1476:	9301      	str	r3, [sp, #4]
	return ret;
    1478:	9801      	ldr	r0, [sp, #4]
	return millis();
}
    147a:	b002      	add	sp, #8
    147c:	4770      	bx	lr
    147e:	bf00      	nop
    1480:	1fff1610 	.word	0x1fff1610

00001484 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    1484:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1486:	4b07      	ldr	r3, [pc, #28]	; (14a4 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x20>)
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    1488:	6882      	ldr	r2, [r0, #8]
    148a:	681b      	ldr	r3, [r3, #0]
void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
    148c:	6101      	str	r1, [r0, #16]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    148e:	b083      	sub	sp, #12
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_UDP)
	available();
#endif
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    1490:	2400      	movs	r4, #0
    1492:	9301      	str	r3, [sp, #4]
	return ret;
    1494:	9b01      	ldr	r3, [sp, #4]
    1496:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
    1498:	60c2      	str	r2, [r0, #12]
	BreakStartMillis = DBG_Millis();
    149a:	6083      	str	r3, [r0, #8]
}
    149c:	b003      	add	sp, #12
    149e:	f85d 4b04 	ldr.w	r4, [sp], #4
    14a2:	4770      	bx	lr
    14a4:	1fff1610 	.word	0x1fff1610

000014a8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
    14a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14ac:	4b1b      	ldr	r3, [pc, #108]	; (151c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    14ae:	4c1c      	ldr	r4, [pc, #112]	; (1520 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	4e1c      	ldr	r6, [pc, #112]	; (1524 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
    14b4:	b082      	sub	sp, #8
    14b6:	4605      	mov	r5, r0
    14b8:	9301      	str	r3, [sp, #4]
    14ba:	4688      	mov	r8, r1
    14bc:	481a      	ldr	r0, [pc, #104]	; (1528 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x80>)
	return ret;
    14be:	9f01      	ldr	r7, [sp, #4]
    14c0:	2106      	movs	r1, #6
    14c2:	f003 fec9 	bl	5258 <usb_serial_write>
    14c6:	4641      	mov	r1, r8
    14c8:	2300      	movs	r3, #0
    14ca:	220a      	movs	r2, #10
    14cc:	4620      	mov	r0, r4
    14ce:	f004 f907 	bl	56e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14d2:	2103      	movs	r1, #3
    14d4:	4815      	ldr	r0, [pc, #84]	; (152c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x84>)
    14d6:	f003 febf 	bl	5258 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    14da:	4639      	mov	r1, r7
    14dc:	2300      	movs	r3, #0
    14de:	220a      	movs	r2, #10
    14e0:	4620      	mov	r0, r4
    14e2:	f004 f8fd 	bl	56e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14e6:	4630      	mov	r0, r6
    14e8:	2101      	movs	r1, #1
    14ea:	f003 feb5 	bl	5258 <usb_serial_write>
    14ee:	68a9      	ldr	r1, [r5, #8]
    14f0:	2300      	movs	r3, #0
    14f2:	1a79      	subs	r1, r7, r1
    14f4:	220a      	movs	r2, #10
    14f6:	4620      	mov	r0, r4
    14f8:	f004 f8f2 	bl	56e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14fc:	4630      	mov	r0, r6
    14fe:	2101      	movs	r1, #1
    1500:	f003 feaa 	bl	5258 <usb_serial_write>
    1504:	68eb      	ldr	r3, [r5, #12]
    1506:	68a9      	ldr	r1, [r5, #8]
    1508:	4620      	mov	r0, r4
    150a:	1ac9      	subs	r1, r1, r3
    150c:	220a      	movs	r2, #10
    150e:	2300      	movs	r3, #0
    1510:	f004 f8e6 	bl	56e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
    1514:	b002      	add	sp, #8
    1516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    151a:	bf00      	nop
    151c:	1fff1610 	.word	0x1fff1610
    1520:	1fff0784 	.word	0x1fff0784
    1524:	0000b3f4 	.word	0x0000b3f4
    1528:	0000b3e8 	.word	0x0000b3e8
    152c:	0000b3f0 	.word	0x0000b3f0

00001530 <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
    1530:	b508      	push	{r3, lr}
    1532:	2106      	movs	r1, #6
    1534:	4803      	ldr	r0, [pc, #12]	; (1544 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
    1536:	f003 fe8f 	bl	5258 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    153a:	4803      	ldr	r0, [pc, #12]	; (1548 <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif

#endif
}
    153c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1540:	f004 b8be 	b.w	56c0 <Print::println()>
    1544:	0000b3f8 	.word	0x0000b3f8
    1548:	1fff0784 	.word	0x1fff0784

0000154c <VisualMicroDebug::OnBreakPointEnd()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    154c:	4b03      	ldr	r3, [pc, #12]	; (155c <VisualMicroDebug::OnBreakPointEnd()+0x10>)

void VisualMicroDebug::OnBreakPointEnd()
{
    154e:	b082      	sub	sp, #8
    1550:	681b      	ldr	r3, [r3, #0]
    1552:	9301      	str	r3, [sp, #4]
	return ret;
    1554:	9b01      	ldr	r3, [sp, #4]
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
    1556:	6083      	str	r3, [r0, #8]
}
    1558:	b002      	add	sp, #8
    155a:	4770      	bx	lr
    155c:	1fff1610 	.word	0x1fff1610

00001560 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    1560:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1562:	4a10      	ldr	r2, [pc, #64]	; (15a4 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    1564:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DEBUGGER_TYPE != VM_DEBUGGER_TYPE_NET_UDP)
	if (!noWait)
    1566:	b9a1      	cbnz	r1, 1592 <VisualMicroDebug::outPacketStart(bool)+0x32>
    1568:	6813      	ldr	r3, [r2, #0]
    156a:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    156c:	6841      	ldr	r1, [r0, #4]
	return ret;
    156e:	9b00      	ldr	r3, [sp, #0]
    1570:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    1572:	2931      	cmp	r1, #49	; 0x31
    1574:	d80d      	bhi.n	1592 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1576:	6813      	ldr	r3, [r2, #0]
    1578:	9302      	str	r3, [sp, #8]
	return ret;
    157a:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    157c:	f104 0332 	add.w	r3, r4, #50	; 0x32
    1580:	1a59      	subs	r1, r3, r1
    1582:	e001      	b.n	1588 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1584:	4299      	cmp	r1, r3
    1586:	d304      	bcc.n	1592 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1588:	6813      	ldr	r3, [r2, #0]
    158a:	9301      	str	r3, [sp, #4]
	return ret;
    158c:	9b01      	ldr	r3, [sp, #4]
    158e:	429c      	cmp	r4, r3
    1590:	d9f8      	bls.n	1584 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1592:	6813      	ldr	r3, [r2, #0]
    1594:	9303      	str	r3, [sp, #12]
	return ret;
    1596:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    1598:	6043      	str	r3, [r0, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    159a:	2001      	movs	r0, #1
    159c:	b005      	add	sp, #20
    159e:	f85d 4b04 	ldr.w	r4, [sp], #4
    15a2:	4770      	bx	lr
    15a4:	1fff1610 	.word	0x1fff1610

000015a8 <VisualMicroDebug::outPacketEnd()>:
    15a8:	4770      	bx	lr
    15aa:	bf00      	nop

000015ac <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    15ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    15b0:	f002 bbac 	b.w	3d0c <delay>

000015b4 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    15b4:	2300      	movs	r3, #0
    15b6:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    15b8:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    15ba:	b171      	cbz	r1, 15da <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15bc:	4807      	ldr	r0, [pc, #28]	; (15dc <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    15be:	b082      	sub	sp, #8
    15c0:	6803      	ldr	r3, [r0, #0]
    15c2:	9301      	str	r3, [sp, #4]
	return ret;
    15c4:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    15c6:	4411      	add	r1, r2
    15c8:	e001      	b.n	15ce <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    15ca:	4299      	cmp	r1, r3
    15cc:	d304      	bcc.n	15d8 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15ce:	6803      	ldr	r3, [r0, #0]
    15d0:	9300      	str	r3, [sp, #0]
	return ret;
    15d2:	9b00      	ldr	r3, [sp, #0]
    15d4:	429a      	cmp	r2, r3
    15d6:	d9f8      	bls.n	15ca <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    15d8:	b002      	add	sp, #8
    15da:	4770      	bx	lr
    15dc:	1fff1610 	.word	0x1fff1610

000015e0 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    15e0:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e2:	4c13      	ldr	r4, [pc, #76]	; (1630 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    15e4:	b085      	sub	sp, #20
    15e6:	6823      	ldr	r3, [r4, #0]
    15e8:	9303      	str	r3, [sp, #12]
	return ret;
    15ea:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    15ec:	6043      	str	r3, [r0, #4]
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    15ee:	460d      	mov	r5, r1
    15f0:	4810      	ldr	r0, [pc, #64]	; (1634 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    15f2:	2106      	movs	r1, #6
    15f4:	f003 fe30 	bl	5258 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    15f8:	2300      	movs	r3, #0
    15fa:	220a      	movs	r2, #10
    15fc:	4629      	mov	r1, r5
    15fe:	480e      	ldr	r0, [pc, #56]	; (1638 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    1600:	f004 f86e 	bl	56e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1604:	2106      	movs	r1, #6
    1606:	480d      	ldr	r0, [pc, #52]	; (163c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    1608:	f003 fe26 	bl	5258 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    160c:	480a      	ldr	r0, [pc, #40]	; (1638 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    160e:	f004 f857 	bl	56c0 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1612:	6823      	ldr	r3, [r4, #0]
    1614:	9302      	str	r3, [sp, #8]
	return ret;
    1616:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1618:	f102 0132 	add.w	r1, r2, #50	; 0x32
    161c:	e001      	b.n	1622 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    161e:	4299      	cmp	r1, r3
    1620:	d304      	bcc.n	162c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1622:	6823      	ldr	r3, [r4, #0]
    1624:	9301      	str	r3, [sp, #4]
	return ret;
    1626:	9b01      	ldr	r3, [sp, #4]
    1628:	429a      	cmp	r2, r3
    162a:	d9f8      	bls.n	161e <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);

#endif //#if defined(VM_DEBUGGER_TYPE) 
}
    162c:	b005      	add	sp, #20
    162e:	bd30      	pop	{r4, r5, pc}
    1630:	1fff1610 	.word	0x1fff1610
    1634:	0000b400 	.word	0x0000b400
    1638:	1fff0784 	.word	0x1fff0784
    163c:	0000b408 	.word	0x0000b408

00001640 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    1640:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    1642:	7e03      	ldrb	r3, [r0, #24]
    1644:	b90b      	cbnz	r3, 164a <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
    1646:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
    1648:	bd38      	pop	{r3, r4, r5, pc}
    164a:	460d      	mov	r5, r1
    164c:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    164e:	f003 fdd9 	bl	5204 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    1652:	f010 0fff 	tst.w	r0, #255	; 0xff
    1656:	d101      	bne.n	165c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
    1658:	2065      	movs	r0, #101	; 0x65
    165a:	bd38      	pop	{r3, r4, r5, pc}
    165c:	f003 fdd2 	bl	5204 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    1660:	f010 0fff 	tst.w	r0, #255	; 0xff
    1664:	d0f8      	beq.n	1658 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    1666:	f003 fd91 	bl	518c <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    166a:	b2c0      	uxtb	r0, r0
    166c:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    1670:	2b1e      	cmp	r3, #30
    1672:	d8f3      	bhi.n	165c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    1674:	a201      	add	r2, pc, #4	; (adr r2, 167c <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    1676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    167a:	bf00      	nop
    167c:	00001705 	.word	0x00001705
    1680:	0000165d 	.word	0x0000165d
    1684:	0000165d 	.word	0x0000165d
    1688:	0000165d 	.word	0x0000165d
    168c:	0000165d 	.word	0x0000165d
    1690:	0000165d 	.word	0x0000165d
    1694:	0000165d 	.word	0x0000165d
    1698:	0000165d 	.word	0x0000165d
    169c:	0000165d 	.word	0x0000165d
    16a0:	0000165d 	.word	0x0000165d
    16a4:	0000165d 	.word	0x0000165d
    16a8:	000016f9 	.word	0x000016f9
    16ac:	0000165d 	.word	0x0000165d
    16b0:	0000165d 	.word	0x0000165d
    16b4:	0000165d 	.word	0x0000165d
    16b8:	0000165d 	.word	0x0000165d
    16bc:	00001647 	.word	0x00001647
    16c0:	0000165d 	.word	0x0000165d
    16c4:	0000165d 	.word	0x0000165d
    16c8:	0000165d 	.word	0x0000165d
    16cc:	0000165d 	.word	0x0000165d
    16d0:	0000165d 	.word	0x0000165d
    16d4:	0000165d 	.word	0x0000165d
    16d8:	0000165d 	.word	0x0000165d
    16dc:	0000165d 	.word	0x0000165d
    16e0:	00001647 	.word	0x00001647
    16e4:	0000165d 	.word	0x0000165d
    16e8:	0000165d 	.word	0x0000165d
    16ec:	0000165d 	.word	0x0000165d
    16f0:	0000165d 	.word	0x0000165d
    16f4:	00001649 	.word	0x00001649
		{

		case 'c':
			sendContinuedACK(breakPointId);
    16f8:	4620      	mov	r0, r4
    16fa:	4629      	mov	r1, r5
    16fc:	f7ff ff70 	bl	15e0 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    1700:	2063      	movs	r0, #99	; 0x63
    1702:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    1704:	2300      	movs	r3, #0
    1706:	7623      	strb	r3, [r4, #24]
			return 'c';
    1708:	2063      	movs	r0, #99	; 0x63
    170a:	bd38      	pop	{r3, r4, r5, pc}

0000170c <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    170c:	b570      	push	{r4, r5, r6, lr}
    170e:	4605      	mov	r5, r0
    1710:	b082      	sub	sp, #8
    1712:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    1714:	b1c9      	cbz	r1, 174a <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    1716:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1718:	4c0d      	ldr	r4, [pc, #52]	; (1750 <VisualMicroDebug::start(bool, bool)+0x44>)
    171a:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    171c:	2100      	movs	r1, #0
    171e:	4628      	mov	r0, r5
    1720:	f7ff ff8e 	bl	1640 <VisualMicroDebug::breakWait(unsigned char)>
    1724:	2863      	cmp	r0, #99	; 0x63
    1726:	d010      	beq.n	174a <VisualMicroDebug::start(bool, bool)+0x3e>
    1728:	6823      	ldr	r3, [r4, #0]
    172a:	9301      	str	r3, [sp, #4]
	return ret;
    172c:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    172e:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1730:	6823      	ldr	r3, [r4, #0]
    1732:	9300      	str	r3, [sp, #0]
	return ret;
    1734:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1736:	429a      	cmp	r2, r3
    1738:	d8f0      	bhi.n	171c <VisualMicroDebug::start(bool, bool)+0x10>
    173a:	4299      	cmp	r1, r3
    173c:	d2f8      	bcs.n	1730 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    173e:	2100      	movs	r1, #0
    1740:	4628      	mov	r0, r5
    1742:	f7ff ff7d 	bl	1640 <VisualMicroDebug::breakWait(unsigned char)>
    1746:	2863      	cmp	r0, #99	; 0x63
    1748:	d1ee      	bne.n	1728 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    174a:	762e      	strb	r6, [r5, #24]
#endif

}
    174c:	b002      	add	sp, #8
    174e:	bd70      	pop	{r4, r5, r6, pc}
    1750:	1fff1610 	.word	0x1fff1610

00001754 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    1754:	4b03      	ldr	r3, [pc, #12]	; (1764 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    1756:	2200      	movs	r2, #0
    1758:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    175a:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    175c:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    175e:	615a      	str	r2, [r3, #20]
    1760:	4770      	bx	lr
    1762:	bf00      	nop
    1764:	1fff134c 	.word	0x1fff134c

00001768 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    1768:	2000      	movs	r0, #0
    176a:	4770      	bx	lr

0000176c <Print::flush()>:
	virtual void flush()				{ }
    176c:	4770      	bx	lr
    176e:	bf00      	nop

00001770 <File::write(unsigned char)>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    1770:	b510      	push	{r4, lr}
    1772:	b082      	sub	sp, #8
    1774:	ab02      	add	r3, sp, #8
  return write(&val, 1);
    1776:	6802      	ldr	r2, [r0, #0]
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    1778:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&val, 1);
    177c:	6854      	ldr	r4, [r2, #4]
    177e:	4619      	mov	r1, r3
    1780:	2201      	movs	r2, #1
    1782:	47a0      	blx	r4
}
    1784:	b002      	add	sp, #8
    1786:	bd10      	pop	{r4, pc}

00001788 <File::available()>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    1788:	69c0      	ldr	r0, [r0, #28]
    178a:	b138      	cbz	r0, 179c <File::available()+0x14>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    178c:	6983      	ldr	r3, [r0, #24]
    178e:	68c0      	ldr	r0, [r0, #12]
    1790:	f647 72ff 	movw	r2, #32767	; 0x7fff
    1794:	1a18      	subs	r0, r3, r0
    1796:	4290      	cmp	r0, r2
    1798:	bf28      	it	cs
    179a:	4610      	movcs	r0, r2
}
    179c:	4770      	bx	lr
    179e:	bf00      	nop

000017a0 <File::write(unsigned char const*, unsigned int)>:
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    17a0:	69c3      	ldr	r3, [r0, #28]

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    17a2:	b510      	push	{r4, lr}
    17a4:	4604      	mov	r4, r0
  size_t t;
  if (!_file) {
    17a6:	b13b      	cbz	r3, 17b8 <File::write(unsigned char const*, unsigned int)+0x18>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    17a8:	2000      	movs	r0, #0
    17aa:	7118      	strb	r0, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    17ac:	69e0      	ldr	r0, [r4, #28]
    17ae:	f001 fd3d 	bl	322c <SdFile::write(void const*, unsigned int)>
    17b2:	69e3      	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    17b4:	791b      	ldrb	r3, [r3, #4]
    17b6:	b11b      	cbz	r3, 17c0 <File::write(unsigned char const*, unsigned int)+0x20>
    17b8:	2301      	movs	r3, #1
    17ba:	7123      	strb	r3, [r4, #4]

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    17bc:	2000      	movs	r0, #0
    17be:	bd10      	pop	{r4, pc}
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    17c0:	bd10      	pop	{r4, pc}
    17c2:	bf00      	nop

000017c4 <File::read()>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    17c4:	69c0      	ldr	r0, [r0, #28]
    17c6:	b178      	cbz	r0, 17e8 <File::read()+0x24>
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    17c8:	b500      	push	{lr}
    17ca:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    17cc:	2201      	movs	r2, #1
    17ce:	f10d 0107 	add.w	r1, sp, #7
    17d2:	f001 fac7 	bl	2d64 <SdFile::read(void*, unsigned int)>
    17d6:	2801      	cmp	r0, #1
    17d8:	bf0c      	ite	eq
    17da:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    17de:	f04f 30ff 	movne.w	r0, #4294967295
  if (_file) 
    return _file->read();
  return -1;
}
    17e2:	b003      	add	sp, #12
    17e4:	f85d fb04 	ldr.w	pc, [sp], #4
}

int File::read() {
  if (_file) 
    return _file->read();
  return -1;
    17e8:	f04f 30ff 	mov.w	r0, #4294967295
    17ec:	4770      	bx	lr
    17ee:	bf00      	nop

000017f0 <File::peek()>:
  }
  return t;
}

int File::peek() {
  if (! _file) 
    17f0:	69c3      	ldr	r3, [r0, #28]
    17f2:	b1c3      	cbz	r3, 1826 <File::peek()+0x36>
    return 0;
  }
  return t;
}

int File::peek() {
    17f4:	b510      	push	{r4, lr}
    17f6:	b082      	sub	sp, #8
    17f8:	4604      	mov	r4, r0
    17fa:	2201      	movs	r2, #1
    17fc:	4618      	mov	r0, r3
    17fe:	f10d 0107 	add.w	r1, sp, #7
    1802:	f001 faaf 	bl	2d64 <SdFile::read(void*, unsigned int)>
    1806:	2801      	cmp	r0, #1
    1808:	d003      	beq.n	1812 <File::peek()+0x22>
    180a:	f04f 30ff 	mov.w	r0, #4294967295
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    180e:	b002      	add	sp, #8
    1810:	bd10      	pop	{r4, pc}
int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    1812:	69e0      	ldr	r0, [r4, #28]
    1814:	f89d 4007 	ldrb.w	r4, [sp, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    1818:	68c1      	ldr	r1, [r0, #12]
    181a:	3901      	subs	r1, #1
    181c:	f001 fb5e 	bl	2edc <SdFile::seekSet(unsigned long)>

int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
    1820:	4620      	mov	r0, r4
  if (c != -1) _file->seekCur(-1);
  return c;
}
    1822:	b002      	add	sp, #8
    1824:	bd10      	pop	{r4, pc}
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    1826:	4618      	mov	r0, r3

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    1828:	4770      	bx	lr
    182a:	bf00      	nop

0000182c <File::flush()>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    182c:	69c0      	ldr	r0, [r0, #28]
    182e:	b108      	cbz	r0, 1834 <File::flush()+0x8>
    _file->sync();
    1830:	f001 bb86 	b.w	2f40 <SdFile::sync()>
    1834:	4770      	bx	lr
    1836:	bf00      	nop

00001838 <File::File(SdFile, char const*)>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    1838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    183c:	4605      	mov	r5, r0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1842:	4813      	ldr	r0, [pc, #76]	; (1890 <File::File(SdFile, char const*)+0x58>)
    1844:	60ab      	str	r3, [r5, #8]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    1846:	2300      	movs	r3, #0
    1848:	6028      	str	r0, [r5, #0]
    184a:	712b      	strb	r3, [r5, #4]
    184c:	732b      	strb	r3, [r5, #12]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    184e:	2024      	movs	r0, #36	; 0x24

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    1850:	460c      	mov	r4, r1
    1852:	4690      	mov	r8, r2
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    1854:	f005 fa38 	bl	6cc8 <malloc>
    1858:	61e8      	str	r0, [r5, #28]
  if (_file) {
    185a:	b1b0      	cbz	r0, 188a <File::File(SdFile, char const*)+0x52>
    memcpy(_file, &f, sizeof(SdFile));
    185c:	4606      	mov	r6, r0
    185e:	f104 0e20 	add.w	lr, r4, #32
    1862:	6820      	ldr	r0, [r4, #0]
    1864:	6861      	ldr	r1, [r4, #4]
    1866:	68a2      	ldr	r2, [r4, #8]
    1868:	68e3      	ldr	r3, [r4, #12]
    186a:	4637      	mov	r7, r6
    186c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    186e:	3410      	adds	r4, #16
    1870:	4574      	cmp	r4, lr
    1872:	463e      	mov	r6, r7
    1874:	d1f5      	bne.n	1862 <File::File(SdFile, char const*)+0x2a>
    1876:	6820      	ldr	r0, [r4, #0]
    1878:	6038      	str	r0, [r7, #0]
    
    strncpy(_name, n, 12);
    187a:	4641      	mov	r1, r8
    187c:	220c      	movs	r2, #12
    187e:	f105 000d 	add.w	r0, r5, #13
    1882:	f006 f94b 	bl	7b1c <strncpy>
    _name[12] = 0;
    1886:	2300      	movs	r3, #0
    1888:	766b      	strb	r3, [r5, #25]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    188a:	4628      	mov	r0, r5
    188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1890:	0000b460 	.word	0x0000b460

00001894 <File::File()>:
    1894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

File::File(void) {
    1898:	4904      	ldr	r1, [pc, #16]	; (18ac <File::File()+0x18>)
    189a:	6082      	str	r2, [r0, #8]
    189c:	2200      	movs	r2, #0
    189e:	6001      	str	r1, [r0, #0]
    18a0:	7102      	strb	r2, [r0, #4]
    18a2:	7302      	strb	r2, [r0, #12]
  _file = 0;
    18a4:	61c2      	str	r2, [r0, #28]
  _name[0] = 0;
    18a6:	7342      	strb	r2, [r0, #13]
  //Serial.print("Created empty file object");
}
    18a8:	4770      	bx	lr
    18aa:	bf00      	nop
    18ac:	0000b460 	.word	0x0000b460

000018b0 <File::~File()>:

File::~File(void) {
  //  Serial.print("Deleted file object");
}
    18b0:	4770      	bx	lr
    18b2:	bf00      	nop

000018b4 <File::operator bool()>:
    */
  }
}

File::operator bool() {
  if (_file) 
    18b4:	69c0      	ldr	r0, [r0, #28]
    18b6:	b118      	cbz	r0, 18c0 <File::operator bool()+0xc>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    18b8:	7980      	ldrb	r0, [r0, #6]
    18ba:	3000      	adds	r0, #0
    18bc:	bf18      	it	ne
    18be:	2001      	movne	r0, #1
    return  _file->isOpen();
  return false;
}
    18c0:	4770      	bx	lr
    18c2:	bf00      	nop

000018c4 <callback_pathExists(SdFile&, char*, bool, void*)>:
   a pointer to an arbitrary object used for context.

 */

boolean callback_pathExists(SdFile& parentDir, char *filePathComponent, 
			    boolean isLastComponent, void *object) {
    18c4:	b530      	push	{r4, r5, lr}
    18c6:	b08b      	sub	sp, #44	; 0x2c
    18c8:	2400      	movs	r4, #0
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    18ca:	460a      	mov	r2, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    18cc:	4d0a      	ldr	r5, [pc, #40]	; (18f8 <callback_pathExists(SdFile&, char*, bool, void*)+0x34>)
    18ce:	f88d 4008 	strb.w	r4, [sp, #8]
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    18d2:	4601      	mov	r1, r0
    18d4:	2301      	movs	r3, #1
    18d6:	a801      	add	r0, sp, #4
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    18d8:	f88d 400a 	strb.w	r4, [sp, #10]
    18dc:	9501      	str	r5, [sp, #4]
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    18de:	f001 fc63 	bl	31a8 <SdFile::open(SdFile*, char const*, unsigned char)>
    Returns true if file path exists.

  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
    18e2:	42a0      	cmp	r0, r4
    18e4:	bf18      	it	ne
    18e6:	2401      	movne	r4, #1
  
  if (exists) {
    18e8:	d002      	beq.n	18f0 <callback_pathExists(SdFile&, char*, bool, void*)+0x2c>
     child.close(); 
    18ea:	a801      	add	r0, sp, #4
    18ec:	f001 f9c2 	bl	2c74 <SdFile::close()>
  }
  
  return exists;
}
    18f0:	4620      	mov	r0, r4
    18f2:	b00b      	add	sp, #44	; 0x2c
    18f4:	bd30      	pop	{r4, r5, pc}
    18f6:	bf00      	nop
    18f8:	0000b488 	.word	0x0000b488

000018fc <callback_remove(SdFile&, char*, bool, void*)>:



boolean callback_remove(SdFile& parentDir, char *filePathComponent, 
			boolean isLastComponent, void *object) {
  if (isLastComponent) {
    18fc:	b90a      	cbnz	r2, 1902 <callback_remove(SdFile&, char*, bool, void*)+0x6>
    return SdFile::remove(parentDir, filePathComponent);
  }
  return true;
    18fe:	2001      	movs	r0, #1
    1900:	4770      	bx	lr
  */



boolean callback_remove(SdFile& parentDir, char *filePathComponent, 
			boolean isLastComponent, void *object) {
    1902:	b508      	push	{r3, lr}
  int8_t readDir(dir_t& dir) {return readDir(&dir);}  // NOLINT
  /** \deprecated Use:
   * static uint8_t SdFile::remove(SdFile* dirFile, const char* fileName);
   */
  static uint8_t remove(SdFile& dirFile, const char* fileName) {  // NOLINT
    return remove(&dirFile, fileName);
    1904:	f001 fc7a 	bl	31fc <SdFile::remove(SdFile*, char const*)>
  if (isLastComponent) {
    return SdFile::remove(parentDir, filePathComponent);
    1908:	3000      	adds	r0, #0
    190a:	bf18      	it	ne
    190c:	2001      	movne	r0, #1
    190e:	bd08      	pop	{r3, pc}

00001910 <getNextPathComponent(char const*, unsigned int*, char*)>:
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    1910:	b5f0      	push	{r4, r5, r6, r7, lr}
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
    1912:	680e      	ldr	r6, [r1, #0]

  // Skip root or other separator
  if (path[offset] == '/') {
    1914:	5d83      	ldrb	r3, [r0, r6]
    1916:	2b2f      	cmp	r3, #47	; 0x2f
    offset++;
    1918:	bf08      	it	eq
    191a:	3601      	addeq	r6, #1
    191c:	1984      	adds	r4, r0, r6
    191e:	f102 3eff 	add.w	lr, r2, #4294967295
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(const char *path, unsigned int *p_offset,
			  char *buffer) {
    1922:	2500      	movs	r5, #0
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    1924:	7823      	ldrb	r3, [r4, #0]
    1926:	2b2f      	cmp	r3, #47	; 0x2f
    1928:	4627      	mov	r7, r4
    192a:	f104 0401 	add.w	r4, r4, #1
    192e:	d008      	beq.n	1942 <getNextPathComponent(char const*, unsigned int*, char*)+0x32>
	 && (path[offset] != '\0')) {
    1930:	b13b      	cbz	r3, 1942 <getNextPathComponent(char const*, unsigned int*, char*)+0x32>
    buffer[bufferOffset++] = path[offset++];
    1932:	3501      	adds	r5, #1
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    1934:	2d0c      	cmp	r5, #12
    buffer[bufferOffset++] = path[offset++];
    1936:	f106 0601 	add.w	r6, r6, #1
    193a:	f80e 3f01 	strb.w	r3, [lr, #1]!
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    193e:	d1f1      	bne.n	1924 <getNextPathComponent(char const*, unsigned int*, char*)+0x14>
    1940:	1987      	adds	r7, r0, r6
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    1942:	2300      	movs	r3, #0
    1944:	5553      	strb	r3, [r2, r5]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    1946:	783b      	ldrb	r3, [r7, #0]
    1948:	2b2f      	cmp	r3, #47	; 0x2f
    194a:	bf04      	itt	eq
    194c:	3601      	addeq	r6, #1
    194e:	1987      	addeq	r7, r0, r6
    offset++;
  }

  *p_offset = offset;
    1950:	600e      	str	r6, [r1, #0]

  return (path[offset] != '\0');
    1952:	7838      	ldrb	r0, [r7, #0]
}
    1954:	3000      	adds	r0, #0
    1956:	bf18      	it	ne
    1958:	2001      	movne	r0, #1
    195a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000195c <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)>:
boolean walkPath(const char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
    195c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1960:	b099      	sub	sp, #100	; 0x64
    1962:	4688      	mov	r8, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1964:	4d26      	ldr	r5, [pc, #152]	; (1a00 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0xa4>)
    1966:	9506      	str	r5, [sp, #24]
    1968:	2100      	movs	r1, #0
    196a:	f88d 101c 	strb.w	r1, [sp, #28]
    196e:	4683      	mov	fp, r0
    1970:	4692      	mov	sl, r2
    1972:	4699      	mov	r9, r3
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    1974:	4644      	mov	r4, r8
    1976:	f88d 101e 	strb.w	r1, [sp, #30]
    197a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    197e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
    1982:	9101      	str	r1, [sp, #4]
    1984:	950f      	str	r5, [sp, #60]	; 0x3c
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    1986:	ae06      	add	r6, sp, #24
    1988:	e005      	b.n	1996 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x3a>
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
      (*p_parent).close();
    198a:	f001 f973 	bl	2c74 <SdFile::close()>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    198e:	b1fd      	cbz	r5, 19d0 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x74>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    1990:	4623      	mov	r3, r4
    1992:	4634      	mov	r4, r6
    1994:	461e      	mov	r6, r3
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    1996:	aa02      	add	r2, sp, #8
    1998:	a901      	add	r1, sp, #4
    199a:	4658      	mov	r0, fp
    199c:	f7ff ffb8 	bl	1910 <getNextPathComponent(char const*, unsigned int*, char*)>

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    19a0:	f080 0201 	eor.w	r2, r0, #1
    19a4:	b2d2      	uxtb	r2, r2
    19a6:	464b      	mov	r3, r9
    19a8:	a902      	add	r1, sp, #8
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    19aa:	4605      	mov	r5, r0

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    19ac:	4620      	mov	r0, r4
    19ae:	47d0      	blx	sl
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    19b0:	4621      	mov	r1, r4

    if (!shouldContinue) {
    19b2:	4607      	mov	r7, r0
    19b4:	2301      	movs	r3, #1
    19b6:	aa02      	add	r2, sp, #8
    19b8:	b170      	cbz	r0, 19d8 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x7c>
    19ba:	4630      	mov	r0, r6
        (*p_parent).close();
      }
      return false;
    }
    
    if (!moreComponents) {
    19bc:	b1ad      	cbz	r5, 19ea <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x8e>
    19be:	f001 fbf3 	bl	31a8 <SdFile::open(SdFile*, char const*, unsigned char)>
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    19c2:	4544      	cmp	r4, r8
    19c4:	4605      	mov	r5, r0
      (*p_parent).close();
    19c6:	4620      	mov	r0, r4
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    19c8:	d1df      	bne.n	198a <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x2e>
      (*p_parent).close();
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    19ca:	b10d      	cbz	r5, 19d0 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x74>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    19cc:	ac0f      	add	r4, sp, #60	; 0x3c
    19ce:	e7df      	b.n	1990 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x34>
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
        (*p_parent).close();
      }
      return false;
    19d0:	2000      	movs	r0, #0
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
}
    19d2:	b019      	add	sp, #100	; 0x64
    19d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    if (!shouldContinue) {
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    19d8:	4544      	cmp	r4, r8
    19da:	d0f9      	beq.n	19d0 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x74>
        (*p_parent).close();
    19dc:	4620      	mov	r0, r4
    19de:	f001 f949 	bl	2c74 <SdFile::close()>
      }
      return false;
    19e2:	4638      	mov	r0, r7
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
}
    19e4:	b019      	add	sp, #100	; 0x64
    19e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    19ea:	4544      	cmp	r4, r8
    19ec:	d006      	beq.n	19fc <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0xa0>
    (*p_parent).close(); // TODO: Return/ handle different?
    19ee:	4620      	mov	r0, r4
    19f0:	f001 f940 	bl	2c74 <SdFile::close()>
  }

  return true;
    19f4:	2001      	movs	r0, #1
}
    19f6:	b019      	add	sp, #100	; 0x64
    19f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
    19fc:	2001      	movs	r0, #1
    19fe:	e7e8      	b.n	19d2 <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)+0x76>
    1a00:	0000b488 	.word	0x0000b488

00001a04 <SDClass::begin(unsigned char)>:
  Sd2Card(void) : type_(0) {}
  /* Initialize an SD flash memory card with the selected SPI clock rate
   * and the SD chip select pin.  */
  uint8_t init(uint8_t sckRateID, uint8_t chipSelectPin) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin == BUILTIN_SDCARD) {
    1a04:	29fe      	cmp	r1, #254	; 0xfe

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    1a06:	b538      	push	{r3, r4, r5, lr}
    1a08:	4605      	mov	r5, r0
    1a0a:	d017      	beq.n	1a3c <SDClass::begin(unsigned char)+0x38>
      uint8_t ret = SDHC_CardInit();
      type_ = SDHC_CardGetType();
      return (ret == 0) ? true : false;
    }
    #endif
    return SD_init(sckRateID, chipSelectPin);
    1a0c:	460a      	mov	r2, r1
    1a0e:	2101      	movs	r1, #1
    1a10:	f000 fe1e 	bl	2650 <Sd2Card::SD_init(unsigned char, unsigned char)>
    1a14:	4603      	mov	r3, r0

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
    1a16:	b90b      	cbnz	r3, 1a1c <SDClass::begin(unsigned char)+0x18>
    1a18:	2000      	movs	r0, #0
    1a1a:	bd38      	pop	{r3, r4, r5, pc}
    1a1c:	1d2c      	adds	r4, r5, #4
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    1a1e:	4620      	mov	r0, r4
    1a20:	2201      	movs	r2, #1
    1a22:	4629      	mov	r1, r5
    1a24:	f001 fef2 	bl	380c <SdVolume::init(Sd2Card*, unsigned char)>
    1a28:	b198      	cbz	r0, 1a52 <SDClass::begin(unsigned char)+0x4e>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    1a2a:	4621      	mov	r1, r4
    1a2c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    1a30:	f001 f970 	bl	2d14 <SdFile::openRoot(SdVolume*)>
    1a34:	3000      	adds	r0, #0
    1a36:	bf18      	it	ne
    1a38:	2001      	movne	r0, #1
    1a3a:	bd38      	pop	{r3, r4, r5, pc}
  /* Initialize an SD flash memory card with the selected SPI clock rate
   * and the SD chip select pin.  */
  uint8_t init(uint8_t sckRateID, uint8_t chipSelectPin) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin == BUILTIN_SDCARD) {
      chipSelectPin_ = BUILTIN_SDCARD;
    1a3c:	7001      	strb	r1, [r0, #0]
      uint8_t ret = SDHC_CardInit();
    1a3e:	f000 fa21 	bl	1e84 <SDHC_CardInit()>
    1a42:	4604      	mov	r4, r0
      type_ = SDHC_CardGetType();
    1a44:	f000 fa0c 	bl	1e60 <SDHC_CardGetType()>
      return (ret == 0) ? true : false;
    1a48:	fab4 f384 	clz	r3, r4
    1a4c:	095b      	lsrs	r3, r3, #5
  uint8_t init(uint8_t sckRateID, uint8_t chipSelectPin) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin == BUILTIN_SDCARD) {
      chipSelectPin_ = BUILTIN_SDCARD;
      uint8_t ret = SDHC_CardInit();
      type_ = SDHC_CardGetType();
    1a4e:	70a8      	strb	r0, [r5, #2]
    1a50:	e7e1      	b.n	1a16 <SDClass::begin(unsigned char)+0x12>
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    1a52:	4602      	mov	r2, r0
    1a54:	4629      	mov	r1, r5
    1a56:	4620      	mov	r0, r4
    1a58:	f001 fed8 	bl	380c <SdVolume::init(Sd2Card*, unsigned char)>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    1a5c:	2800      	cmp	r0, #0
    1a5e:	d1e4      	bne.n	1a2a <SDClass::begin(unsigned char)+0x26>
         volume.init(card) &&
    1a60:	2000      	movs	r0, #0
    1a62:	bd38      	pop	{r3, r4, r5, pc}

00001a64 <SDClass::getParentDir(char const*, int*)>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    1a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a68:	b099      	sub	sp, #100	; 0x64
    1a6a:	f04f 0800 	mov.w	r8, #0
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1a6e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1b58 <SDClass::getParentDir(char const*, int*)+0xf4>
    1a72:	f88d 801c 	strb.w	r8, [sp, #28]
    1a76:	4681      	mov	r9, r0
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    1a78:	3104      	adds	r1, #4
    1a7a:	a806      	add	r0, sp, #24
    1a7c:	4693      	mov	fp, r2
    1a7e:	9301      	str	r3, [sp, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1a80:	f88d 801e 	strb.w	r8, [sp, #30]
    1a84:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
    1a88:	f88d 8042 	strb.w	r8, [sp, #66]	; 0x42
    1a8c:	f8cd a018 	str.w	sl, [sp, #24]
    1a90:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    1a94:	f001 f93e 	bl	2d14 <SdFile::openRoot(SdVolume*)>
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    1a98:	ae06      	add	r6, sp, #24
    1a9a:	465d      	mov	r5, fp
  SdFile *subdir = &d2;
    1a9c:	af0f      	add	r7, sp, #60	; 0x3c
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    1a9e:	212f      	movs	r1, #47	; 0x2f
    1aa0:	4628      	mov	r0, r5
    1aa2:	f005 ff07 	bl	78b4 <strchr>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    1aa6:	1b44      	subs	r4, r0, r5
    1aa8:	b2e4      	uxtb	r4, r4
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    1aaa:	4629      	mov	r1, r5
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    1aac:	b308      	cbz	r0, 1af2 <SDClass::getParentDir(char const*, int*)+0x8e>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    1aae:	782b      	ldrb	r3, [r5, #0]
    1ab0:	2b2f      	cmp	r3, #47	; 0x2f
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    1ab2:	a802      	add	r0, sp, #8
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    1ab4:	d01b      	beq.n	1aee <SDClass::getParentDir(char const*, int*)+0x8a>
    1ab6:	2c0c      	cmp	r4, #12
    1ab8:	bf28      	it	cs
    1aba:	240c      	movcs	r4, #12
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    1abc:	4622      	mov	r2, r4
    1abe:	f006 f82d 	bl	7b1c <strncpy>
    subdirname[idx] = 0;
    1ac2:	ab18      	add	r3, sp, #96	; 0x60
    1ac4:	4423      	add	r3, r4

    // close the subdir (we reuse them) if open
    subdir->close();
    1ac6:	4638      	mov	r0, r7
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    1ac8:	f803 8c58 	strb.w	r8, [r3, #-88]

    // close the subdir (we reuse them) if open
    subdir->close();
    1acc:	f001 f8d2 	bl	2c74 <SdFile::close()>
    if (! subdir->open(parent, subdirname, O_READ)) {
    1ad0:	2301      	movs	r3, #1
    1ad2:	aa02      	add	r2, sp, #8
    1ad4:	4631      	mov	r1, r6
    1ad6:	4638      	mov	r0, r7
    1ad8:	f001 fb66 	bl	31a8 <SdFile::open(SdFile*, char const*, unsigned char)>
    1adc:	b388      	cbz	r0, 1b42 <SDClass::getParentDir(char const*, int*)+0xde>
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    1ade:	4630      	mov	r0, r6
    1ae0:	f001 f8c8 	bl	2c74 <SdFile::close()>
    1ae4:	4633      	mov	r3, r6
    if (! subdir->open(parent, subdirname, O_READ)) {
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    1ae6:	4425      	add	r5, r4
    // we reuse the objects, close it.
    parent->close();

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    1ae8:	463e      	mov	r6, r7
    1aea:	461f      	mov	r7, r3
    1aec:	e7d7      	b.n	1a9e <SDClass::getParentDir(char const*, int*)+0x3a>

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
      filepath++;
    1aee:	3501      	adds	r5, #1
    1af0:	e7d5      	b.n	1a9e <SDClass::getParentDir(char const*, int*)+0x3a>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    1af2:	9801      	ldr	r0, [sp, #4]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1af4:	7931      	ldrb	r1, [r6, #4]
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    1af6:	7972      	ldrb	r2, [r6, #5]
    1af8:	79b3      	ldrb	r3, [r6, #6]
    1afa:	68b4      	ldr	r4, [r6, #8]
    1afc:	7d37      	ldrb	r7, [r6, #20]
    1afe:	ebcb 0505 	rsb	r5, fp, r5
    1b02:	6005      	str	r5, [r0, #0]
    1b04:	68f0      	ldr	r0, [r6, #12]
    1b06:	6935      	ldr	r5, [r6, #16]
    1b08:	f889 1004 	strb.w	r1, [r9, #4]
    1b0c:	f889 2005 	strb.w	r2, [r9, #5]
    1b10:	69b1      	ldr	r1, [r6, #24]
    1b12:	f889 3006 	strb.w	r3, [r9, #6]
    1b16:	69f2      	ldr	r2, [r6, #28]
    1b18:	6a33      	ldr	r3, [r6, #32]
    1b1a:	f8c9 000c 	str.w	r0, [r9, #12]
  // parent is now the parent diretory of the file!
  return *parent;
}
    1b1e:	4648      	mov	r0, r9
    1b20:	f8c9 a000 	str.w	sl, [r9]
    1b24:	f8c9 4008 	str.w	r4, [r9, #8]
    1b28:	f8c9 5010 	str.w	r5, [r9, #16]
    1b2c:	f889 7014 	strb.w	r7, [r9, #20]
    1b30:	f8c9 1018 	str.w	r1, [r9, #24]
    1b34:	f8c9 201c 	str.w	r2, [r9, #28]
    1b38:	f8c9 3020 	str.w	r3, [r9, #32]
    1b3c:	b019      	add	sp, #100	; 0x64
    1b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  public:
	constexpr Print() : write_error(0) {}
    1b42:	f889 0004 	strb.w	r0, [r9, #4]
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1b46:	f889 0006 	strb.w	r0, [r9, #6]
    1b4a:	4648      	mov	r0, r9
    1b4c:	f8c9 a000 	str.w	sl, [r9]
    1b50:	b019      	add	sp, #100	; 0x64
    1b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b56:	bf00      	nop
    1b58:	0000b488 	.word	0x0000b488

00001b5c <SDClass::open(char const*, unsigned char)>:


File SDClass::open(const char *filepath, uint8_t mode) {
    1b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5e:	b09d      	sub	sp, #116	; 0x74
    1b60:	4605      	mov	r5, r0
    1b62:	461f      	mov	r7, r3
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    1b64:	a801      	add	r0, sp, #4
    1b66:	466b      	mov	r3, sp
  // parent is now the parent diretory of the file!
  return *parent;
}


File SDClass::open(const char *filepath, uint8_t mode) {
    1b68:	4614      	mov	r4, r2
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    1b6a:	f7ff ff7b 	bl	1a64 <SDClass::getParentDir(char const*, int*)>
  // no more subdirs!

  filepath += pathidx;
    1b6e:	9a00      	ldr	r2, [sp, #0]

  if (! filepath[0]) {
    1b70:	5ca3      	ldrb	r3, [r4, r2]

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
  // no more subdirs!

  filepath += pathidx;
    1b72:	4414      	add	r4, r2

  if (! filepath[0]) {
    1b74:	2b00      	cmp	r3, #0
    1b76:	d042      	beq.n	1bfe <SDClass::open(char const*, unsigned char)+0xa2>

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    1b78:	f89d 200a 	ldrb.w	r2, [sp, #10]
    1b7c:	4e2f      	ldr	r6, [pc, #188]	; (1c3c <SDClass::open(char const*, unsigned char)+0xe0>)
    1b7e:	960a      	str	r6, [sp, #40]	; 0x28
    1b80:	2300      	movs	r3, #0
    1b82:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    1b86:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    1b8a:	2a00      	cmp	r2, #0
    1b8c:	d031      	beq.n	1bf2 <SDClass::open(char const*, unsigned char)+0x96>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    1b8e:	a80a      	add	r0, sp, #40	; 0x28
    1b90:	463b      	mov	r3, r7
    1b92:	4622      	mov	r2, r4
    1b94:	a901      	add	r1, sp, #4
    1b96:	f001 fb07 	bl	31a8 <SdFile::open(SdFile*, char const*, unsigned char)>
    return File();

  if ( ! file.open(parentdir, filepath, mode)) {
    1b9a:	b350      	cbz	r0, 1bf2 <SDClass::open(char const*, unsigned char)+0x96>
    return File();
  }
  // close the parent
  parentdir.close();
    1b9c:	a801      	add	r0, sp, #4
    1b9e:	f001 f869 	bl	2c74 <SdFile::close()>

  if (mode & (O_APPEND | O_WRITE)) 
    1ba2:	f017 0f06 	tst.w	r7, #6
    1ba6:	d143      	bne.n	1c30 <SDClass::open(char const*, unsigned char)+0xd4>
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    1ba8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    1bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bae:	f89d e02d 	ldrb.w	lr, [sp, #45]	; 0x2d
    1bb2:	9613      	str	r6, [sp, #76]	; 0x4c
    file.seekSet(file.fileSize());
  return File(file, filepath);
    1bb4:	4622      	mov	r2, r4
    1bb6:	f89d 402e 	ldrb.w	r4, [sp, #46]	; 0x2e
    1bba:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    1bbe:	f88d 4052 	strb.w	r4, [sp, #82]	; 0x52
    1bc2:	9315      	str	r3, [sp, #84]	; 0x54
    1bc4:	990d      	ldr	r1, [sp, #52]	; 0x34
    1bc6:	980e      	ldr	r0, [sp, #56]	; 0x38
    1bc8:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
    1bcc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    1bce:	9c11      	ldr	r4, [sp, #68]	; 0x44
    1bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1bd2:	f88d e051 	strb.w	lr, [sp, #81]	; 0x51
    1bd6:	9116      	str	r1, [sp, #88]	; 0x58
    1bd8:	9017      	str	r0, [sp, #92]	; 0x5c
    1bda:	a913      	add	r1, sp, #76	; 0x4c
    1bdc:	4628      	mov	r0, r5
    1bde:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
    1be2:	9619      	str	r6, [sp, #100]	; 0x64
    1be4:	941a      	str	r4, [sp, #104]	; 0x68
    1be6:	931b      	str	r3, [sp, #108]	; 0x6c
    1be8:	f7ff fe26 	bl	1838 <File::File(SdFile, char const*)>
}
    1bec:	4628      	mov	r0, r5
    1bee:	b01d      	add	sp, #116	; 0x74
    1bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    return File();
    1bf2:	4628      	mov	r0, r5
    1bf4:	f7ff fe4e 	bl	1894 <File::File()>
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
  return File(file, filepath);
}
    1bf8:	4628      	mov	r0, r5
    1bfa:	b01d      	add	sp, #116	; 0x74
    1bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bfe:	f89d 7008 	ldrb.w	r7, [sp, #8]
    1c02:	4e0e      	ldr	r6, [pc, #56]	; (1c3c <SDClass::open(char const*, unsigned char)+0xe0>)
    1c04:	f89d 4009 	ldrb.w	r4, [sp, #9]
    1c08:	f89d 300a 	ldrb.w	r3, [sp, #10]
    1c0c:	9a03      	ldr	r2, [sp, #12]
    1c0e:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    1c12:	9613      	str	r6, [sp, #76]	; 0x4c
    1c14:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
    1c18:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    1c1c:	9215      	str	r2, [sp, #84]	; 0x54
    1c1e:	9904      	ldr	r1, [sp, #16]
    1c20:	9805      	ldr	r0, [sp, #20]
    1c22:	f89d 7018 	ldrb.w	r7, [sp, #24]
    1c26:	9e07      	ldr	r6, [sp, #28]
    1c28:	9c08      	ldr	r4, [sp, #32]
    1c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24

  filepath += pathidx;

  if (! filepath[0]) {
    // it was the directory itself!
    return File(parentdir, "/");
    1c2c:	4a04      	ldr	r2, [pc, #16]	; (1c40 <SDClass::open(char const*, unsigned char)+0xe4>)
    1c2e:	e7d2      	b.n	1bd6 <SDClass::open(char const*, unsigned char)+0x7a>
  }
  // close the parent
  parentdir.close();

  if (mode & (O_APPEND | O_WRITE)) 
    file.seekSet(file.fileSize());
    1c30:	a80a      	add	r0, sp, #40	; 0x28
    1c32:	9910      	ldr	r1, [sp, #64]	; 0x40
    1c34:	f001 f952 	bl	2edc <SdFile::seekSet(unsigned long)>
    1c38:	e7b6      	b.n	1ba8 <SDClass::open(char const*, unsigned char)+0x4c>
    1c3a:	bf00      	nop
    1c3c:	0000b488 	.word	0x0000b488
    1c40:	0000b47c 	.word	0x0000b47c

00001c44 <SDClass::exists(char const*)>:
//   */
//  file.close();
//}


boolean SDClass::exists(const char *filepath) {
    1c44:	b410      	push	{r4}
    1c46:	460c      	mov	r4, r1
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    1c48:	2300      	movs	r3, #0
    1c4a:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    1c4e:	4a03      	ldr	r2, [pc, #12]	; (1c5c <SDClass::exists(char const*)+0x18>)
    1c50:	4620      	mov	r0, r4
}
    1c52:	f85d 4b04 	ldr.w	r4, [sp], #4
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    1c56:	f7ff be81 	b.w	195c <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)>
    1c5a:	bf00      	nop
    1c5c:	000018c5 	.word	0x000018c5

00001c60 <SDClass::remove(char const*)>:
  
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
    1c60:	b410      	push	{r4}
    1c62:	460c      	mov	r4, r1
  return walkPath(filepath, root, callback_remove);
    1c64:	2300      	movs	r3, #0
    1c66:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    1c6a:	4a03      	ldr	r2, [pc, #12]	; (1c78 <SDClass::remove(char const*)+0x18>)
    1c6c:	4620      	mov	r0, r4
}
    1c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
  return walkPath(filepath, root, callback_remove);
    1c72:	f7ff be73 	b.w	195c <walkPath(char const*, SdFile&, bool (*)(SdFile&, char*, bool, void*), void*)>
    1c76:	bf00      	nop
    1c78:	000018fd 	.word	0x000018fd

00001c7c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    1c7c:	4b06      	ldr	r3, [pc, #24]	; (1c98 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1c7e:	4a07      	ldr	r2, [pc, #28]	; (1c9c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    1c80:	62da      	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1c82:	2102      	movs	r1, #2
    1c84:	2200      	movs	r2, #0
    1c86:	6059      	str	r1, [r3, #4]
    1c88:	709a      	strb	r2, [r3, #2]
    1c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
  public:
	constexpr Print() : write_error(0) {}
    1c8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1c92:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    1c96:	4770      	bx	lr
    1c98:	1fff1394 	.word	0x1fff1394
    1c9c:	0000b488 	.word	0x0000b488

00001ca0 <sdhc_setSdclk(unsigned long)>:
static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    1ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    1ca4:	4b26      	ldr	r3, [pc, #152]	; (1d40 <sdhc_setSdclk(unsigned long)+0xa0>)
static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    1ca6:	fb02 f000 	mul.w	r0, r2, r0

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    1caa:	4298      	cmp	r0, r3
 Serial.print("VEND_SPEC2:    "); Serial.println(SDHC_VENDOR2,HEX);    // Vendor Specific2 register
 #endif
}
*/

static void sdhc_setSdclk(uint32_t kHzMax) {
    1cac:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    1cae:	d840      	bhi.n	1d32 <sdhc_setSdclk(unsigned long)+0x92>
    1cb0:	4d24      	ldr	r5, [pc, #144]	; (1d44 <sdhc_setSdclk(unsigned long)+0xa4>)
    1cb2:	2108      	movs	r1, #8
    1cb4:	2201      	movs	r2, #1
    sdclkfs <<= 1;
    1cb6:	0052      	lsls	r2, r2, #1
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    1cb8:	0113      	lsls	r3, r2, #4
    1cba:	fbb5 f3f3 	udiv	r3, r5, r3
    1cbe:	4298      	cmp	r0, r3
    1cc0:	4c20      	ldr	r4, [pc, #128]	; (1d44 <sdhc_setSdclk(unsigned long)+0xa4>)
    1cc2:	d232      	bcs.n	1d2a <sdhc_setSdclk(unsigned long)+0x8a>
    1cc4:	3901      	subs	r1, #1
    1cc6:	d1f6      	bne.n	1cb6 <sdhc_setSdclk(unsigned long)+0x16>
    1cc8:	fbb4 f4f2 	udiv	r4, r4, r2
    1ccc:	0853      	lsrs	r3, r2, #1
    1cce:	021f      	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    1cd0:	42a0      	cmp	r0, r4
    1cd2:	d232      	bcs.n	1d3a <sdhc_setSdclk(unsigned long)+0x9a>
    1cd4:	4e1b      	ldr	r6, [pc, #108]	; (1d44 <sdhc_setSdclk(unsigned long)+0xa4>)
    1cd6:	0051      	lsls	r1, r2, #1
    1cd8:	2301      	movs	r3, #1
    1cda:	fbb6 f4f1 	udiv	r4, r6, r1
    1cde:	42a0      	cmp	r0, r4
    dvs++;
    1ce0:	f103 0501 	add.w	r5, r3, #1
    1ce4:	4411      	add	r1, r2
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    1ce6:	d21e      	bcs.n	1d26 <sdhc_setSdclk(unsigned long)+0x86>
    1ce8:	2d10      	cmp	r5, #16
    1cea:	462b      	mov	r3, r5
    1cec:	d1f5      	bne.n	1cda <sdhc_setSdclk(unsigned long)+0x3a>
    1cee:	22f0      	movs	r2, #240	; 0xf0
  sdclkfs >>= 1;
  dvs--;

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    1cf0:	4c15      	ldr	r4, [pc, #84]	; (1d48 <sdhc_setSdclk(unsigned long)+0xa8>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    1cf2:	4916      	ldr	r1, [pc, #88]	; (1d4c <sdhc_setSdclk(unsigned long)+0xac>)
  sdclkfs >>= 1;
  dvs--;

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    1cf4:	6823      	ldr	r3, [r4, #0]
    1cf6:	f023 0308 	bic.w	r3, r3, #8
    1cfa:	6023      	str	r3, [r4, #0]
#endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    1cfc:	6820      	ldr	r0, [r4, #0]
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    1cfe:	f420 207f 	bic.w	r0, r0, #1044480	; 0xff000
    1d02:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
    1d06:	f440 2060 	orr.w	r0, r0, #917504	; 0xe0000
    1d0a:	ea40 0307 	orr.w	r3, r0, r7
    1d0e:	4313      	orrs	r3, r2
    1d10:	6023      	str	r3, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    1d12:	680b      	ldr	r3, [r1, #0]
    1d14:	071b      	lsls	r3, r3, #28
    1d16:	d5fc      	bpl.n	1d12 <sdhc_setSdclk(unsigned long)+0x72>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    1d18:	4a0b      	ldr	r2, [pc, #44]	; (1d48 <sdhc_setSdclk(unsigned long)+0xa8>)
    1d1a:	6813      	ldr	r3, [r2, #0]
    1d1c:	f043 0308 	orr.w	r3, r3, #8
    1d20:	6013      	str	r3, [r2, #0]
#endif

//  Serial.printf("setSdclk: %d %d : %x %x\n\r", f_pll, m_sdClkKhz, sdclkfs, dvs);
}
    1d22:	bcf0      	pop	{r4, r5, r6, r7}
    1d24:	4770      	bx	lr
    1d26:	011a      	lsls	r2, r3, #4
    1d28:	e7e2      	b.n	1cf0 <sdhc_setSdclk(unsigned long)+0x50>
    1d2a:	fbb4 f4f2 	udiv	r4, r4, r2
    1d2e:	01d7      	lsls	r7, r2, #7
    1d30:	e7ce      	b.n	1cd0 <sdhc_setSdclk(unsigned long)+0x30>
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    1d32:	4c04      	ldr	r4, [pc, #16]	; (1d44 <sdhc_setSdclk(unsigned long)+0xa4>)
    1d34:	2700      	movs	r7, #0

static void sdhc_setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    1d36:	2201      	movs	r2, #1
    1d38:	e7ca      	b.n	1cd0 <sdhc_setSdclk(unsigned long)+0x30>
  uint32_t f_pll = sdhcClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    1d3a:	2200      	movs	r2, #0
    1d3c:	e7d8      	b.n	1cf0 <sdhc_setSdclk(unsigned long)+0x50>
    1d3e:	bf00      	nop
    1d40:	00aba94f 	.word	0x00aba94f
    1d44:	0aba9500 	.word	0x0aba9500
    1d48:	400b102c 	.word	0x400b102c
    1d4c:	400b1024 	.word	0x400b1024

00001d50 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1d50:	4920      	ldr	r1, [pc, #128]	; (1dd4 <SDHC_CMD_Do(unsigned long)+0x84>)

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1d52:	4a21      	ldr	r2, [pc, #132]	; (1dd8 <SDHC_CMD_Do(unsigned long)+0x88>)

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1d54:	680b      	ldr	r3, [r1, #0]
    1d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1d5a:	600b      	str	r3, [r1, #0]

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1d5c:	4611      	mov	r1, r2
    1d5e:	6813      	ldr	r3, [r2, #0]
    1d60:	07db      	lsls	r3, r3, #31
    1d62:	d4fc      	bmi.n	1d5e <SDHC_CMD_Do(unsigned long)+0xe>
    1d64:	680b      	ldr	r3, [r1, #0]
    1d66:	079b      	lsls	r3, r3, #30
    1d68:	d4f9      	bmi.n	1d5e <SDHC_CMD_Do(unsigned long)+0xe>
  SDHC_XFERTYP = xfertyp;
    1d6a:	4b1c      	ldr	r3, [pc, #112]	; (1ddc <SDHC_CMD_Do(unsigned long)+0x8c>)
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    1d6c:	b430      	push	{r4, r5}

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    1d6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    1d72:	4d18      	ldr	r5, [pc, #96]	; (1dd4 <SDHC_CMD_Do(unsigned long)+0x84>)
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;
    1d74:	6018      	str	r0, [r3, #0]
    1d76:	e000      	b.n	1d7a <SDHC_CMD_Do(unsigned long)+0x2a>
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    timeout--;
  } while (!result && (timeout));
    1d78:	b1a2      	cbz	r2, 1da4 <SDHC_CMD_Do(unsigned long)+0x54>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    1d7a:	6829      	ldr	r1, [r5, #0]
    1d7c:	4b18      	ldr	r3, [pc, #96]	; (1de0 <SDHC_CMD_Do(unsigned long)+0x90>)
    1d7e:	4c15      	ldr	r4, [pc, #84]	; (1dd4 <SDHC_CMD_Do(unsigned long)+0x84>)
    1d80:	400b      	ands	r3, r1
    timeout--;
    1d82:	3a01      	subs	r2, #1
  } while (!result && (timeout));
    1d84:	2b00      	cmp	r3, #0
    1d86:	d0f7      	beq.n	1d78 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    1d88:	b162      	cbz	r2, 1da4 <SDHC_CMD_Do(unsigned long)+0x54>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    1d8a:	2b01      	cmp	r3, #1
    1d8c:	d10a      	bne.n	1da4 <SDHC_CMD_Do(unsigned long)+0x54>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    1d8e:	6823      	ldr	r3, [r4, #0]
    1d90:	f013 0f80 	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1d94:	6823      	ldr	r3, [r4, #0]
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    1d96:	d00f      	beq.n	1db8 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1d98:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    1d9c:	6023      	str	r3, [r4, #0]
      return SDHC_RESULT_NOT_READY;
    1d9e:	2003      	movs	r0, #3
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    1da0:	bc30      	pop	{r4, r5}
    1da2:	4770      	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    1da4:	4a0b      	ldr	r2, [pc, #44]	; (1dd4 <SDHC_CMD_Do(unsigned long)+0x84>)
    1da6:	6813      	ldr	r3, [r2, #0]
    1da8:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    1dac:	f043 0301 	orr.w	r3, r3, #1
    1db0:	6013      	str	r3, [r2, #0]
      return SDHC_RESULT_ERROR;
    1db2:	2001      	movs	r0, #1
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    1db4:	bc30      	pop	{r4, r5}
    1db6:	4770      	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    1db8:	f413 3080 	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1dbc:	6823      	ldr	r3, [r4, #0]
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    1dbe:	d004      	beq.n	1dca <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    1dc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    1dc4:	6023      	str	r3, [r4, #0]
      return SDHC_RESULT_NO_RESPONSE;
    1dc6:	2005      	movs	r0, #5
    1dc8:	e7f4      	b.n	1db4 <SDHC_CMD_Do(unsigned long)+0x64>
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    1dca:	f043 0301 	orr.w	r3, r3, #1
    1dce:	6023      	str	r3, [r4, #0]
    1dd0:	e7f0      	b.n	1db4 <SDHC_CMD_Do(unsigned long)+0x64>
    1dd2:	bf00      	nop
    1dd4:	400b1030 	.word	0x400b1030
    1dd8:	400b1024 	.word	0x400b1024
    1ddc:	400b100c 	.word	0x400b100c
    1de0:	000e0001 	.word	0x000e0001

00001de4 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    1de4:	b570      	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1de6:	4d0d      	ldr	r5, [pc, #52]	; (1e1c <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1de8:	480d      	ldr	r0, [pc, #52]	; (1e20 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1dea:	4e0e      	ldr	r6, [pc, #56]	; (1e24 <SDHC_CMD12_StopTransferWaitForBusy()+0x40>)
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1dec:	2300      	movs	r3, #0
    1dee:	602b      	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1df0:	f7ff ffae 	bl	1d50 <SDHC_CMD_Do(unsigned long)>
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    1df4:	f240 34e7 	movw	r4, #999	; 0x3e7

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1df8:	4603      	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1dfa:	6832      	ldr	r2, [r6, #0]
    1dfc:	0752      	lsls	r2, r2, #29
    1dfe:	d501      	bpl.n	1e04 <SDHC_CMD12_StopTransferWaitForBusy()+0x20>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1e00:	4807      	ldr	r0, [pc, #28]	; (1e20 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1e02:	b10b      	cbz	r3, 1e08 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
    1e04:	4618      	mov	r0, r3
    1e06:	bd70      	pop	{r4, r5, r6, pc}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1e08:	602b      	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1e0a:	f7ff ffa1 	bl	1d50 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1e0e:	3c01      	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1e10:	4603      	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1e12:	d1f2      	bne.n	1dfa <SDHC_CMD12_StopTransferWaitForBusy()+0x16>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1e14:	2800      	cmp	r0, #0
    1e16:	bf08      	it	eq
    1e18:	2005      	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    1e1a:	bd70      	pop	{r4, r5, r6, pc}
    1e1c:	400b1008 	.word	0x400b1008
    1e20:	0cdb0000 	.word	0x0cdb0000
    1e24:	400b1024 	.word	0x400b1024

00001e28 <SDHC_ACMD41_SendOperationCond(unsigned long)>:
  return result;
}

// ACMD 41 to send operation condition
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
    1e28:	b570      	push	{r4, r5, r6, lr}
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1e2a:	4c09      	ldr	r4, [pc, #36]	; (1e50 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x28>)
    1e2c:	2300      	movs	r3, #0
  return result;
}

// ACMD 41 to send operation condition
static int SDHC_ACMD41_SendOperationCond(uint32_t cond)
{
    1e2e:	4605      	mov	r5, r0
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1e30:	6023      	str	r3, [r4, #0]
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    1e32:	4808      	ldr	r0, [pc, #32]	; (1e54 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x2c>)
    1e34:	f7ff ff8c 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }
    1e38:	b100      	cbz	r0, 1e3c <SDHC_ACMD41_SendOperationCond(unsigned long)+0x14>
  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }

  return result;
}
    1e3a:	bd70      	pop	{r4, r5, r6, pc}
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }
    1e3c:	4e06      	ldr	r6, [pc, #24]	; (1e58 <SDHC_ACMD41_SendOperationCond(unsigned long)+0x30>)

  SDHC_CMDARG = cond;

  // Send 41CMD
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));
  result = SDHC_CMD_Do(xfertyp);
    1e3e:	4807      	ldr	r0, [pc, #28]	; (1e5c <SDHC_ACMD41_SendOperationCond(unsigned long)+0x34>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; } else { return result; }
    1e40:	6833      	ldr	r3, [r6, #0]

  SDHC_CMDARG = cond;
    1e42:	6025      	str	r5, [r4, #0]

  // Send 41CMD
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));
  result = SDHC_CMD_Do(xfertyp);
    1e44:	f7ff ff84 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    1e48:	2800      	cmp	r0, #0
    1e4a:	d1f6      	bne.n	1e3a <SDHC_ACMD41_SendOperationCond(unsigned long)+0x12>
    1e4c:	6833      	ldr	r3, [r6, #0]

  return result;
}
    1e4e:	bd70      	pop	{r4, r5, r6, pc}
    1e50:	400b1008 	.word	0x400b1008
    1e54:	371a0000 	.word	0x371a0000
    1e58:	400b1010 	.word	0x400b1010
    1e5c:	29020000 	.word	0x29020000

00001e60 <SDHC_CardGetType()>:
    Public functions

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
    1e60:	4b07      	ldr	r3, [pc, #28]	; (1e80 <SDHC_CardGetType()+0x20>)
    1e62:	781a      	ldrb	r2, [r3, #0]
    1e64:	b94a      	cbnz	r2, 1e7a <SDHC_CardGetType()+0x1a>
  if (sdCardDesc.version2 == 0) return 1; // SD_CARD_TYPE_SD1
    1e66:	789a      	ldrb	r2, [r3, #2]
    1e68:	b12a      	cbz	r2, 1e76 <SDHC_CardGetType()+0x16>
  if (sdCardDesc.highCapacity == 0) return 2; // SD_CARD_TYPE_SD2
    1e6a:	785b      	ldrb	r3, [r3, #1]
    1e6c:	2b00      	cmp	r3, #0
  return 3; // SD_CARD_TYPE_SDHC
    1e6e:	bf0c      	ite	eq
    1e70:	2002      	moveq	r0, #2
    1e72:	2003      	movne	r0, #3
    1e74:	4770      	bx	lr

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
  if (sdCardDesc.version2 == 0) return 1; // SD_CARD_TYPE_SD1
    1e76:	2001      	movs	r0, #1
  if (sdCardDesc.highCapacity == 0) return 2; // SD_CARD_TYPE_SD2
  return 3; // SD_CARD_TYPE_SDHC
}
    1e78:	4770      	bx	lr
    Public functions

******************************************************************************/
uint8_t SDHC_CardGetType(void)
{
  if (sdCardDesc.status) return 0;
    1e7a:	2000      	movs	r0, #0
    1e7c:	4770      	bx	lr
    1e7e:	bf00      	nop
    1e80:	1fff13e8 	.word	0x1fff13e8

00001e84 <SDHC_CardInit()>:

  void initClock()
  {
  #ifdef HAS_KINETIS_MPU
    // Allow SDHC Bus Master access.
    MPU_RGDAAC0 |= 0x0C000000;
    1e84:	4aaa      	ldr	r2, [pc, #680]	; (2130 <SDHC_CardInit()+0x2ac>)
  #endif
    // Enable SDHC clock.
    SIM_SCGC3 |= SIM_SCGC3_SDHC;
    1e86:	49ab      	ldr	r1, [pc, #684]	; (2134 <SDHC_CardInit()+0x2b0>)

  void initClock()
  {
  #ifdef HAS_KINETIS_MPU
    // Allow SDHC Bus Master access.
    MPU_RGDAAC0 |= 0x0C000000;
    1e88:	6813      	ldr	r3, [r2, #0]
    PORTE_PCR0 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D1  */
    PORTE_PCR1 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D0  */
    PORTE_PCR2 = 0;           /* SDHC.CLK */
    PORTE_PCR3 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.CMD */
    PORTE_PCR4 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS; /* PULLUP SDHC.D3  */
    PORTE_PCR5 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D2  */
    1e8a:	48ab      	ldr	r0, [pc, #684]	; (2138 <SDHC_CardInit()+0x2b4>)

  void initClock()
  {
  #ifdef HAS_KINETIS_MPU
    // Allow SDHC Bus Master access.
    MPU_RGDAAC0 |= 0x0C000000;
    1e8c:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000

//-----------------------------------------------------------------------------
// initialize the SDHC Controller and SD Card
// returns status of initialization(OK, nonInit, noCard, CardProtected)
uint8_t SDHC_CardInit(void)
{
    1e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  void initClock()
  {
  #ifdef HAS_KINETIS_MPU
    // Allow SDHC Bus Master access.
    MPU_RGDAAC0 |= 0x0C000000;
    1e94:	6013      	str	r3, [r2, #0]
  #endif
    // Enable SDHC clock.
    SIM_SCGC3 |= SIM_SCGC3_SDHC;
    1e96:	680b      	ldr	r3, [r1, #0]
  }

  // release the SDHC Controller signals
  static void SDHC_ReleaseGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D1  */
    1e98:	f8df e304 	ldr.w	lr, [pc, #772]	; 21a0 <SDHC_CardInit()+0x31c>
    PORTE_PCR1 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D0  */
    1e9c:	4fa7      	ldr	r7, [pc, #668]	; (213c <SDHC_CardInit()+0x2b8>)
    PORTE_PCR2 = 0;           /* SDHC.CLK */
    1e9e:	4ea8      	ldr	r6, [pc, #672]	; (2140 <SDHC_CardInit()+0x2bc>)
    PORTE_PCR3 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.CMD */
    1ea0:	4da8      	ldr	r5, [pc, #672]	; (2144 <SDHC_CardInit()+0x2c0>)
    PORTE_PCR4 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS; /* PULLUP SDHC.D3  */
    1ea2:	4ca9      	ldr	r4, [pc, #676]	; (2148 <SDHC_CardInit()+0x2c4>)
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
  #endif

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    1ea4:	f502 2223 	add.w	r2, r2, #667648	; 0xa3000
  #ifdef HAS_KINETIS_MPU
    // Allow SDHC Bus Master access.
    MPU_RGDAAC0 |= 0x0C000000;
  #endif
    // Enable SDHC clock.
    SIM_SCGC3 |= SIM_SCGC3_SDHC;
    1ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1eac:	600b      	str	r3, [r1, #0]
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
  #endif

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    1eae:	f602 022c 	addw	r2, r2, #2092	; 0x82c
  }

  // release the SDHC Controller signals
  static void SDHC_ReleaseGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D1  */
    1eb2:	f240 1303 	movw	r3, #259	; 0x103
    PORTE_PCR1 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D0  */
    PORTE_PCR2 = 0;           /* SDHC.CLK */
    1eb6:	2100      	movs	r1, #0
  }

  // release the SDHC Controller signals
  static void SDHC_ReleaseGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D1  */
    1eb8:	f8ce 3000 	str.w	r3, [lr]
    PORTE_PCR1 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D0  */
    1ebc:	603b      	str	r3, [r7, #0]
    PORTE_PCR2 = 0;           /* SDHC.CLK */
    1ebe:	6031      	str	r1, [r6, #0]
    PORTE_PCR3 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.CMD */
    1ec0:	602b      	str	r3, [r5, #0]
    PORTE_PCR4 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS; /* PULLUP SDHC.D3  */
    1ec2:	6023      	str	r3, [r4, #0]
    PORTE_PCR5 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D2  */
    1ec4:	6003      	str	r3, [r0, #0]
    //SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL = 0x80000000;
  #endif

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    1ec6:	6813      	ldr	r3, [r2, #0]
    1ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1ed0:	6013      	str	r3, [r2, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    1ed2:	6813      	ldr	r3, [r2, #0]
    1ed4:	01dd      	lsls	r5, r3, #7
    1ed6:	d4fc      	bmi.n	1ed2 <SDHC_CardInit()+0x4e>

  /* Set the SDHC initial baud rate divider and start */
  sdhc_setSdclk(400);
    1ed8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1edc:	f7ff fee0 	bl	1ca0 <sdhc_setSdclk(unsigned long)>

  /* Poll inhibit bits */
  while (SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB)) ;
    1ee0:	4a9a      	ldr	r2, [pc, #616]	; (214c <SDHC_CardInit()+0x2c8>)
    1ee2:	6813      	ldr	r3, [r2, #0]
    1ee4:	079c      	lsls	r4, r3, #30
    1ee6:	d1fc      	bne.n	1ee2 <SDHC_CardInit()+0x5e>
  // Teensy 3.5 & 3.6
  // initialize the SDHC Controller signals
  static void SDHC_InitGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D1  */
    PORTE_PCR1 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D0  */
    1ee8:	4f94      	ldr	r7, [pc, #592]	; (213c <SDHC_CardInit()+0x2b8>)
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Teensy 3.5 & 3.6
  // initialize the SDHC Controller signals
  static void SDHC_InitGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D1  */
    1eea:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 21a0 <SDHC_CardInit()+0x31c>
    PORTE_PCR1 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D0  */
    PORTE_PCR2 = PORT_PCR_MUX(4) | PORT_PCR_DSE;                             /* SDHC.CLK */
    1eee:	4994      	ldr	r1, [pc, #592]	; (2140 <SDHC_CardInit()+0x2bc>)
    PORTE_PCR3 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.CMD */
    PORTE_PCR4 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D3  */
    1ef0:	4d95      	ldr	r5, [pc, #596]	; (2148 <SDHC_CardInit()+0x2c4>)
    PORTE_PCR5 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D2  */
    1ef2:	4c91      	ldr	r4, [pc, #580]	; (2138 <SDHC_CardInit()+0x2b4>)

  /* Init GPIO again */
  SDHC_InitGPIO();

  /* Initial values */ // to do - Check values
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
    1ef4:	4a96      	ldr	r2, [pc, #600]	; (2150 <SDHC_CardInit()+0x2cc>)
  static void SDHC_InitGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D1  */
    PORTE_PCR1 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D0  */
    PORTE_PCR2 = PORT_PCR_MUX(4) | PORT_PCR_DSE;                             /* SDHC.CLK */
    PORTE_PCR3 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.CMD */
    1ef6:	4e93      	ldr	r6, [pc, #588]	; (2144 <SDHC_CardInit()+0x2c0>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
	| (SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD );
    1ef8:	4896      	ldr	r0, [pc, #600]	; (2154 <SDHC_CardInit()+0x2d0>)
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Teensy 3.5 & 3.6
  // initialize the SDHC Controller signals
  static void SDHC_InitGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D1  */
    1efa:	f240 4343 	movw	r3, #1091	; 0x443
    1efe:	f8ce 3000 	str.w	r3, [lr]
    PORTE_PCR1 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D0  */
    1f02:	603b      	str	r3, [r7, #0]
    PORTE_PCR2 = PORT_PCR_MUX(4) | PORT_PCR_DSE;                             /* SDHC.CLK */
    1f04:	f44f 6788 	mov.w	r7, #1088	; 0x440
    1f08:	600f      	str	r7, [r1, #0]

  /* Init GPIO again */
  SDHC_InitGPIO();

  /* Initial values */ // to do - Check values
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
    1f0a:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  static void SDHC_InitGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D1  */
    PORTE_PCR1 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D0  */
    PORTE_PCR2 = PORT_PCR_MUX(4) | PORT_PCR_DSE;                             /* SDHC.CLK */
    PORTE_PCR3 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.CMD */
    1f0e:	6033      	str	r3, [r6, #0]
    PORTE_PCR4 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D3  */
    1f10:	602b      	str	r3, [r5, #0]
    PORTE_PCR5 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D2  */
    1f12:	6023      	str	r3, [r4, #0]

  /* Init GPIO again */
  SDHC_InitGPIO();

  /* Initial values */ // to do - Check values
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
    1f14:	6011      	str	r1, [r2, #0]
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
	| (SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD );
    1f16:	6803      	ldr	r3, [r0, #0]
    //SDHC_VENDOR2 &= ~(1<<12); //switch off ACMD23 sharing SDMA
  //#endif

  /* Enable requests */
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    1f18:	498f      	ldr	r1, [pc, #572]	; (2158 <SDHC_CardInit()+0x2d4>)
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    1f1a:	4d90      	ldr	r5, [pc, #576]	; (215c <SDHC_CardInit()+0x2d8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
	| (SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD );
    1f1c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    1f20:	f504 24c8 	add.w	r4, r4, #409600	; 0x64000
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  //SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
  //SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  //SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  SDHC_PROCTL = (SDHC_PROCTL & ~(SDHC_PROCTL_EMODE(3)))
	| (SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD );
    1f24:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    1f28:	6003      	str	r3, [r0, #0]
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    1f2a:	3420      	adds	r4, #32
    //SDHC_VENDOR2 &= ~(1<<12); //switch off ACMD23 sharing SDMA
  //#endif

  /* Enable requests */
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    1f2c:	680b      	ldr	r3, [r1, #0]
    1f2e:	600b      	str	r3, [r1, #0]

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    1f30:	3228      	adds	r2, #40	; 0x28
#if 1
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_DMAESEN | SDHC_IRQSTATEN_AC12ESEN | SDHC_IRQSTATEN_DEBESEN |
	SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_DTOESEN | SDHC_IRQSTATEN_CIESEN |
	SDHC_IRQSTATEN_CEBESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_CTOESEN |
	SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_DINTSEN |
	SDHC_IRQSTATEN_CRMSEN | SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    1f32:	f240 51dc 	movw	r1, #1500	; 0x5dc
    1f36:	6025      	str	r5, [r4, #0]

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    1f38:	6813      	ldr	r3, [r2, #0]
    1f3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    1f3e:	6013      	str	r3, [r2, #0]
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
    1f40:	6813      	ldr	r3, [r2, #0]
    1f42:	0118      	lsls	r0, r3, #4
    1f44:	d4fc      	bmi.n	1f40 <SDHC_CardInit()+0xbc>
#endif

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 1500; ii++) {
    1f46:	3901      	subs	r1, #1
    1f48:	d1f6      	bne.n	1f38 <SDHC_CardInit()+0xb4>
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  // to do - check if this needed
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1f4a:	4a83      	ldr	r2, [pc, #524]	; (2158 <SDHC_CardInit()+0x2d4>)
  // Check card
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS) {
    1f4c:	487f      	ldr	r0, [pc, #508]	; (214c <SDHC_CardInit()+0x2c8>)
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  // to do - check if this needed
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1f4e:	6813      	ldr	r3, [r2, #0]
    1f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1f54:	6013      	str	r3, [r2, #0]
  // Check card
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS) {
    1f56:	6803      	ldr	r3, [r0, #0]
    1f58:	03da      	lsls	r2, r3, #15
    1f5a:	d408      	bmi.n	1f6e <SDHC_CardInit()+0xea>
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    1f5c:	4b80      	ldr	r3, [pc, #512]	; (2160 <SDHC_CardInit()+0x2dc>)
    1f5e:	2002      	movs	r0, #2
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    1f60:	7059      	strb	r1, [r3, #1]
  sdCardDesc.version2 = 0;
    1f62:	7099      	strb	r1, [r3, #2]
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    1f64:	7018      	strb	r0, [r3, #0]
  sdCardDesc.address = 0;
    1f66:	6059      	str	r1, [r3, #4]
  sdCardDesc.highCapacity = 0;
  sdCardDesc.version2 = 0;
  sdCardDesc.numBlocks = 0;
    1f68:	6099      	str	r1, [r3, #8]
    1f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    1f6e:	4c7c      	ldr	r4, [pc, #496]	; (2160 <SDHC_CardInit()+0x2dc>)
  sdCardDesc.numBlocks = 0;

  if (resS)
    return resS;

  SDHC_IRQSIGEN = 0;
    1f70:	4b7c      	ldr	r3, [pc, #496]	; (2164 <SDHC_CardInit()+0x2e0>)
static int SDHC_CMD0_GoToIdle(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1f72:	4e7d      	ldr	r6, [pc, #500]	; (2168 <SDHC_CardInit()+0x2e4>)
  uint8_t resS;
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
    1f74:	7021      	strb	r1, [r4, #0]
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    1f76:	7061      	strb	r1, [r4, #1]
  sdCardDesc.version2 = 0;
    1f78:	70a1      	strb	r1, [r4, #2]

  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);
    1f7a:	4608      	mov	r0, r1
  sdCardDesc.numBlocks = 0;

  if (resS)
    return resS;

  SDHC_IRQSIGEN = 0;
    1f7c:	6019      	str	r1, [r3, #0]
static int SDHC_CMD0_GoToIdle(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1f7e:	6031      	str	r1, [r6, #0]
  int resR;

  resS = SDHC_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
    1f80:	6061      	str	r1, [r4, #4]
  sdCardDesc.highCapacity = 0;
  sdCardDesc.version2 = 0;
  sdCardDesc.numBlocks = 0;
    1f82:	60a1      	str	r1, [r4, #8]

  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);
    1f84:	f7ff fee4 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    1f88:	b970      	cbnz	r0, 1fa8 <SDHC_CardInit()+0x124>
    1f8a:	4d78      	ldr	r5, [pc, #480]	; (216c <SDHC_CardInit()+0x2e8>)
  SDHC_CMDARG = cond;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    1f8c:	4878      	ldr	r0, [pc, #480]	; (2170 <SDHC_CardInit()+0x2ec>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    1f8e:	682b      	ldr	r3, [r5, #0]
static int SDHC_CMD8_SetInterface(uint32_t cond)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = cond;
    1f90:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    1f94:	6033      	str	r3, [r6, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    1f96:	f7ff fedb 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    1f9a:	b948      	cbnz	r0, 1fb0 <SDHC_CardInit()+0x12c>
    1f9c:	682b      	ldr	r3, [r5, #0]
    return SDHC_STATUS_NOINIT;
  }

  resR = SDHC_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) {
      if (SDHC_CMDRSP0 != 0x000001AA) {
    1f9e:	682b      	ldr	r3, [r5, #0]
    1fa0:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    1fa4:	f000 80c1 	beq.w	212a <SDHC_CardInit()+0x2a6>

  SDHC_IRQSIGEN = 0;

  resR = SDHC_CMD0_GoToIdle();
  if (resR) {
    sdCardDesc.status = SDHC_STATUS_NOINIT;
    1fa8:	2001      	movs	r0, #1
    1faa:	7020      	strb	r0, [r4, #0]
    return SDHC_STATUS_NOINIT;
    1fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (SDHC_CMDRSP0 != 0x000001AA) {
        sdCardDesc.status = SDHC_STATUS_NOINIT;
        return SDHC_STATUS_NOINIT;
      }
      sdCardDesc.highCapacity = 1;
  } else if (resR == SDHC_RESULT_NO_RESPONSE) {
    1fb0:	2805      	cmp	r0, #5
    1fb2:	d1f9      	bne.n	1fa8 <SDHC_CardInit()+0x124>
  } else {
    sdCardDesc.status = SDHC_STATUS_NOINIT;
    return SDHC_STATUS_NOINIT;
  }

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    1fb4:	2000      	movs	r0, #0
    1fb6:	f7ff ff37 	bl	1e28 <SDHC_ACMD41_SendOperationCond(unsigned long)>
    1fba:	2800      	cmp	r0, #0
    1fbc:	d1f4      	bne.n	1fa8 <SDHC_CardInit()+0x124>

  if (SDHC_CMDRSP0 & 0x300000) {
    1fbe:	4b6b      	ldr	r3, [pc, #428]	; (216c <SDHC_CardInit()+0x2e8>)
    1fc0:	681a      	ldr	r2, [r3, #0]
    1fc2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    1fc6:	d019      	beq.n	1ffc <SDHC_CardInit()+0x178>
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    1fc8:	7862      	ldrb	r2, [r4, #1]
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    1fca:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 21a4 <SDHC_CardInit()+0x320>

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    1fce:	4f69      	ldr	r7, [pc, #420]	; (2174 <SDHC_CardInit()+0x2f0>)
    1fd0:	2a00      	cmp	r2, #0
    //
    uint32_t ii = 0;
    1fd2:	4605      	mov	r5, r0
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    1fd4:	461e      	mov	r6, r3

  if (SDHC_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    1fd6:	bf08      	it	eq
    1fd8:	f44f 1740 	moveq.w	r7, #3145728	; 0x300000
    //
    uint32_t ii = 0;
    do {
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
    1fdc:	4638      	mov	r0, r7
    1fde:	f7ff ff23 	bl	1e28 <SDHC_ACMD41_SendOperationCond(unsigned long)>
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
    1fe2:	3501      	adds	r5, #1
      if (SDHC_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    1fe4:	4b61      	ldr	r3, [pc, #388]	; (216c <SDHC_CardInit()+0x2e8>)
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
      if (SDHC_ACMD41_SendOperationCond(condition)) {
    1fe6:	2800      	cmp	r0, #0
    1fe8:	f040 80f1 	bne.w	21ce <SDHC_CardInit()+0x34a>
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    1fec:	6832      	ldr	r2, [r6, #0]
    1fee:	2a00      	cmp	r2, #0
    1ff0:	f2c0 80e4 	blt.w	21bc <SDHC_CardInit()+0x338>
    1ff4:	4545      	cmp	r5, r8
    1ff6:	d1f1      	bne.n	1fdc <SDHC_CardInit()+0x158>

    if (resS) return resS;

    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
      sdCardDesc.highCapacity = 0;
    1ff8:	2300      	movs	r3, #0
    1ffa:	7063      	strb	r3, [r4, #1]
static int SDHC_CMD2_Identify(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1ffc:	4e5a      	ldr	r6, [pc, #360]	; (2168 <SDHC_CardInit()+0x2e4>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN
            | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    1ffe:	485e      	ldr	r0, [pc, #376]	; (2178 <SDHC_CardInit()+0x2f4>)
static int SDHC_CMD2_Identify(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    2000:	2300      	movs	r3, #0
    2002:	6033      	str	r3, [r6, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN
            | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    2004:	f7ff fea4 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2008:	4603      	mov	r3, r0
    200a:	2800      	cmp	r0, #0
    200c:	d1cc      	bne.n	1fa8 <SDHC_CardInit()+0x124>
    200e:	4d57      	ldr	r5, [pc, #348]	; (216c <SDHC_CardInit()+0x2e8>)
  SDHC_CMDARG = 0;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2010:	485a      	ldr	r0, [pc, #360]	; (217c <SDHC_CardInit()+0x2f8>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN
            | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2012:	682a      	ldr	r2, [r5, #0]
static int SDHC_CMD3_GetAddress(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    2014:	6033      	str	r3, [r6, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2016:	f7ff fe9b 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    201a:	2800      	cmp	r0, #0
    201c:	d1c4      	bne.n	1fa8 <SDHC_CardInit()+0x124>
    201e:	682b      	ldr	r3, [r5, #0]
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    2020:	682b      	ldr	r3, [r5, #0]
  SDHC_CMDARG = address;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN |
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    2022:	4857      	ldr	r0, [pc, #348]	; (2180 <SDHC_CardInit()+0x2fc>)
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    2024:	4d4e      	ldr	r5, [pc, #312]	; (2160 <SDHC_CardInit()+0x2dc>)
    2026:	0c1b      	lsrs	r3, r3, #16
    2028:	041b      	lsls	r3, r3, #16
static int SDHC_CMD9_GetParameters(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    202a:	6033      	str	r3, [r6, #0]
  if (SDHC_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (SDHC_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    202c:	6063      	str	r3, [r4, #4]
  SDHC_CMDARG = address;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN |
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136));

  result = SDHC_CMD_Do(xfertyp);
    202e:	f7ff fe8f 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {
    2032:	2800      	cmp	r0, #0
    2034:	d1b8      	bne.n	1fa8 <SDHC_CardInit()+0x124>
    //(void)SDHC_CMDRSP0;
    sdCardDesc.tranSpeed = SDHC_CMDRSP2 >> 24;
    2036:	4b53      	ldr	r3, [pc, #332]	; (2184 <SDHC_CardInit()+0x300>)
  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;

  // Get card parameters
  if (SDHC_CMD9_GetParameters(sdCardDesc.address))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    2038:	4953      	ldr	r1, [pc, #332]	; (2188 <SDHC_CardInit()+0x304>)

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) {
    //(void)SDHC_CMDRSP0;
    sdCardDesc.tranSpeed = SDHC_CMDRSP2 >> 24;
    203a:	681a      	ldr	r2, [r3, #0]
    203c:	0e12      	lsrs	r2, r2, #24
    203e:	70ea      	strb	r2, [r5, #3]
  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;

  // Get card parameters
  if (SDHC_CMD9_GetParameters(sdCardDesc.address))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    2040:	680a      	ldr	r2, [r1, #0]
    2042:	f412 0f40 	tst.w	r2, #12582912	; 0xc00000
    2046:	f040 80af 	bne.w	21a8 <SDHC_CardInit()+0x324>
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    204a:	6819      	ldr	r1, [r3, #0]
    c_size = SDHC_CMDRSP2 & 0x03;
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    204c:	484f      	ldr	r0, [pc, #316]	; (218c <SDHC_CardInit()+0x308>)

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    c_size = SDHC_CMDRSP2 & 0x03;
    204e:	681b      	ldr	r3, [r3, #0]
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    2050:	6802      	ldr	r2, [r0, #0]
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    2052:	6800      	ldr	r0, [r0, #0]
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    2054:	029b      	lsls	r3, r3, #10
    2056:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
    205a:	ea43 5392 	orr.w	r3, r3, r2, lsr #22
    205e:	f3c0 10c2 	ubfx	r0, r0, #7, #3
    2062:	1c5a      	adds	r2, r3, #1
    2064:	f3c1 2103 	ubfx	r1, r1, #8, #4
    2068:	1c83      	adds	r3, r0, #2
    206a:	3909      	subs	r1, #9
    206c:	fa02 f303 	lsl.w	r3, r2, r3
    2070:	408b      	lsls	r3, r1
    2072:	60ab      	str	r3, [r5, #8]
static int SDHC_CMD7_SelectCard(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    2074:	4e3c      	ldr	r6, [pc, #240]	; (2168 <SDHC_CardInit()+0x2e4>)
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    sdCardDesc.numBlocks = (c_size + 1) << 10;
  }

  // Select card
  if (SDHC_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    2076:	6863      	ldr	r3, [r4, #4]
static int SDHC_CMD7_SelectCard(uint32_t address)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    2078:	6033      	str	r3, [r6, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    207a:	4845      	ldr	r0, [pc, #276]	; (2190 <SDHC_CardInit()+0x30c>)
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    sdCardDesc.numBlocks = (c_size + 1) << 10;
  }

  // Select card
  if (SDHC_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    207c:	4f38      	ldr	r7, [pc, #224]	; (2160 <SDHC_CardInit()+0x2dc>)
  SDHC_CMDARG = address;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    207e:	f7ff fe67 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {(void)SDHC_CMDRSP0; }
    2082:	2800      	cmp	r0, #0
    2084:	d190      	bne.n	1fa8 <SDHC_CardInit()+0x124>
    2086:	4d39      	ldr	r5, [pc, #228]	; (216c <SDHC_CardInit()+0x2e8>)
  SDHC_CMDARG = block_size;

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2088:	4842      	ldr	r0, [pc, #264]	; (2194 <SDHC_CardInit()+0x310>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) {(void)SDHC_CMDRSP0; }
    208a:	682b      	ldr	r3, [r5, #0]
static int SDHC_CMD16_SetBlockSize(uint32_t block_size)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = block_size;
    208c:	f44f 7300 	mov.w	r3, #512	; 0x200
    2090:	6033      	str	r3, [r6, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    2092:	f7ff fe5d 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2096:	2800      	cmp	r0, #0
    2098:	d186      	bne.n	1fa8 <SDHC_CardInit()+0x124>
  // Block Size in SDHC Controller is already set to 512 by SDHC_Init();
  // Set 512 Block size in SD card
  if (SDHC_CMD16_SetBlockSize(SDHC_BLOCK_SIZE))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    209a:	687b      	ldr	r3, [r7, #4]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    209c:	682a      	ldr	r2, [r5, #0]
  SDHC_CMDARG = address;
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    209e:	483e      	ldr	r0, [pc, #248]	; (2198 <SDHC_CardInit()+0x314>)
static int SDHC_ACMD6_SetBusWidth(uint32_t address, uint32_t width)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = address;
    20a0:	6033      	str	r3, [r6, #0]
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    20a2:	f7ff fe55 	bl	1d50 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
    20a6:	2800      	cmp	r0, #0
    20a8:	f47f af7e 	bne.w	1fa8 <SDHC_CardInit()+0x124>
  SDHC_CMDARG = width;
    20ac:	2302      	movs	r3, #2
  // first send CMD 55 Application specific command
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
    20ae:	682a      	ldr	r2, [r5, #0]

  // Send CMD6
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD6) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    20b0:	483a      	ldr	r0, [pc, #232]	; (219c <SDHC_CardInit()+0x318>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0;} else { return result; }
  SDHC_CMDARG = width;
    20b2:	6033      	str	r3, [r6, #0]

  // Send CMD6
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD6) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);
    20b4:	f7ff fe4c 	bl	1d50 <SDHC_CMD_Do(unsigned long)>

  if (result == SDHC_RESULT_OK) {  (void)SDHC_CMDRSP0; }
    20b8:	2800      	cmp	r0, #0
    20ba:	f47f af75 	bne.w	1fa8 <SDHC_CardInit()+0x124>

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    20be:	4b25      	ldr	r3, [pc, #148]	; (2154 <SDHC_CardInit()+0x2d0>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD6) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48));

  result = SDHC_CMD_Do(xfertyp);

  if (result == SDHC_RESULT_OK) {  (void)SDHC_CMDRSP0; }
    20c0:	682a      	ldr	r2, [r5, #0]

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    20c2:	681a      	ldr	r2, [r3, #0]
  }

  // release the SDHC Controller signals
  static void SDHC_ReleaseGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D1  */
    20c4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 21a0 <SDHC_CardInit()+0x31c>
    PORTE_PCR1 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D0  */
    20c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 213c <SDHC_CardInit()+0x2b8>
    PORTE_PCR2 = 0;           /* SDHC.CLK */
    20cc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2140 <SDHC_CardInit()+0x2bc>
    PORTE_PCR3 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.CMD */
    PORTE_PCR4 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS; /* PULLUP SDHC.D3  */
    PORTE_PCR5 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D2  */
    20d0:	4c19      	ldr	r4, [pc, #100]	; (2138 <SDHC_CardInit()+0x2b4>)

  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    20d2:	f022 0206 	bic.w	r2, r2, #6
    20d6:	601a      	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    20d8:	681a      	ldr	r2, [r3, #0]
  static void SDHC_ReleaseGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D1  */
    PORTE_PCR1 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D0  */
    PORTE_PCR2 = 0;           /* SDHC.CLK */
    PORTE_PCR3 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.CMD */
    20da:	f5a6 26c7 	sub.w	r6, r6, #407552	; 0x63800
    20de:	f2a6 76fc 	subw	r6, r6, #2044	; 0x7fc
    PORTE_PCR4 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS; /* PULLUP SDHC.D3  */
    20e2:	f5a5 25c8 	sub.w	r5, r5, #409600	; 0x64000
  // Set 4 bit data bus width
  if (SDHC_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    20e6:	f042 0202 	orr.w	r2, r2, #2
    20ea:	601a      	str	r2, [r3, #0]
  }

  // release the SDHC Controller signals
  static void SDHC_ReleaseGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D1  */
    20ec:	f240 1303 	movw	r3, #259	; 0x103
    20f0:	f8ca 3000 	str.w	r3, [sl]
    PORTE_PCR1 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D0  */
    20f4:	f8c9 3000 	str.w	r3, [r9]
    PORTE_PCR2 = 0;           /* SDHC.CLK */
    20f8:	f8c8 0000 	str.w	r0, [r8]
    PORTE_PCR3 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.CMD */
    20fc:	6033      	str	r3, [r6, #0]

  // De-Init GPIO
  SDHC_ReleaseGPIO();

  // Set the SDHC default baud rate
  sdhc_setSdclk(25000);
    20fe:	f246 10a8 	movw	r0, #25000	; 0x61a8
  {
    PORTE_PCR0 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D1  */
    PORTE_PCR1 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D0  */
    PORTE_PCR2 = 0;           /* SDHC.CLK */
    PORTE_PCR3 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.CMD */
    PORTE_PCR4 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS; /* PULLUP SDHC.D3  */
    2102:	602b      	str	r3, [r5, #0]
    PORTE_PCR5 = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;   /* PULLUP SDHC.D2  */
    2104:	6023      	str	r3, [r4, #0]

  // De-Init GPIO
  SDHC_ReleaseGPIO();

  // Set the SDHC default baud rate
  sdhc_setSdclk(25000);
    2106:	f7ff fdcb 	bl	1ca0 <sdhc_setSdclk(unsigned long)>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Teensy 3.5 & 3.6
  // initialize the SDHC Controller signals
  static void SDHC_InitGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D1  */
    210a:	f240 4343 	movw	r3, #1091	; 0x443
    PORTE_PCR1 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D0  */
    PORTE_PCR2 = PORT_PCR_MUX(4) | PORT_PCR_DSE;                             /* SDHC.CLK */
    210e:	f44f 6288 	mov.w	r2, #1088	; 0x440
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Teensy 3.5 & 3.6
  // initialize the SDHC Controller signals
  static void SDHC_InitGPIO(void)
  {
    PORTE_PCR0 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D1  */
    2112:	f8ca 3000 	str.w	r3, [sl]
    PORTE_PCR1 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D0  */
    2116:	f8c9 3000 	str.w	r3, [r9]
    PORTE_PCR2 = PORT_PCR_MUX(4) | PORT_PCR_DSE;                             /* SDHC.CLK */
    211a:	f8c8 2000 	str.w	r2, [r8]
    PORTE_PCR3 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.CMD */
    211e:	6033      	str	r3, [r6, #0]
    PORTE_PCR4 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D3  */
    2120:	602b      	str	r3, [r5, #0]
    PORTE_PCR5 = PORT_PCR_MUX(4) | PORT_PCR_PS | PORT_PCR_PE | PORT_PCR_DSE; /* SDHC.D2  */
    2122:	6023      	str	r3, [r4, #0]
  // and SDHC_SetClock() for 50 MHz config

  // Init GPIO
  SDHC_InitGPIO();

  return sdCardDesc.status;
    2124:	7838      	ldrb	r0, [r7, #0]
    2126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (resR == SDHC_RESULT_OK) {
      if (SDHC_CMDRSP0 != 0x000001AA) {
        sdCardDesc.status = SDHC_STATUS_NOINIT;
        return SDHC_STATUS_NOINIT;
      }
      sdCardDesc.highCapacity = 1;
    212a:	2301      	movs	r3, #1
    212c:	7063      	strb	r3, [r4, #1]
    212e:	e741      	b.n	1fb4 <SDHC_CardInit()+0x130>
    2130:	4000d800 	.word	0x4000d800
    2134:	40048030 	.word	0x40048030
    2138:	4004d014 	.word	0x4004d014
    213c:	4004d004 	.word	0x4004d004
    2140:	4004d008 	.word	0x4004d008
    2144:	4004d00c 	.word	0x4004d00c
    2148:	4004d010 	.word	0x4004d010
    214c:	400b1024 	.word	0x400b1024
    2150:	400b1004 	.word	0x400b1004
    2154:	400b1028 	.word	0x400b1028
    2158:	400b1030 	.word	0x400b1030
    215c:	117f00bb 	.word	0x117f00bb
    2160:	1fff13e8 	.word	0x1fff13e8
    2164:	400b1038 	.word	0x400b1038
    2168:	400b1008 	.word	0x400b1008
    216c:	400b1010 	.word	0x400b1010
    2170:	081a0000 	.word	0x081a0000
    2174:	40300000 	.word	0x40300000
    2178:	02090000 	.word	0x02090000
    217c:	031a0000 	.word	0x031a0000
    2180:	09090000 	.word	0x09090000
    2184:	400b1018 	.word	0x400b1018
    2188:	400b101c 	.word	0x400b101c
    218c:	400b1014 	.word	0x400b1014
    2190:	071b0000 	.word	0x071b0000
    2194:	101a0000 	.word	0x101a0000
    2198:	371a0000 	.word	0x371a0000
    219c:	061a0000 	.word	0x061a0000
    21a0:	4004d000 	.word	0x4004d000
    21a4:	000186a0 	.word	0x000186a0
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
  } else {
    uint32_t c_size;
    sdCardDesc.version2 = 1;
    21a8:	2201      	movs	r2, #1
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    21aa:	4b0a      	ldr	r3, [pc, #40]	; (21d4 <SDHC_CardInit()+0x350>)
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
  } else {
    uint32_t c_size;
    sdCardDesc.version2 = 1;
    21ac:	70aa      	strb	r2, [r5, #2]
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    21ae:	681b      	ldr	r3, [r3, #0]
    sdCardDesc.numBlocks = (c_size + 1) << 10;
    21b0:	f3c3 2315 	ubfx	r3, r3, #8, #22
    21b4:	4413      	add	r3, r2
    21b6:	029b      	lsls	r3, r3, #10
    21b8:	60ab      	str	r3, [r5, #8]
    21ba:	e75b      	b.n	2074 <SDHC_CardInit()+0x1f0>
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));

    if (resS) return resS;

    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
    21bc:	4a06      	ldr	r2, [pc, #24]	; (21d8 <SDHC_CardInit()+0x354>)
    21be:	4295      	cmp	r5, r2
    21c0:	f43f af1a 	beq.w	1ff8 <SDHC_CardInit()+0x174>
    21c4:	681b      	ldr	r3, [r3, #0]
    21c6:	005b      	lsls	r3, r3, #1
    21c8:	f57f af16 	bpl.w	1ff8 <SDHC_CardInit()+0x174>
    21cc:	e716      	b.n	1ffc <SDHC_CardInit()+0x178>
    21ce:	2001      	movs	r0, #1
    21d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    21d4:	400b1014 	.word	0x400b1014
    21d8:	000186a0 	.word	0x000186a0

000021dc <SDHC_CardReadBlock(void*, unsigned long)>:
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    21dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    21de:	4b38      	ldr	r3, [pc, #224]	; (22c0 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    21e0:	781a      	ldrb	r2, [r3, #0]
    21e2:	b10a      	cbz	r2, 21e8 <SDHC_CardReadBlock(void*, unsigned long)+0xc>
     return SDHC_RESULT_NOT_READY;
    21e4:	2003      	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);

  return result;
}
    21e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    21e8:	785b      	ldrb	r3, [r3, #1]
    21ea:	4606      	mov	r6, r0
    21ec:	b903      	cbnz	r3, 21f0 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    21ee:	0249      	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    21f0:	4d34      	ldr	r5, [pc, #208]	; (22c4 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    21f2:	4c35      	ldr	r4, [pc, #212]	; (22c8 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    21f4:	4b35      	ldr	r3, [pc, #212]	; (22cc <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    21f6:	4836      	ldr	r0, [pc, #216]	; (22d0 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    21f8:	f64f 77ff 	movw	r7, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    21fc:	f44f 3281 	mov.w	r2, #66048	; 0x10200

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    2200:	602f      	str	r7, [r5, #0]
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    2202:	6021      	str	r1, [r4, #0]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    2204:	601a      	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2206:	f7ff fda3 	bl	1d50 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    220a:	2800      	cmp	r0, #0
    220c:	d1eb      	bne.n	21e6 <SDHC_CardReadBlock(void*, unsigned long)+0xa>
    220e:	4b31      	ldr	r3, [pc, #196]	; (22d4 <SDHC_CardReadBlock(void*, unsigned long)+0xf8>)
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
		*pData++ = SDHC_DATPORT;
    2210:	4931      	ldr	r1, [pc, #196]	; (22d8 <SDHC_CardReadBlock(void*, unsigned long)+0xfc>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    2212:	681b      	ldr	r3, [r3, #0]
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    2214:	341c      	adds	r4, #28
    2216:	f106 0240 	add.w	r2, r6, #64	; 0x40
    221a:	f506 7010 	add.w	r0, r6, #576	; 0x240
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    221e:	682b      	ldr	r3, [r5, #0]
    2220:	4f28      	ldr	r7, [pc, #160]	; (22c4 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    2222:	f043 0620 	orr.w	r6, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    2226:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    222a:	602e      	str	r6, [r5, #0]
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    222c:	d13e      	bne.n	22ac <SDHC_CardReadBlock(void*, unsigned long)+0xd0>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    222e:	6823      	ldr	r3, [r4, #0]
    2230:	051e      	lsls	r6, r3, #20
    2232:	d5fc      	bpl.n	222e <SDHC_CardReadBlock(void*, unsigned long)+0x52>
		*pData++ = SDHC_DATPORT;
    2234:	680b      	ldr	r3, [r1, #0]
    2236:	f842 3c40 	str.w	r3, [r2, #-64]
		*pData++ = SDHC_DATPORT;
    223a:	680b      	ldr	r3, [r1, #0]
    223c:	f842 3c3c 	str.w	r3, [r2, #-60]
		*pData++ = SDHC_DATPORT;
    2240:	680b      	ldr	r3, [r1, #0]
    2242:	f842 3c38 	str.w	r3, [r2, #-56]
		*pData++ = SDHC_DATPORT;
    2246:	680b      	ldr	r3, [r1, #0]
    2248:	f842 3c34 	str.w	r3, [r2, #-52]
		*pData++ = SDHC_DATPORT;
    224c:	680b      	ldr	r3, [r1, #0]
    224e:	f842 3c30 	str.w	r3, [r2, #-48]
		*pData++ = SDHC_DATPORT;
    2252:	680b      	ldr	r3, [r1, #0]
    2254:	f842 3c2c 	str.w	r3, [r2, #-44]
		*pData++ = SDHC_DATPORT;
    2258:	680b      	ldr	r3, [r1, #0]
    225a:	f842 3c28 	str.w	r3, [r2, #-40]
		*pData++ = SDHC_DATPORT;
    225e:	680b      	ldr	r3, [r1, #0]
    2260:	f842 3c24 	str.w	r3, [r2, #-36]
		*pData++ = SDHC_DATPORT;
    2264:	680b      	ldr	r3, [r1, #0]
    2266:	f842 3c20 	str.w	r3, [r2, #-32]
		*pData++ = SDHC_DATPORT;
    226a:	680b      	ldr	r3, [r1, #0]
    226c:	f842 3c1c 	str.w	r3, [r2, #-28]
		*pData++ = SDHC_DATPORT;
    2270:	680b      	ldr	r3, [r1, #0]
    2272:	f842 3c18 	str.w	r3, [r2, #-24]
		*pData++ = SDHC_DATPORT;
    2276:	680b      	ldr	r3, [r1, #0]
    2278:	f842 3c14 	str.w	r3, [r2, #-20]
		*pData++ = SDHC_DATPORT;
    227c:	680b      	ldr	r3, [r1, #0]
    227e:	f842 3c10 	str.w	r3, [r2, #-16]
		*pData++ = SDHC_DATPORT;
    2282:	680b      	ldr	r3, [r1, #0]
    2284:	f842 3c0c 	str.w	r3, [r2, #-12]
		*pData++ = SDHC_DATPORT;
    2288:	680b      	ldr	r3, [r1, #0]
    228a:	f842 3c08 	str.w	r3, [r2, #-8]
		*pData++ = SDHC_DATPORT;
    228e:	680b      	ldr	r3, [r1, #0]
    2290:	f842 3c04 	str.w	r3, [r2, #-4]
    2294:	3240      	adds	r2, #64	; 0x40
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    2296:	4282      	cmp	r2, r0
    2298:	d1c1      	bne.n	221e <SDHC_CardReadBlock(void*, unsigned long)+0x42>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    229a:	2000      	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    229c:	4909      	ldr	r1, [pc, #36]	; (22c4 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    229e:	680b      	ldr	r3, [r1, #0]
    22a0:	4a08      	ldr	r2, [pc, #32]	; (22c4 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    22a2:	079b      	lsls	r3, r3, #30
    22a4:	d5fb      	bpl.n	229e <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    22a6:	4b0d      	ldr	r3, [pc, #52]	; (22dc <SDHC_CardReadBlock(void*, unsigned long)+0x100>)
    22a8:	6013      	str	r3, [r2, #0]

  return result;
    22aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    22ac:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    22b0:	f043 0320 	orr.w	r3, r3, #32
    22b4:	603b      	str	r3, [r7, #0]
			SDHC_CMD12_StopTransferWaitForBusy();
    22b6:	f7ff fd95 	bl	1de4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    22ba:	2001      	movs	r0, #1
    22bc:	e7ee      	b.n	229c <SDHC_CardReadBlock(void*, unsigned long)+0xc0>
    22be:	bf00      	nop
    22c0:	1fff13e8 	.word	0x1fff13e8
    22c4:	400b1030 	.word	0x400b1030
    22c8:	400b1008 	.word	0x400b1008
    22cc:	400b1004 	.word	0x400b1004
    22d0:	113a0010 	.word	0x113a0010
    22d4:	400b1010 	.word	0x400b1010
    22d8:	400b1020 	.word	0x400b1020
    22dc:	01000022 	.word	0x01000022

000022e0 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    22e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    22e2:	4b2b      	ldr	r3, [pc, #172]	; (2390 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    22e4:	781a      	ldrb	r2, [r3, #0]
    22e6:	b10a      	cbz	r2, 22ec <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    22e8:	2003      	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    22ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    22ec:	785b      	ldrb	r3, [r3, #1]
    22ee:	4604      	mov	r4, r0
    22f0:	b903      	cbnz	r3, 22f4 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    22f2:	0249      	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    22f4:	4d27      	ldr	r5, [pc, #156]	; (2394 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    22f6:	4828      	ldr	r0, [pc, #160]	; (2398 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb8>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    22f8:	682a      	ldr	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    22fa:	4b28      	ldr	r3, [pc, #160]	; (239c <SDHC_CardWriteBlock(void const*, unsigned long)+0xbc>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    22fc:	602a      	str	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    22fe:	f44f 3281 	mov.w	r2, #66048	; 0x10200
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    2302:	6001      	str	r1, [r0, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2304:	4826      	ldr	r0, [pc, #152]	; (23a0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc0>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    2306:	601a      	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    2308:	f7ff fd22 	bl	1d50 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    230c:	2800      	cmp	r0, #0
    230e:	d1ec      	bne.n	22ea <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
    2310:	4b24      	ldr	r3, [pc, #144]	; (23a4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc4>)
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    2312:	4e25      	ldr	r6, [pc, #148]	; (23a8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc8>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    2314:	681b      	ldr	r3, [r3, #0]
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    2316:	4629      	mov	r1, r5
    2318:	f504 7700 	add.w	r7, r4, #512	; 0x200
    231c:	680b      	ldr	r3, [r1, #0]
    231e:	4a1d      	ldr	r2, [pc, #116]	; (2394 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    2320:	06d8      	lsls	r0, r3, #27
    2322:	d5fb      	bpl.n	231c <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    2324:	682b      	ldr	r3, [r5, #0]
    2326:	f413 0fe0 	tst.w	r3, #7340032	; 0x700000
    232a:	d11a      	bne.n	2362 <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    232c:	f104 0240 	add.w	r2, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    2330:	f854 3b04 	ldr.w	r3, [r4], #4
    2334:	6033      	str	r3, [r6, #0]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    2336:	42a2      	cmp	r2, r4
    2338:	d1fa      	bne.n	2330 <SDHC_CardWriteBlock(void const*, unsigned long)+0x50>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    233a:	680b      	ldr	r3, [r1, #0]
    233c:	f8df e054 	ldr.w	lr, [pc, #84]	; 2394 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>
    2340:	f043 0310 	orr.w	r3, r3, #16
    2344:	600b      	str	r3, [r1, #0]

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    2346:	680b      	ldr	r3, [r1, #0]
    2348:	f413 00e0 	ands.w	r0, r3, #7340032	; 0x700000
    234c:	d113      	bne.n	2376 <SDHC_CardWriteBlock(void const*, unsigned long)+0x96>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    234e:	4297      	cmp	r7, r2
    2350:	d1e4      	bne.n	231c <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    2352:	4910      	ldr	r1, [pc, #64]	; (2394 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    2354:	680b      	ldr	r3, [r1, #0]
    2356:	4a0f      	ldr	r2, [pc, #60]	; (2394 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    2358:	079b      	lsls	r3, r3, #30
    235a:	d5fb      	bpl.n	2354 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    235c:	4b13      	ldr	r3, [pc, #76]	; (23ac <SDHC_CardWriteBlock(void const*, unsigned long)+0xcc>)
    235e:	6013      	str	r3, [r2, #0]

  return result;
    2360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    2362:	6813      	ldr	r3, [r2, #0]
    2364:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    2368:	f043 0310 	orr.w	r3, r3, #16
    236c:	6013      	str	r3, [r2, #0]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    236e:	f7ff fd39 	bl	1de4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    2372:	2001      	movs	r0, #1
    2374:	e7ed      	b.n	2352 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    2376:	f8de 3000 	ldr.w	r3, [lr]
    237a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    237e:	f043 0310 	orr.w	r3, r3, #16
    2382:	f8ce 3000 	str.w	r3, [lr]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    2386:	f7ff fd2d 	bl	1de4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    238a:	2001      	movs	r0, #1
    238c:	e7e1      	b.n	2352 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    238e:	bf00      	nop
    2390:	1fff13e8 	.word	0x1fff13e8
    2394:	400b1030 	.word	0x400b1030
    2398:	400b1008 	.word	0x400b1008
    239c:	400b1004 	.word	0x400b1004
    23a0:	183a0000 	.word	0x183a0000
    23a4:	400b1010 	.word	0x400b1010
    23a8:	400b1020 	.word	0x400b1020
    23ac:	01000012 	.word	0x01000012

000023b0 <spiInit(unsigned char)>:
static void spiBegin() {
  SIM_SCGC6 |= SIM_SCGC6_SPI0;
}

static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    23b0:	2805      	cmp	r0, #5
    23b2:	d822      	bhi.n	23fa <spiInit(unsigned char)+0x4a>
    23b4:	e8df f000 	tbb	[pc, r0]
    23b8:	150f0303 	.word	0x150f0303
    23bc:	091b      	.short	0x091b
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    23be:	4b12      	ldr	r3, [pc, #72]	; (2408 <spiInit(unsigned char)+0x58>)
    23c0:	4a12      	ldr	r2, [pc, #72]	; (240c <spiInit(unsigned char)+0x5c>)
    23c2:	601a      	str	r2, [r3, #0]
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    23c4:	4812      	ldr	r0, [pc, #72]	; (2410 <spiInit(unsigned char)+0x60>)
    23c6:	f001 bb4b 	b.w	3a60 <SPIClass::begin()>
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    23ca:	4b0f      	ldr	r3, [pc, #60]	; (2408 <spiInit(unsigned char)+0x58>)
    23cc:	4a11      	ldr	r2, [pc, #68]	; (2414 <spiInit(unsigned char)+0x64>)
    23ce:	601a      	str	r2, [r3, #0]
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    23d0:	480f      	ldr	r0, [pc, #60]	; (2410 <spiInit(unsigned char)+0x60>)
    23d2:	f001 bb45 	b.w	3a60 <SPIClass::begin()>
static void spiInit(uint8_t spiRate) {
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    23d6:	4b0c      	ldr	r3, [pc, #48]	; (2408 <spiInit(unsigned char)+0x58>)
    23d8:	4a0f      	ldr	r2, [pc, #60]	; (2418 <spiInit(unsigned char)+0x68>)
    23da:	601a      	str	r2, [r3, #0]
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    23dc:	480c      	ldr	r0, [pc, #48]	; (2410 <spiInit(unsigned char)+0x60>)
    23de:	f001 bb3f 	b.w	3a60 <SPIClass::begin()>
  switch (spiRate) {
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    23e2:	4b09      	ldr	r3, [pc, #36]	; (2408 <spiInit(unsigned char)+0x58>)
    23e4:	4a0d      	ldr	r2, [pc, #52]	; (241c <spiInit(unsigned char)+0x6c>)
    23e6:	601a      	str	r2, [r3, #0]
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    23e8:	4809      	ldr	r0, [pc, #36]	; (2410 <spiInit(unsigned char)+0x60>)
    23ea:	f001 bb39 	b.w	3a60 <SPIClass::begin()>
    // the top 2 speeds are set to 24 MHz, for the SD library defaults
    case 0:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    23ee:	4b06      	ldr	r3, [pc, #24]	; (2408 <spiInit(unsigned char)+0x58>)
    23f0:	4a0b      	ldr	r2, [pc, #44]	; (2420 <spiInit(unsigned char)+0x70>)
    23f2:	601a      	str	r2, [r3, #0]
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
  }
  SPI.begin();
    23f4:	4806      	ldr	r0, [pc, #24]	; (2410 <spiInit(unsigned char)+0x60>)
    23f6:	f001 bb33 	b.w	3a60 <SPIClass::begin()>
    case 1:  settings = SPISettings(24000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(8000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(3000000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(400000, MSBFIRST, SPI_MODE0);
    23fa:	4b03      	ldr	r3, [pc, #12]	; (2408 <spiInit(unsigned char)+0x58>)
    23fc:	4a09      	ldr	r2, [pc, #36]	; (2424 <spiInit(unsigned char)+0x74>)
    23fe:	601a      	str	r2, [r3, #0]
  }
  SPI.begin();
    2400:	4803      	ldr	r0, [pc, #12]	; (2410 <spiInit(unsigned char)+0x60>)
    2402:	f001 bb2d 	b.w	3a60 <SPIClass::begin()>
    2406:	bf00      	nop
    2408:	1fff13f8 	.word	0x1fff13f8
    240c:	b8010000 	.word	0xb8010000
    2410:	1fff073c 	.word	0x1fff073c
    2414:	38003004 	.word	0x38003004
    2418:	38001001 	.word	0x38001001
    241c:	38002003 	.word	0x38002003
    2420:	38020001 	.word	0x38020001
    2424:	38015006 	.word	0x38015006

00002428 <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    2428:	b510      	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    242a:	2101      	movs	r1, #1
    242c:	7800      	ldrb	r0, [r0, #0]
    242e:	f001 fc61 	bl	3cf4 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    2432:	4a11      	ldr	r2, [pc, #68]	; (2478 <Sd2Card::chipSelectHigh()+0x50>)
    2434:	7813      	ldrb	r3, [r2, #0]
    2436:	b1c3      	cbz	r3, 246a <Sd2Card::chipSelectHigh()+0x42>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    2438:	4910      	ldr	r1, [pc, #64]	; (247c <Sd2Card::chipSelectHigh()+0x54>)
    243a:	7acb      	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    243c:	2400      	movs	r4, #0
    243e:	4618      	mov	r0, r3
    2440:	7014      	strb	r4, [r2, #0]
    2442:	b193      	cbz	r3, 246a <Sd2Card::chipSelectHigh()+0x42>
			if (interruptMasksUsed & 0x01) {
    2444:	07da      	lsls	r2, r3, #31
    2446:	d503      	bpl.n	2450 <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    2448:	4a0d      	ldr	r2, [pc, #52]	; (2480 <Sd2Card::chipSelectHigh()+0x58>)
    244a:	69c8      	ldr	r0, [r1, #28]
    244c:	6010      	str	r0, [r2, #0]
    244e:	4618      	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    2450:	079c      	lsls	r4, r3, #30
    2452:	d503      	bpl.n	245c <Sd2Card::chipSelectHigh()+0x34>
				NVIC_ISER1 = interruptSave[1];
    2454:	4b0b      	ldr	r3, [pc, #44]	; (2484 <Sd2Card::chipSelectHigh()+0x5c>)
    2456:	6a0a      	ldr	r2, [r1, #32]
    2458:	7ac8      	ldrb	r0, [r1, #11]
    245a:	601a      	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    245c:	0742      	lsls	r2, r0, #29
    245e:	d405      	bmi.n	246c <Sd2Card::chipSelectHigh()+0x44>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    2460:	0703      	lsls	r3, r0, #28
    2462:	d502      	bpl.n	246a <Sd2Card::chipSelectHigh()+0x42>
				NVIC_ISER3 = interruptSave[3];
    2464:	4b08      	ldr	r3, [pc, #32]	; (2488 <Sd2Card::chipSelectHigh()+0x60>)
    2466:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    2468:	601a      	str	r2, [r3, #0]
    246a:	bd10      	pop	{r4, pc}
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    246c:	4b07      	ldr	r3, [pc, #28]	; (248c <Sd2Card::chipSelectHigh()+0x64>)
    246e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    2470:	7ac8      	ldrb	r0, [r1, #11]
    2472:	601a      	str	r2, [r3, #0]
    2474:	e7f4      	b.n	2460 <Sd2Card::chipSelectHigh()+0x38>
    2476:	bf00      	nop
    2478:	1fff13fc 	.word	0x1fff13fc
    247c:	1fff073c 	.word	0x1fff073c
    2480:	e000e100 	.word	0xe000e100
    2484:	e000e104 	.word	0xe000e104
    2488:	e000e10c 	.word	0xe000e10c
    248c:	e000e108 	.word	0xe000e108

00002490 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    2490:	4b23      	ldr	r3, [pc, #140]	; (2520 <Sd2Card::chipSelectLow()+0x90>)
    2492:	781a      	ldrb	r2, [r3, #0]
    2494:	b11a      	cbz	r2, 249e <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    2496:	7800      	ldrb	r0, [r0, #0]
    2498:	2100      	movs	r1, #0
    249a:	f001 bc2b 	b.w	3cf4 <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    249e:	b470      	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    24a0:	4a20      	ldr	r2, [pc, #128]	; (2524 <Sd2Card::chipSelectLow()+0x94>)
    24a2:	4921      	ldr	r1, [pc, #132]	; (2528 <Sd2Card::chipSelectLow()+0x98>)
    24a4:	7ad4      	ldrb	r4, [r2, #11]
    24a6:	6809      	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    24a8:	2501      	movs	r5, #1
    24aa:	701d      	strb	r5, [r3, #0]
    24ac:	2c00      	cmp	r4, #0
    24ae:	d026      	beq.n	24fe <Sd2Card::chipSelectLow()+0x6e>
			__disable_irq();
    24b0:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    24b2:	7ad4      	ldrb	r4, [r2, #11]
    24b4:	07e6      	lsls	r6, r4, #31
    24b6:	4623      	mov	r3, r4
    24b8:	d506      	bpl.n	24c8 <Sd2Card::chipSelectLow()+0x38>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    24ba:	4d1c      	ldr	r5, [pc, #112]	; (252c <Sd2Card::chipSelectLow()+0x9c>)
    24bc:	68d3      	ldr	r3, [r2, #12]
    24be:	682e      	ldr	r6, [r5, #0]
    24c0:	4033      	ands	r3, r6
    24c2:	61d3      	str	r3, [r2, #28]
				NVIC_ICER0 = interruptSave[0];
    24c4:	602b      	str	r3, [r5, #0]
    24c6:	4623      	mov	r3, r4
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    24c8:	07a5      	lsls	r5, r4, #30
    24ca:	d506      	bpl.n	24da <Sd2Card::chipSelectLow()+0x4a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    24cc:	4d18      	ldr	r5, [pc, #96]	; (2530 <Sd2Card::chipSelectLow()+0xa0>)
    24ce:	6914      	ldr	r4, [r2, #16]
    24d0:	682e      	ldr	r6, [r5, #0]
    24d2:	7ad3      	ldrb	r3, [r2, #11]
    24d4:	4034      	ands	r4, r6
    24d6:	6214      	str	r4, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
    24d8:	602c      	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    24da:	075c      	lsls	r4, r3, #29
    24dc:	d506      	bpl.n	24ec <Sd2Card::chipSelectLow()+0x5c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    24de:	4d15      	ldr	r5, [pc, #84]	; (2534 <Sd2Card::chipSelectLow()+0xa4>)
    24e0:	6954      	ldr	r4, [r2, #20]
    24e2:	682e      	ldr	r6, [r5, #0]
    24e4:	7ad3      	ldrb	r3, [r2, #11]
    24e6:	4034      	ands	r4, r6
    24e8:	6254      	str	r4, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    24ea:	602c      	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    24ec:	071b      	lsls	r3, r3, #28
    24ee:	d505      	bpl.n	24fc <Sd2Card::chipSelectLow()+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    24f0:	4c11      	ldr	r4, [pc, #68]	; (2538 <Sd2Card::chipSelectLow()+0xa8>)
    24f2:	6993      	ldr	r3, [r2, #24]
    24f4:	6825      	ldr	r5, [r4, #0]
    24f6:	402b      	ands	r3, r5
    24f8:	6293      	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    24fa:	6023      	str	r3, [r4, #0]
			}
			#endif
			__enable_irq();
    24fc:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    24fe:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    2500:	68da      	ldr	r2, [r3, #12]
    2502:	428a      	cmp	r2, r1
    2504:	d007      	beq.n	2516 <Sd2Card::chipSelectLow()+0x86>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    2506:	4c0d      	ldr	r4, [pc, #52]	; (253c <Sd2Card::chipSelectLow()+0xac>)
    2508:	601c      	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    250a:	4a0d      	ldr	r2, [pc, #52]	; (2540 <Sd2Card::chipSelectLow()+0xb0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    250c:	60d9      	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    250e:	f041 4480 	orr.w	r4, r1, #1073741824	; 0x40000000
    2512:	611c      	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2514:	601a      	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    2516:	7800      	ldrb	r0, [r0, #0]
    2518:	2100      	movs	r1, #0
}
    251a:	bc70      	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    251c:	f001 bbea 	b.w	3cf4 <digitalWrite>
    2520:	1fff13fc 	.word	0x1fff13fc
    2524:	1fff073c 	.word	0x1fff073c
    2528:	1fff13f8 	.word	0x1fff13f8
    252c:	e000e180 	.word	0xe000e180
    2530:	e000e184 	.word	0xe000e184
    2534:	e000e188 	.word	0xe000e188
    2538:	e000e18c 	.word	0xe000e18c
    253c:	003f4001 	.word	0x003f4001
    2540:	803f0000 	.word	0x803f0000

00002544 <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    2544:	b4f0      	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2546:	4812      	ldr	r0, [pc, #72]	; (2590 <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2548:	4a12      	ldr	r2, [pc, #72]	; (2594 <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    254a:	6803      	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    254c:	b082      	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    254e:	4616      	mov	r6, r2
    2550:	9300      	str	r3, [sp, #0]
	return ret;
    2552:	9f00      	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2554:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    2558:	24ff      	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    255a:	6813      	ldr	r3, [r2, #0]
    255c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2560:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2562:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2564:	6354      	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2566:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2568:	2b00      	cmp	r3, #0
    256a:	dafc      	bge.n	2566 <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    256c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    256e:	b2db      	uxtb	r3, r3
    2570:	2bff      	cmp	r3, #255	; 0xff
    2572:	d009      	beq.n	2588 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2574:	6803      	ldr	r3, [r0, #0]
    2576:	9301      	str	r3, [sp, #4]
	return ret;
    2578:	9b01      	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    257a:	1bdb      	subs	r3, r3, r7
    257c:	428b      	cmp	r3, r1
    257e:	d3ec      	bcc.n	255a <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    2580:	2000      	movs	r0, #0
}
    2582:	b002      	add	sp, #8
    2584:	bcf0      	pop	{r4, r5, r6, r7}
    2586:	4770      	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    2588:	2001      	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    258a:	b002      	add	sp, #8
    258c:	bcf0      	pop	{r4, r5, r6, r7}
    258e:	4770      	bx	lr
    2590:	1fff1610 	.word	0x1fff1610
    2594:	4002c000 	.word	0x4002c000

00002598 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    2598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    259a:	460d      	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    259c:	f44f 7196 	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    25a0:	4616      	mov	r6, r2
    25a2:	4604      	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    25a4:	f7ff ffce 	bl	2544 <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    25a8:	4b28      	ldr	r3, [pc, #160]	; (264c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    25aa:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    25ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    25b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    25b4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    25b8:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    25ba:	62d8      	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    25bc:	461a      	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    25be:	6359      	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    25c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    25c2:	2b00      	cmp	r3, #0
    25c4:	dafc      	bge.n	25c0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    25c6:	4921      	ldr	r1, [pc, #132]	; (264c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    25c8:	2018      	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    25ca:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    25ce:	680a      	ldr	r2, [r1, #0]
    25d0:	fa26 f300 	lsr.w	r3, r6, r0
    25d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    25d8:	b2db      	uxtb	r3, r3
    25da:	600a      	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    25dc:	62cf      	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    25de:	634b      	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    25e0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    25e2:	2b00      	cmp	r3, #0
    25e4:	dafc      	bge.n	25e0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    25e6:	3808      	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    25e8:	f110 0f08 	cmn.w	r0, #8
    25ec:	d1ef      	bne.n	25ce <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    25ee:	b355      	cbz	r5, 2646 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    25f0:	2d08      	cmp	r5, #8
    25f2:	bf0c      	ite	eq
    25f4:	2187      	moveq	r1, #135	; 0x87
    25f6:	21ff      	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    25f8:	4b14      	ldr	r3, [pc, #80]	; (264c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    25fa:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    25fc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2604:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2606:	62d8      	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2608:	461a      	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    260a:	6359      	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    260c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    260e:	2b00      	cmp	r3, #0
    2610:	dafc      	bge.n	260c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2612:	4a0e      	ldr	r2, [pc, #56]	; (264c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2614:	2700      	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2616:	4616      	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2618:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    261c:	21ff      	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    261e:	6813      	ldr	r3, [r2, #0]
    2620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2624:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2626:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2628:	6351      	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    262a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    262c:	2b00      	cmp	r3, #0
    262e:	dafc      	bge.n	262a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    2630:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2632:	b2d8      	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    2634:	061b      	lsls	r3, r3, #24
    2636:	7060      	strb	r0, [r4, #1]
    2638:	d400      	bmi.n	263c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    263a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    263c:	3701      	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    263e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    2642:	d1ec      	bne.n	261e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    2644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2646:	2195      	movs	r1, #149	; 0x95
    2648:	e7d6      	b.n	25f8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    264a:	bf00      	nop
    264c:	4002c000 	.word	0x4002c000

00002650 <Sd2Card::SD_init(unsigned char, unsigned char)>:
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    2650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  type_ = 0;
    2654:	2300      	movs	r3, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2656:	4e9d      	ldr	r6, [pc, #628]	; (28cc <Sd2Card::SD_init(unsigned char, unsigned char)+0x27c>)
  chipSelectPin_ = chipSelectPin;
    2658:	7002      	strb	r2, [r0, #0]
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    265a:	b085      	sub	sp, #20
  type_ = 0;
    265c:	7083      	strb	r3, [r0, #2]
    265e:	6833      	ldr	r3, [r6, #0]
    2660:	9301      	str	r3, [sp, #4]
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    2662:	4605      	mov	r5, r0
    2664:	4688      	mov	r8, r1
  chipSelectPin_ = chipSelectPin;
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  digitalWrite(chipSelectPin_, HIGH);
    2666:	4610      	mov	r0, r2
    2668:	2101      	movs	r1, #1
	return ret;
    266a:	9f01      	ldr	r7, [sp, #4]
    266c:	f001 fb42 	bl	3cf4 <digitalWrite>
  pinMode(chipSelectPin_, OUTPUT);
    2670:	7828      	ldrb	r0, [r5, #0]
    2672:	2101      	movs	r1, #1
    2674:	f001 fb44 	bl	3d00 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    2678:	7828      	ldrb	r0, [r5, #0]
    267a:	2101      	movs	r1, #1
    267c:	f001 fb3a 	bl	3cf4 <digitalWrite>
#ifndef SPI_PUSHR_CTAS
#define SPI_PUSHR_CTAS(n) (((n) & 7) << 28)
#endif  // SPI_PUSHR_CTAS

static void spiBegin() {
  SIM_SCGC6 |= SIM_SCGC6_SPI0;
    2680:	4a93      	ldr	r2, [pc, #588]	; (28d0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x280>)
    2682:	6813      	ldr	r3, [r2, #0]
    2684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2688:	6013      	str	r3, [r2, #0]
  pinMode(chipSelectPin_, OUTPUT);
  digitalWrite(chipSelectPin_, HIGH);

#if defined(USE_TEENSY3_SPI)
  spiBegin();
  spiInit(6);
    268a:	2006      	movs	r0, #6
    268c:	f7ff fe90 	bl	23b0 <spiInit(unsigned char)>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2690:	f8df e270 	ldr.w	lr, [pc, #624]	; 2904 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2b4>
    2694:	4b8f      	ldr	r3, [pc, #572]	; (28d4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x284>)
    2696:	f89e c00b 	ldrb.w	ip, [lr, #11]
    269a:	681a      	ldr	r2, [r3, #0]
    269c:	f1bc 0f00 	cmp.w	ip, #0
    26a0:	d02c      	beq.n	26fc <Sd2Card::SD_init(unsigned char, unsigned char)+0xac>
			__disable_irq();
    26a2:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    26a4:	f89e 100b 	ldrb.w	r1, [lr, #11]
    26a8:	07c8      	lsls	r0, r1, #31
    26aa:	460b      	mov	r3, r1
    26ac:	d508      	bpl.n	26c0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x70>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    26ae:	488a      	ldr	r0, [pc, #552]	; (28d8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x288>)
    26b0:	f8de 300c 	ldr.w	r3, [lr, #12]
    26b4:	6804      	ldr	r4, [r0, #0]
    26b6:	4023      	ands	r3, r4
    26b8:	f8ce 301c 	str.w	r3, [lr, #28]
				NVIC_ICER0 = interruptSave[0];
    26bc:	6003      	str	r3, [r0, #0]
    26be:	460b      	mov	r3, r1
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    26c0:	078c      	lsls	r4, r1, #30
    26c2:	d509      	bpl.n	26d8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x88>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    26c4:	4885      	ldr	r0, [pc, #532]	; (28dc <Sd2Card::SD_init(unsigned char, unsigned char)+0x28c>)
    26c6:	f8de 1010 	ldr.w	r1, [lr, #16]
    26ca:	6804      	ldr	r4, [r0, #0]
    26cc:	f89e 300b 	ldrb.w	r3, [lr, #11]
    26d0:	4021      	ands	r1, r4
    26d2:	f8ce 1020 	str.w	r1, [lr, #32]
				NVIC_ICER1 = interruptSave[1];
    26d6:	6001      	str	r1, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    26d8:	0758      	lsls	r0, r3, #29
    26da:	d509      	bpl.n	26f0 <Sd2Card::SD_init(unsigned char, unsigned char)+0xa0>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    26dc:	4880      	ldr	r0, [pc, #512]	; (28e0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x290>)
    26de:	f8de 1014 	ldr.w	r1, [lr, #20]
    26e2:	6804      	ldr	r4, [r0, #0]
    26e4:	f89e 300b 	ldrb.w	r3, [lr, #11]
    26e8:	4021      	ands	r1, r4
    26ea:	f8ce 1024 	str.w	r1, [lr, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    26ee:	6001      	str	r1, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    26f0:	0719      	lsls	r1, r3, #28
    26f2:	f100 80ab 	bmi.w	284c <Sd2Card::SD_init(unsigned char, unsigned char)+0x1fc>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    26f6:	b662      	cpsie	i
    26f8:	f89e c00b 	ldrb.w	ip, [lr, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    26fc:	f8de 3000 	ldr.w	r3, [lr]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    2700:	68d9      	ldr	r1, [r3, #12]
    2702:	4291      	cmp	r1, r2
    2704:	d007      	beq.n	2716 <Sd2Card::SD_init(unsigned char, unsigned char)+0xc6>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    2706:	4877      	ldr	r0, [pc, #476]	; (28e4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x294>)
    2708:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    270a:	4977      	ldr	r1, [pc, #476]	; (28e8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x298>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    270c:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    270e:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    2712:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2714:	6019      	str	r1, [r3, #0]
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2716:	4a75      	ldr	r2, [pc, #468]	; (28ec <Sd2Card::SD_init(unsigned char, unsigned char)+0x29c>)
 * \param[in] chipSelectPin SD chip select pin number.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_init(uint8_t sckRateID, uint8_t chipSelectPin) {
    2718:	240a      	movs	r4, #10
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    271a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  SPI0_PUSHR = b;
    271e:	21ff      	movs	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2720:	6813      	ldr	r3, [r2, #0]
    2722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2726:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2728:	62d0      	str	r0, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    272a:	6351      	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    272c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    272e:	2b00      	cmp	r3, #0
    2730:	dafc      	bge.n	272c <Sd2Card::SD_init(unsigned char, unsigned char)+0xdc>
    2732:	3c01      	subs	r4, #1
#endif  // not USE_TEENSY3_SPI
  // must supply min of 74 clock cycles with CS high.
#ifdef SPI_HAS_TRANSACTION
  SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    2734:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2738:	d1f2      	bne.n	2720 <Sd2Card::SD_init(unsigned char, unsigned char)+0xd0>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    273a:	f1bc 0f00 	cmp.w	ip, #0
    273e:	d021      	beq.n	2784 <Sd2Card::SD_init(unsigned char, unsigned char)+0x134>
			if (interruptMasksUsed & 0x01) {
    2740:	f01c 0f01 	tst.w	ip, #1
    2744:	d005      	beq.n	2752 <Sd2Card::SD_init(unsigned char, unsigned char)+0x102>
				NVIC_ISER0 = interruptSave[0];
    2746:	4b6a      	ldr	r3, [pc, #424]	; (28f0 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2a0>)
    2748:	f8de 201c 	ldr.w	r2, [lr, #28]
    274c:	f89e c00b 	ldrb.w	ip, [lr, #11]
    2750:	601a      	str	r2, [r3, #0]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    2752:	f01c 0f02 	tst.w	ip, #2
    2756:	d005      	beq.n	2764 <Sd2Card::SD_init(unsigned char, unsigned char)+0x114>
				NVIC_ISER1 = interruptSave[1];
    2758:	4b66      	ldr	r3, [pc, #408]	; (28f4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2a4>)
    275a:	f8de 2020 	ldr.w	r2, [lr, #32]
    275e:	f89e c00b 	ldrb.w	ip, [lr, #11]
    2762:	601a      	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    2764:	f01c 0f04 	tst.w	ip, #4
    2768:	d005      	beq.n	2776 <Sd2Card::SD_init(unsigned char, unsigned char)+0x126>
				NVIC_ISER2 = interruptSave[2];
    276a:	4b63      	ldr	r3, [pc, #396]	; (28f8 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2a8>)
    276c:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
    2770:	f89e c00b 	ldrb.w	ip, [lr, #11]
    2774:	601a      	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    2776:	f01c 0f08 	tst.w	ip, #8
    277a:	d003      	beq.n	2784 <Sd2Card::SD_init(unsigned char, unsigned char)+0x134>
				NVIC_ISER3 = interruptSave[3];
    277c:	4b5f      	ldr	r3, [pc, #380]	; (28fc <Sd2Card::SD_init(unsigned char, unsigned char)+0x2ac>)
    277e:	f8de 2028 	ldr.w	r2, [lr, #40]	; 0x28
    2782:	601a      	str	r2, [r3, #0]
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
    2784:	4628      	mov	r0, r5
    2786:	f7ff fe83 	bl	2490 <Sd2Card::chipSelectLow()>
    278a:	e006      	b.n	279a <Sd2Card::SD_init(unsigned char, unsigned char)+0x14a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    278c:	6833      	ldr	r3, [r6, #0]
    278e:	9302      	str	r3, [sp, #8]
	return ret;
    2790:	9b02      	ldr	r3, [sp, #8]
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    2792:	1bdb      	subs	r3, r3, r7
    2794:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2798:	d851      	bhi.n	283e <Sd2Card::SD_init(unsigned char, unsigned char)+0x1ee>
#ifdef SPI_HAS_TRANSACTION
  SPI.endTransaction();
#endif
  chipSelectLow();
  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    279a:	2200      	movs	r2, #0
    279c:	4611      	mov	r1, r2
    279e:	4628      	mov	r0, r5
    27a0:	f7ff fefa 	bl	2598 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    27a4:	2801      	cmp	r0, #1
    27a6:	4681      	mov	r9, r0
    27a8:	7068      	strb	r0, [r5, #1]
    27aa:	d1ef      	bne.n	278c <Sd2Card::SD_init(unsigned char, unsigned char)+0x13c>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_CMD0
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    27ac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    27b0:	2108      	movs	r1, #8
    27b2:	4628      	mov	r0, r5
    27b4:	f7ff fef0 	bl	2598 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    27b8:	0743      	lsls	r3, r0, #29
    27ba:	d526      	bpl.n	280a <Sd2Card::SD_init(unsigned char, unsigned char)+0x1ba>
    type_ = SD_CARD_TYPE_SD1;
    27bc:	f885 9002 	strb.w	r9, [r5, #2]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    27c0:	f04f 0900 	mov.w	r9, #0
    27c4:	e006      	b.n	27d4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x184>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27c6:	6833      	ldr	r3, [r6, #0]
    27c8:	9303      	str	r3, [sp, #12]
	return ret;
    27ca:	9b03      	ldr	r3, [sp, #12]
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    27cc:	1bdb      	subs	r3, r3, r7
    27ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    27d2:	d834      	bhi.n	283e <Sd2Card::SD_init(unsigned char, unsigned char)+0x1ee>
  // private functions
  uint8_t SD_init(uint8_t sckRateID, uint8_t chipSelectPin);
  uint8_t SD_readBlock(uint32_t block, uint8_t* dst);
  uint8_t SD_writeBlock(uint32_t blockNumber, const uint8_t* src);
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    27d4:	2200      	movs	r2, #0
    27d6:	2137      	movs	r1, #55	; 0x37
    27d8:	4628      	mov	r0, r5
    27da:	f7ff fedd 	bl	2598 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    27de:	464a      	mov	r2, r9
    27e0:	2129      	movs	r1, #41	; 0x29
    27e2:	4628      	mov	r0, r5
    27e4:	f7ff fed8 	bl	2598 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    27e8:	7068      	strb	r0, [r5, #1]
    27ea:	2800      	cmp	r0, #0
    27ec:	d1eb      	bne.n	27c6 <Sd2Card::SD_init(unsigned char, unsigned char)+0x176>
    if (d > SD_INIT_TIMEOUT) {
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    27ee:	78ab      	ldrb	r3, [r5, #2]
    27f0:	2b02      	cmp	r3, #2
    27f2:	d039      	beq.n	2868 <Sd2Card::SD_init(unsigned char, unsigned char)+0x218>
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
    27f4:	4628      	mov	r0, r5
    27f6:	f7ff fe17 	bl	2428 <Sd2Card::chipSelectHigh()>
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
#if defined(USE_TEENSY3_SPI) || defined(USE_TEENSY4_SPI)
  spiInit(sckRateID);
    27fa:	4640      	mov	r0, r8
    27fc:	f7ff fdd8 	bl	23b0 <spiInit(unsigned char)>
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  chipSelectHigh();
  return setSckRate(sckRateID);
    2800:	2401      	movs	r4, #1

fail:
  chipSelectHigh();
  return false;
}
    2802:	4620      	mov	r0, r4
    2804:	b005      	add	sp, #20
    2806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    280a:	4a38      	ldr	r2, [pc, #224]	; (28ec <Sd2Card::SD_init(unsigned char, unsigned char)+0x29c>)
    280c:	2104      	movs	r1, #4
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    280e:	4694      	mov	ip, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2810:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    2814:	20ff      	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2816:	6813      	ldr	r3, [r2, #0]
    2818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    281c:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    281e:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2822:	6350      	str	r0, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2824:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2826:	2b00      	cmp	r3, #0
    2828:	dafc      	bge.n	2824 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1d4>
  return SPI0_POPR;
    282a:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
    282e:	3901      	subs	r1, #1
    2830:	b2db      	uxtb	r3, r3
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type_ = SD_CARD_TYPE_SD1;
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    2832:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    2836:	706b      	strb	r3, [r5, #1]
    2838:	d1ed      	bne.n	2816 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1c6>
    if (status_ != 0XAA) {
    283a:	2baa      	cmp	r3, #170	; 0xaa
    283c:	d00f      	beq.n	285e <Sd2Card::SD_init(unsigned char, unsigned char)+0x20e>
  }
  chipSelectHigh();
  return setSckRate(sckRateID);

fail:
  chipSelectHigh();
    283e:	4628      	mov	r0, r5
    2840:	f7ff fdf2 	bl	2428 <Sd2Card::chipSelectHigh()>
  return false;
}
    2844:	4620      	mov	r0, r4
    2846:	b005      	add	sp, #20
    2848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    284c:	492c      	ldr	r1, [pc, #176]	; (2900 <Sd2Card::SD_init(unsigned char, unsigned char)+0x2b0>)
    284e:	f8de 3018 	ldr.w	r3, [lr, #24]
    2852:	6808      	ldr	r0, [r1, #0]
    2854:	4003      	ands	r3, r0
    2856:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    285a:	600b      	str	r3, [r1, #0]
    285c:	e74b      	b.n	26f6 <Sd2Card::SD_init(unsigned char, unsigned char)+0xa6>
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    if (status_ != 0XAA) {
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
    285e:	2302      	movs	r3, #2
    2860:	70ab      	strb	r3, [r5, #2]
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    2862:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
    2866:	e7b5      	b.n	27d4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x184>
      goto fail; // SD_CARD_ERROR_ACMD41
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    2868:	4602      	mov	r2, r0
    286a:	213a      	movs	r1, #58	; 0x3a
    286c:	4628      	mov	r0, r5
    286e:	f7ff fe93 	bl	2598 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2872:	2800      	cmp	r0, #0
    2874:	d1e3      	bne.n	283e <Sd2Card::SD_init(unsigned char, unsigned char)+0x1ee>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2876:	4b1d      	ldr	r3, [pc, #116]	; (28ec <Sd2Card::SD_init(unsigned char, unsigned char)+0x29c>)
    2878:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    287a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    287e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    2882:	20ff      	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2884:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2886:	4619      	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2888:	62dc      	str	r4, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    288a:	6358      	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    288c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    288e:	4a17      	ldr	r2, [pc, #92]	; (28ec <Sd2Card::SD_init(unsigned char, unsigned char)+0x29c>)
    2890:	2b00      	cmp	r3, #0
    2892:	dafb      	bge.n	288c <Sd2Card::SD_init(unsigned char, unsigned char)+0x23c>
  return SPI0_POPR;
    2894:	6b93      	ldr	r3, [r2, #56]	; 0x38
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2896:	4a15      	ldr	r2, [pc, #84]	; (28ec <Sd2Card::SD_init(unsigned char, unsigned char)+0x29c>)
  // if SD2 read OCR register to check for SDHC card
  if (type_ == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    2898:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    289c:	2bc0      	cmp	r3, #192	; 0xc0
    289e:	bf04      	itt	eq
    28a0:	2303      	moveq	r3, #3
    28a2:	70ab      	strbeq	r3, [r5, #2]
      goto fail; // SD_CARD_ERROR_CMD8
    }
    type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = (type_ == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    28a4:	2103      	movs	r1, #3
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    28a6:	4616      	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    28a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    28ac:	20ff      	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    28ae:	6813      	ldr	r3, [r2, #0]
    28b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    28b4:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    28b6:	62d4      	str	r4, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    28b8:	6350      	str	r0, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    28ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    28bc:	2b00      	cmp	r3, #0
    28be:	dafc      	bge.n	28ba <Sd2Card::SD_init(unsigned char, unsigned char)+0x26a>
    28c0:	3901      	subs	r1, #1
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    28c2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
  return SPI0_POPR;
    28c6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    if (cardCommand(CMD58, 0)) {
      goto fail; // SD_CARD_ERROR_CMD58
    }
    if ((spiRec() & 0XC0) == 0XC0) type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    28c8:	d1f1      	bne.n	28ae <Sd2Card::SD_init(unsigned char, unsigned char)+0x25e>
    28ca:	e793      	b.n	27f4 <Sd2Card::SD_init(unsigned char, unsigned char)+0x1a4>
    28cc:	1fff1610 	.word	0x1fff1610
    28d0:	4004803c 	.word	0x4004803c
    28d4:	1fff13f8 	.word	0x1fff13f8
    28d8:	e000e180 	.word	0xe000e180
    28dc:	e000e184 	.word	0xe000e184
    28e0:	e000e188 	.word	0xe000e188
    28e4:	003f4001 	.word	0x003f4001
    28e8:	803f0000 	.word	0x803f0000
    28ec:	4002c000 	.word	0x4002c000
    28f0:	e000e100 	.word	0xe000e100
    28f4:	e000e104 	.word	0xe000e104
    28f8:	e000e108 	.word	0xe000e108
    28fc:	e000e10c 	.word	0xe000e10c
    2900:	e000e18c 	.word	0xe000e18c
    2904:	1fff073c 	.word	0x1fff073c

00002908 <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    2908:	b4f0      	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    290a:	4915      	ldr	r1, [pc, #84]	; (2960 <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    290c:	4a15      	ldr	r2, [pc, #84]	; (2964 <Sd2Card::waitStartBlock()+0x5c>)
    290e:	680b      	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    2910:	b082      	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2912:	4616      	mov	r6, r2
    2914:	9300      	str	r3, [sp, #0]
	return ret;
    2916:	9f00      	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2918:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    291c:	24ff      	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    291e:	6813      	ldr	r3, [r2, #0]
    2920:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2924:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2926:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2928:	6354      	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    292a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    292c:	2b00      	cmp	r3, #0
    292e:	dafc      	bge.n	292a <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    2930:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2932:	b2db      	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    2934:	2bff      	cmp	r3, #255	; 0xff
    2936:	7043      	strb	r3, [r0, #1]
    2938:	d10a      	bne.n	2950 <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    293a:	680b      	ldr	r3, [r1, #0]
    293c:	9301      	str	r3, [sp, #4]
	return ret;
    293e:	9b01      	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    2940:	1bdb      	subs	r3, r3, r7
    2942:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2946:	d9ea      	bls.n	291e <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2948:	2000      	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    294a:	b002      	add	sp, #8
    294c:	bcf0      	pop	{r4, r5, r6, r7}
    294e:	4770      	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2950:	f1a3 00fe 	sub.w	r0, r3, #254	; 0xfe
    2954:	fab0 f080 	clz	r0, r0
    2958:	0940      	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    295a:	b002      	add	sp, #8
    295c:	bcf0      	pop	{r4, r5, r6, r7}
    295e:	4770      	bx	lr
    2960:	1fff1610 	.word	0x1fff1610
    2964:	4002c000 	.word	0x4002c000

00002968 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    296a:	7883      	ldrb	r3, [r0, #2]
    296c:	2b03      	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    296e:	460e      	mov	r6, r1
    2970:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    2972:	bf18      	it	ne
    2974:	024e      	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2976:	4615      	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    2978:	f7ff fd8a 	bl	2490 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    297c:	4632      	mov	r2, r6
    297e:	2111      	movs	r1, #17
    2980:	4620      	mov	r0, r4
    2982:	f7ff fe09 	bl	2598 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2986:	b918      	cbnz	r0, 2990 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    2988:	4620      	mov	r0, r4
    298a:	f7ff ffbd 	bl	2908 <Sd2Card::waitStartBlock()>
    298e:	b920      	cbnz	r0, 299a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    2990:	4620      	mov	r0, r4
    2992:	f7ff fd49 	bl	2428 <Sd2Card::chipSelectHigh()>
  return false;
    2996:	2000      	movs	r0, #0
}
    2998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    299a:	4b20      	ldr	r3, [pc, #128]	; (2a1c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    299c:	4920      	ldr	r1, [pc, #128]	; (2a20 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    299e:	4a21      	ldr	r2, [pc, #132]	; (2a24 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    29a0:	601a      	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    29a2:	468e      	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    29a4:	6359      	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    29a6:	461a      	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    29a8:	6359      	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    29aa:	461e      	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    29ac:	6359      	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    29ae:	f505 70fd 	add.w	r0, r5, #506	; 0x1fa
    29b2:	1ca9      	adds	r1, r5, #2
    29b4:	f505 77fe 	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    29b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    29ba:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    29be:	d0fb      	beq.n	29b8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    29c0:	f8c6 e034 	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    29c4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    29c6:	f801 3c01 	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    29ca:	121b      	asrs	r3, r3, #8
    29cc:	f801 3c02 	strb.w	r3, [r1, #-2]
    29d0:	3102      	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    29d2:	428f      	cmp	r7, r1
    29d4:	d1f0      	bne.n	29b8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    29d6:	f505 7500 	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    29da:	42a8      	cmp	r0, r5
    29dc:	d20d      	bcs.n	29fa <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    29de:	4a0f      	ldr	r2, [pc, #60]	; (2a1c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    29e0:	4616      	mov	r6, r2
    29e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    29e4:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    29e8:	d0fb      	beq.n	29e2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    29ea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    29ec:	1219      	asrs	r1, r3, #8
    29ee:	f800 1b02 	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    29f2:	42a8      	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    29f4:	f800 3c01 	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    29f8:	d3f3      	bcc.n	29e2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    29fa:	4b08      	ldr	r3, [pc, #32]	; (2a1c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    29fc:	4909      	ldr	r1, [pc, #36]	; (2a24 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    29fe:	4a08      	ldr	r2, [pc, #32]	; (2a20 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2a00:	6019      	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2a02:	4619      	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2a04:	635a      	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2a06:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2a08:	4a04      	ldr	r2, [pc, #16]	; (2a1c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    2a0a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    2a0e:	d0fa      	beq.n	2a06 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    2a10:	4620      	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    2a12:	6b93      	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    2a14:	f7ff fd08 	bl	2428 <Sd2Card::chipSelectHigh()>
  return true;
    2a18:	2001      	movs	r0, #1
    2a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a1c:	4002c000 	.word	0x4002c000
    2a20:	9000ffff 	.word	0x9000ffff
    2a24:	801f0400 	.word	0x801f0400

00002a28 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    2a28:	b4f0      	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2a2a:	4e31      	ldr	r6, [pc, #196]	; (2af0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a2c:	6833      	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    2a2e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2a36:	6033      	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    2a38:	463d      	mov	r5, r7
    2a3a:	62f7      	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2a3c:	4634      	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    2a3e:	6371      	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2a40:	4633      	mov	r3, r6
    2a42:	1c51      	adds	r1, r2, #1
    2a44:	f202 2701 	addw	r7, r2, #513	; 0x201
    2a48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2a4a:	2a00      	cmp	r2, #0
    2a4c:	dafc      	bge.n	2a48 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2a4e:	681a      	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    2a50:	f811 6c01 	ldrb.w	r6, [r1, #-1]
    2a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2a58:	601a      	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    2a5a:	62dd      	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    2a5c:	635e      	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2a5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2a60:	2a00      	cmp	r2, #0
    2a62:	dafc      	bge.n	2a5e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2a64:	681a      	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    2a66:	f811 6b02 	ldrb.w	r6, [r1], #2
    2a6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    2a6e:	428f      	cmp	r7, r1
    2a70:	601a      	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    2a72:	62dd      	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    2a74:	635e      	str	r6, [r3, #52]	; 0x34
    2a76:	d1e7      	bne.n	2a48 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2a78:	491d      	ldr	r1, [pc, #116]	; (2af0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a7a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    2a7c:	4b1c      	ldr	r3, [pc, #112]	; (2af0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a7e:	2a00      	cmp	r2, #0
    2a80:	dafb      	bge.n	2a7a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a82:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2a84:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2a8c:	24ff      	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a8e:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a90:	4619      	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2a92:	62dd      	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    2a94:	635c      	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2a96:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2a98:	4a15      	ldr	r2, [pc, #84]	; (2af0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	dafb      	bge.n	2a96 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2a9e:	6813      	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2aa0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2aa8:	24ff      	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2aaa:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2aac:	4611      	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2aae:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    2ab0:	6354      	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2ab2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2ab4:	4a0e      	ldr	r2, [pc, #56]	; (2af0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2ab6:	2b00      	cmp	r3, #0
    2ab8:	dafb      	bge.n	2ab2 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2aba:	6813      	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2abc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    2ac4:	24ff      	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2ac6:	6013      	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2ac8:	4611      	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2aca:	62d5      	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2acc:	6354      	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2ace:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2ad0:	4a07      	ldr	r2, [pc, #28]	; (2af0 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	dafb      	bge.n	2ace <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    2ad6:	6b93      	ldr	r3, [r2, #56]	; 0x38
    2ad8:	b2db      	uxtb	r3, r3
    2ada:	f003 021f 	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    2ade:	7043      	strb	r3, [r0, #1]
    2ae0:	f1a2 0005 	sub.w	r0, r2, #5
    2ae4:	fab0 f080 	clz	r0, r0
    2ae8:	0940      	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    2aea:	bcf0      	pop	{r4, r5, r6, r7}
    2aec:	4770      	bx	lr
    2aee:	bf00      	nop
    2af0:	4002c000 	.word	0x4002c000

00002af4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    2af4:	b570      	push	{r4, r5, r6, lr}
    2af6:	4604      	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    2af8:	b171      	cbz	r1, 2b18 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    2afa:	7883      	ldrb	r3, [r0, #2]
    2afc:	2b03      	cmp	r3, #3
    2afe:	460d      	mov	r5, r1
    2b00:	bf18      	it	ne
    2b02:	024d      	lslne	r5, r1, #9
    2b04:	4616      	mov	r6, r2
  chipSelectLow();
    2b06:	f7ff fcc3 	bl	2490 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    2b0a:	462a      	mov	r2, r5
    2b0c:	2118      	movs	r1, #24
    2b0e:	4620      	mov	r0, r4
    2b10:	f7ff fd42 	bl	2598 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2b14:	4605      	mov	r5, r0
    2b16:	b120      	cbz	r0, 2b22 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    2b18:	4620      	mov	r0, r4
    2b1a:	f7ff fc85 	bl	2428 <Sd2Card::chipSelectHigh()>
  return false;
    2b1e:	2000      	movs	r0, #0
}
    2b20:	bd70      	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    2b22:	4632      	mov	r2, r6
    2b24:	21fe      	movs	r1, #254	; 0xfe
    2b26:	4620      	mov	r0, r4
    2b28:	f7ff ff7e 	bl	2a28 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d0f3      	beq.n	2b18 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    2b30:	f44f 7116 	mov.w	r1, #600	; 0x258
    2b34:	4620      	mov	r0, r4
    2b36:	f7ff fd05 	bl	2544 <Sd2Card::waitNotBusy(unsigned int)>
    2b3a:	2800      	cmp	r0, #0
    2b3c:	d0ec      	beq.n	2b18 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    2b3e:	462a      	mov	r2, r5
    2b40:	210d      	movs	r1, #13
    2b42:	4620      	mov	r0, r4
    2b44:	f7ff fd28 	bl	2598 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2b48:	2800      	cmp	r0, #0
    2b4a:	d1e5      	bne.n	2b18 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2b4c:	4b0b      	ldr	r3, [pc, #44]	; (2b7c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    2b4e:	681a      	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2b50:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    2b58:	20ff      	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2b5a:	601a      	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2b5c:	4619      	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2b5e:	62dd      	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2b60:	6358      	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2b62:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2b64:	4a05      	ldr	r2, [pc, #20]	; (2b7c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    2b66:	2b00      	cmp	r3, #0
    2b68:	dafb      	bge.n	2b62 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    2b6a:	6b93      	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    2b6c:	f013 0fff 	tst.w	r3, #255	; 0xff
    2b70:	d1d2      	bne.n	2b18 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    2b72:	4620      	mov	r0, r4
    2b74:	f7ff fc58 	bl	2428 <Sd2Card::chipSelectHigh()>
  return true;
    2b78:	2001      	movs	r0, #1
    2b7a:	bd70      	pop	{r4, r5, r6, pc}
    2b7c:	4002c000 	.word	0x4002c000

00002b80 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2b80:	4b01      	ldr	r3, [pc, #4]	; (2b88 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    2b82:	4a02      	ldr	r2, [pc, #8]	; (2b8c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    2b84:	601a      	str	r2, [r3, #0]
    2b86:	4770      	bx	lr
    2b88:	1fff13f8 	.word	0x1fff13f8
    2b8c:	38002003 	.word	0x38002003

00002b90 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    2b90:	b538      	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    2b92:	f990 3005 	ldrsb.w	r3, [r0, #5]
    2b96:	2b00      	cmp	r3, #0
    2b98:	db03      	blt.n	2ba2 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    2b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    2b9e:	f000 bc49 	b.w	3434 <SdVolume::cacheFlush()>
    2ba2:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    2ba4:	2101      	movs	r1, #1
    2ba6:	6900      	ldr	r0, [r0, #16]
    2ba8:	f000 fc84 	bl	34b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2bac:	b1f8      	cbz	r0, 2bee <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    2bae:	7d25      	ldrb	r5, [r4, #20]
    2bb0:	4b10      	ldr	r3, [pc, #64]	; (2bf4 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    2bb2:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    2bb6:	d01a      	beq.n	2bee <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    2bb8:	79a3      	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2bba:	4a0f      	ldr	r2, [pc, #60]	; (2bf8 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    2bbc:	2b01      	cmp	r3, #1
    2bbe:	bf9c      	itt	ls
    2bc0:	69a3      	ldrls	r3, [r4, #24]
    2bc2:	61eb      	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2bc4:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2bc6:	6812      	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2bc8:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    2bca:	0c1b      	lsrs	r3, r3, #16
    2bcc:	82ab      	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2bce:	b132      	cbz	r2, 2bde <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    2bd0:	f105 0116 	add.w	r1, r5, #22
    2bd4:	f105 0018 	add.w	r0, r5, #24
    2bd8:	4790      	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    2bda:	8b2b      	ldrh	r3, [r5, #24]
    2bdc:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    2bde:	7963      	ldrb	r3, [r4, #5]
    2be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2be4:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    2be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    2bea:	f000 bc23 	b.w	3434 <SdVolume::cacheFlush()>
}
    2bee:	2000      	movs	r0, #0
    2bf0:	bd38      	pop	{r3, r4, r5, pc}
    2bf2:	bf00      	nop
    2bf4:	1fff140c 	.word	0x1fff140c
    2bf8:	1fff1400 	.word	0x1fff1400

00002bfc <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    2bfc:	b510      	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    2bfe:	f100 0208 	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    2c02:	4604      	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    2c04:	2101      	movs	r1, #1
    2c06:	6a00      	ldr	r0, [r0, #32]
    2c08:	f000 fd48 	bl	369c <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    2c0c:	b150      	cbz	r0, 2c24 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    2c0e:	69e3      	ldr	r3, [r4, #28]
    2c10:	b93b      	cbnz	r3, 2c22 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    2c12:	7963      	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    2c14:	68a2      	ldr	r2, [r4, #8]
    2c16:	61e2      	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    2c18:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c1c:	7163      	strb	r3, [r4, #5]
    2c1e:	2001      	movs	r0, #1
    2c20:	bd10      	pop	{r4, pc}
  }
  return true;
    2c22:	2001      	movs	r0, #1
}
    2c24:	bd10      	pop	{r4, pc}
    2c26:	bf00      	nop

00002c28 <SdFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    2c28:	b570      	push	{r4, r5, r6, lr}
    2c2a:	4606      	mov	r6, r0
  if (!addCluster()) return false;
    2c2c:	f7ff ffe6 	bl	2bfc <SdFile::addCluster()>
    2c30:	b198      	cbz	r0, 2c5a <SdFile::addDirCluster()+0x32>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    2c32:	6a32      	ldr	r2, [r6, #32]
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    2c34:	68b5      	ldr	r5, [r6, #8]
    2c36:	7c11      	ldrb	r1, [r2, #16]
    2c38:	6953      	ldr	r3, [r2, #20]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    2c3a:	7914      	ldrb	r4, [r2, #4]
    2c3c:	3d02      	subs	r5, #2
    2c3e:	408d      	lsls	r5, r1
    2c40:	3b01      	subs	r3, #1
    2c42:	b174      	cbz	r4, 2c62 <SdFile::addDirCluster()+0x3a>
    2c44:	441d      	add	r5, r3
    2c46:	e002      	b.n	2c4e <SdFile::addDirCluster()+0x26>
    2c48:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2c4c:	d007      	beq.n	2c5e <SdFile::addDirCluster()+0x36>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    2c4e:	1960      	adds	r0, r4, r5
    2c50:	f000 fca0 	bl	3594 <SdVolume::cacheZeroBlock(unsigned long)>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    2c54:	3c01      	subs	r4, #1
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    2c56:	2800      	cmp	r0, #0
    2c58:	d1f6      	bne.n	2c48 <SdFile::addDirCluster()+0x20>
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;
    2c5a:	2000      	movs	r0, #0
    2c5c:	bd70      	pop	{r4, r5, r6, pc}
    2c5e:	6a33      	ldr	r3, [r6, #32]
    2c60:	7c19      	ldrb	r1, [r3, #16]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    2c62:	69b0      	ldr	r0, [r6, #24]
    2c64:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c68:	fa02 f301 	lsl.w	r3, r2, r1
    2c6c:	4403      	add	r3, r0
    2c6e:	61b3      	str	r3, [r6, #24]
    2c70:	2001      	movs	r0, #1
  return true;
}
    2c72:	bd70      	pop	{r4, r5, r6, pc}

00002c74 <SdFile::close()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    2c74:	7982      	ldrb	r2, [r0, #6]
    2c76:	b90a      	cbnz	r2, 2c7c <SdFile::close()+0x8>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    2c78:	2000      	movs	r0, #0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    2c7a:	4770      	bx	lr
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    2c7c:	b510      	push	{r4, lr}
    2c7e:	4604      	mov	r4, r0
    2c80:	f7ff ff86 	bl	2b90 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  if (!sync())return false;
    2c84:	b118      	cbz	r0, 2c8e <SdFile::close()+0x1a>
  type_ = FAT_FILE_TYPE_CLOSED;
    2c86:	2300      	movs	r3, #0
    2c88:	71a3      	strb	r3, [r4, #6]
  return true;
    2c8a:	2001      	movs	r0, #1
}
    2c8c:	bd10      	pop	{r4, pc}
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    2c8e:	2000      	movs	r0, #0
    2c90:	bd10      	pop	{r4, pc}
    2c92:	bf00      	nop

00002c94 <SdFile::make83Name(char const*, unsigned char*)>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    2c94:	b470      	push	{r4, r5, r6}
    2c96:	1e4b      	subs	r3, r1, #1
    2c98:	f101 040a 	add.w	r4, r1, #10
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    2c9c:	2220      	movs	r2, #32
    2c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
    2ca2:	42a3      	cmp	r3, r4
    2ca4:	d1fb      	bne.n	2c9e <SdFile::make83Name(char const*, unsigned char*)+0xa>
    2ca6:	3801      	subs	r0, #1
    2ca8:	2500      	movs	r5, #0
    2caa:	2607      	movs	r6, #7
  i = 0;
  while ((c = *str++) != '\0') {
    2cac:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    2cb0:	b32c      	cbz	r4, 2cfe <SdFile::make83Name(char const*, unsigned char*)+0x6a>
    if (c == '.') {
    2cb2:	2c2e      	cmp	r4, #46	; 0x2e
    2cb4:	d01e      	beq.n	2cf4 <SdFile::make83Name(char const*, unsigned char*)+0x60>
    2cb6:	4a16      	ldr	r2, [pc, #88]	; (2d10 <SdFile::make83Name(char const*, unsigned char*)+0x7c>)
    2cb8:	e001      	b.n	2cbe <SdFile::make83Name(char const*, unsigned char*)+0x2a>
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    2cba:	429c      	cmp	r4, r3
    2cbc:	d017      	beq.n	2cee <SdFile::make83Name(char const*, unsigned char*)+0x5a>
    2cbe:	f812 3b01 	ldrb.w	r3, [r2], #1
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d1f9      	bne.n	2cba <SdFile::make83Name(char const*, unsigned char*)+0x26>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    2cc6:	42ae      	cmp	r6, r5
    2cc8:	d31f      	bcc.n	2d0a <SdFile::make83Name(char const*, unsigned char*)+0x76>
    2cca:	f1a4 0221 	sub.w	r2, r4, #33	; 0x21
    2cce:	2a5d      	cmp	r2, #93	; 0x5d
    2cd0:	d81b      	bhi.n	2d0a <SdFile::make83Name(char const*, unsigned char*)+0x76>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    2cd2:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
    2cd6:	2a19      	cmp	r2, #25
    2cd8:	f105 0301 	add.w	r3, r5, #1
    2cdc:	bf98      	it	ls
    2cde:	3c20      	subls	r4, #32
    2ce0:	440d      	add	r5, r1
    2ce2:	b2db      	uxtb	r3, r3
    2ce4:	bf98      	it	ls
    2ce6:	b2e4      	uxtbls	r4, r4
    2ce8:	702c      	strb	r4, [r5, #0]
    2cea:	461d      	mov	r5, r3
    2cec:	e7de      	b.n	2cac <SdFile::make83Name(char const*, unsigned char*)+0x18>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    2cee:	2000      	movs	r0, #0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    2cf0:	bc70      	pop	{r4, r5, r6}
    2cf2:	4770      	bx	lr
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    2cf4:	2e0a      	cmp	r6, #10
    2cf6:	d0fa      	beq.n	2cee <SdFile::make83Name(char const*, unsigned char*)+0x5a>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    2cf8:	2508      	movs	r5, #8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    2cfa:	260a      	movs	r6, #10
    2cfc:	e7d6      	b.n	2cac <SdFile::make83Name(char const*, unsigned char*)+0x18>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    2cfe:	780b      	ldrb	r3, [r1, #0]
    2d00:	f1b3 0020 	subs.w	r0, r3, #32
    2d04:	bf18      	it	ne
    2d06:	2001      	movne	r0, #1
    2d08:	e7f2      	b.n	2cf0 <SdFile::make83Name(char const*, unsigned char*)+0x5c>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    2d0a:	4618      	mov	r0, r3
    2d0c:	e7f0      	b.n	2cf0 <SdFile::make83Name(char const*, unsigned char*)+0x5c>
    2d0e:	bf00      	nop
    2d10:	0000b498 	.word	0x0000b498

00002d14 <SdFile::openRoot(SdVolume*)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    2d14:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) return false;
    2d16:	7983      	ldrb	r3, [r0, #6]
    2d18:	b93b      	cbnz	r3, 2d2a <SdFile::openRoot(SdVolume*)+0x16>
    2d1a:	f891 2020 	ldrb.w	r2, [r1, #32]

  if (vol->fatType() == 16) {
    2d1e:	2a10      	cmp	r2, #16
    2d20:	460d      	mov	r5, r1
    2d22:	4604      	mov	r4, r0
    2d24:	d003      	beq.n	2d2e <SdFile::openRoot(SdVolume*)+0x1a>
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    2d26:	2a20      	cmp	r2, #32
    2d28:	d010      	beq.n	2d4c <SdFile::openRoot(SdVolume*)+0x38>
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;
    2d2a:	2000      	movs	r0, #0
    2d2c:	bd38      	pop	{r3, r4, r5, pc}

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    2d2e:	2202      	movs	r2, #2
    2d30:	7182      	strb	r2, [r0, #6]
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
    2d32:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    2d34:	61c3      	str	r3, [r0, #28]
    fileSize_ = 32 * vol->rootDirEntryCount();
    2d36:	0153      	lsls	r3, r2, #5
    2d38:	6183      	str	r3, [r0, #24]
  vol_ = vol;
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    2d3a:	2300      	movs	r3, #0
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    2d3c:	2001      	movs	r0, #1
    2d3e:	7160      	strb	r0, [r4, #5]
  curCluster_ = 0;
  curPosition_ = 0;

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
    2d40:	7523      	strb	r3, [r4, #20]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    2d42:	6225      	str	r5, [r4, #32]
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    2d44:	60a3      	str	r3, [r4, #8]
  curPosition_ = 0;
    2d46:	60e3      	str	r3, [r4, #12]

  // root has no directory entry
  dirBlock_ = 0;
    2d48:	6123      	str	r3, [r4, #16]
  dirIndex_ = 0;
  return true;
}
    2d4a:	bd38      	pop	{r3, r4, r5, pc}
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    2d4c:	2303      	movs	r3, #3
    2d4e:	7183      	strb	r3, [r0, #6]
    2d50:	6a49      	ldr	r1, [r1, #36]	; 0x24
    firstCluster_ = vol->rootDirStart();
    2d52:	61c1      	str	r1, [r0, #28]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    2d54:	f100 0218 	add.w	r2, r0, #24
    2d58:	4628      	mov	r0, r5
    2d5a:	f000 fc6f 	bl	363c <SdVolume::chainSize(unsigned long, unsigned long*) const>
    2d5e:	2800      	cmp	r0, #0
    2d60:	d1eb      	bne.n	2d3a <SdFile::openRoot(SdVolume*)+0x26>
    2d62:	e7e2      	b.n	2d2a <SdFile::openRoot(SdVolume*)+0x16>

00002d64 <SdFile::read(void*, unsigned int)>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    2d64:	7983      	ldrb	r3, [r0, #6]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2d66:	b913      	cbnz	r3, 2d6e <SdFile::read(void*, unsigned int)+0xa>
    2d68:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    2d6c:	4770      	bx	lr
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    2d6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d72:	468b      	mov	fp, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2d74:	7941      	ldrb	r1, [r0, #5]
    2d76:	07c9      	lsls	r1, r1, #31
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
    2d78:	b083      	sub	sp, #12
    2d7a:	4605      	mov	r5, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2d7c:	d55b      	bpl.n	2e36 <SdFile::read(void*, unsigned int)+0xd2>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    2d7e:	68c1      	ldr	r1, [r0, #12]
    2d80:	6984      	ldr	r4, [r0, #24]
    2d82:	1a64      	subs	r4, r4, r1
    2d84:	4294      	cmp	r4, r2
    2d86:	bf28      	it	cs
    2d88:	4614      	movcs	r4, r2
    2d8a:	4626      	mov	r6, r4
    2d8c:	9401      	str	r4, [sp, #4]

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    2d8e:	2c00      	cmp	r4, #0
    2d90:	d069      	beq.n	2e66 <SdFile::read(void*, unsigned int)+0x102>
    2d92:	461a      	mov	r2, r3
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    2d94:	2a02      	cmp	r2, #2
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    2d96:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 2e94 <SdFile::read(void*, unsigned int)+0x130>

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    2d9a:	4f3d      	ldr	r7, [pc, #244]	; (2e90 <SdFile::read(void*, unsigned int)+0x12c>)
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    2d9c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 2e98 <SdFile::read(void*, unsigned int)+0x134>

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    2da0:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    2da4:	d042      	beq.n	2e2c <SdFile::read(void*, unsigned int)+0xc8>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2da6:	6a28      	ldr	r0, [r5, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2da8:	7904      	ldrb	r4, [r0, #4]
    2daa:	3c01      	subs	r4, #1
    2dac:	ea04 2451 	and.w	r4, r4, r1, lsr #9
    2db0:	b2e4      	uxtb	r4, r4
      if (offset == 0 && blockOfCluster == 0) {
    2db2:	f1ba 0f00 	cmp.w	sl, #0
    2db6:	d162      	bne.n	2e7e <SdFile::read(void*, unsigned int)+0x11a>
    2db8:	2c00      	cmp	r4, #0
    2dba:	d160      	bne.n	2e7e <SdFile::read(void*, unsigned int)+0x11a>
        // start of new cluster
        if (curPosition_ == 0) {
    2dbc:	2900      	cmp	r1, #0
    2dbe:	d156      	bne.n	2e6e <SdFile::read(void*, unsigned int)+0x10a>
          // use first cluster in file
          curCluster_ = firstCluster_;
    2dc0:	69ea      	ldr	r2, [r5, #28]
    2dc2:	60aa      	str	r2, [r5, #8]
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2dc4:	f890 e010 	ldrb.w	lr, [r0, #16]
    2dc8:	6941      	ldr	r1, [r0, #20]
    2dca:	3a02      	subs	r2, #2
    2dcc:	fa02 f20e 	lsl.w	r2, r2, lr
    2dd0:	4421      	add	r1, r4
    2dd2:	4411      	add	r1, r2
    }
    int32_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    2dd4:	f5ca 7400 	rsb	r4, sl, #512	; 0x200

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    2dd8:	796a      	ldrb	r2, [r5, #5]
    2dda:	42b4      	cmp	r4, r6
    2ddc:	bfa8      	it	ge
    2dde:	4634      	movge	r4, r6
    2de0:	0653      	lsls	r3, r2, #25
    2de2:	d42d      	bmi.n	2e40 <SdFile::read(void*, unsigned int)+0xdc>
    2de4:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2de8:	d02a      	beq.n	2e40 <SdFile::read(void*, unsigned int)+0xdc>
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    2dea:	4608      	mov	r0, r1
    2dec:	2100      	movs	r1, #0
    2dee:	f000 fb61 	bl	34b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2df2:	b300      	cbz	r0, 2e36 <SdFile::read(void*, unsigned int)+0xd2>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    2df4:	eb0a 0e09 	add.w	lr, sl, r9
      uint8_t* end = src + n;
    2df8:	eb0e 0004 	add.w	r0, lr, r4
      while (src != end) *dst++ = *src++;
    2dfc:	4586      	cmp	lr, r0
    2dfe:	d00b      	beq.n	2e18 <SdFile::read(void*, unsigned int)+0xb4>
    2e00:	f10b 32ff 	add.w	r2, fp, #4294967295
    2e04:	4673      	mov	r3, lr
    2e06:	f813 1b01 	ldrb.w	r1, [r3], #1
    2e0a:	f802 1f01 	strb.w	r1, [r2, #1]!
    2e0e:	4298      	cmp	r0, r3
    2e10:	d1f9      	bne.n	2e06 <SdFile::read(void*, unsigned int)+0xa2>
    2e12:	ebce 0000 	rsb	r0, lr, r0
    2e16:	4483      	add	fp, r0
    }
    curPosition_ += n;
    2e18:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    2e1a:	1b36      	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    2e1c:	4421      	add	r1, r4
    2e1e:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    2e20:	d021      	beq.n	2e66 <SdFile::read(void*, unsigned int)+0x102>
    2e22:	79aa      	ldrb	r2, [r5, #6]
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    2e24:	2a02      	cmp	r2, #2

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    2e26:	f3c1 0a08 	ubfx	sl, r1, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    2e2a:	d1bc      	bne.n	2da6 <SdFile::read(void*, unsigned int)+0x42>
    2e2c:	6a2a      	ldr	r2, [r5, #32]
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    2e2e:	6a50      	ldr	r0, [r2, #36]	; 0x24
    2e30:	eb00 2151 	add.w	r1, r0, r1, lsr #9
    2e34:	e7ce      	b.n	2dd4 <SdFile::read(void*, unsigned int)+0x70>
 */
int32_t SdFile::read(void* buf, size_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2e36:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    2e3a:	b003      	add	sp, #12
    2e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
    2e40:	683a      	ldr	r2, [r7, #0]
    2e42:	4291      	cmp	r1, r2
    2e44:	d0d1      	beq.n	2dea <SdFile::read(void*, unsigned int)+0x86>
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
    2e46:	f8d8 0000 	ldr.w	r0, [r8]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2e4a:	7803      	ldrb	r3, [r0, #0]
    2e4c:	2bfe      	cmp	r3, #254	; 0xfe
    2e4e:	d018      	beq.n	2e82 <SdFile::read(void*, unsigned int)+0x11e>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    2e50:	465a      	mov	r2, fp
    2e52:	f7ff fd89 	bl	2968 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
      if (!vol_->readBlock(block, dst)) return -1;
    2e56:	2800      	cmp	r0, #0
    2e58:	d0ed      	beq.n	2e36 <SdFile::read(void*, unsigned int)+0xd2>
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    2e5a:	68e9      	ldr	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    2e5c:	1b36      	subs	r6, r6, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    2e5e:	4421      	add	r1, r4
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) && block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readBlock(block, dst)) return -1;
      dst += n;
    2e60:	44a3      	add	fp, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    2e62:	60e9      	str	r1, [r5, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint32_t toRead = nbyte;
  while (toRead > 0) {
    2e64:	d1dd      	bne.n	2e22 <SdFile::read(void*, unsigned int)+0xbe>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    2e66:	9801      	ldr	r0, [sp, #4]
}
    2e68:	b003      	add	sp, #12
    2e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    2e6e:	f105 0208 	add.w	r2, r5, #8
    2e72:	68a9      	ldr	r1, [r5, #8]
    2e74:	f000 fbaa 	bl	35cc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2e78:	2800      	cmp	r0, #0
    2e7a:	d0dc      	beq.n	2e36 <SdFile::read(void*, unsigned int)+0xd2>
    2e7c:	6a28      	ldr	r0, [r5, #32]
    2e7e:	68aa      	ldr	r2, [r5, #8]
    2e80:	e7a0      	b.n	2dc4 <SdFile::read(void*, unsigned int)+0x60>
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    2e82:	4658      	mov	r0, fp
    2e84:	f7ff f9aa 	bl	21dc <SDHC_CardReadBlock(void*, unsigned long)>
    2e88:	fab0 f080 	clz	r0, r0
    2e8c:	0940      	lsrs	r0, r0, #5
    2e8e:	e7e2      	b.n	2e56 <SdFile::read(void*, unsigned int)+0xf2>
    2e90:	1fff0738 	.word	0x1fff0738
    2e94:	1fff140c 	.word	0x1fff140c
    2e98:	1fff1408 	.word	0x1fff1408

00002e9c <SdFile::readDirCache()>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    2e9c:	7983      	ldrb	r3, [r0, #6]
    2e9e:	2b01      	cmp	r3, #1
    2ea0:	d917      	bls.n	2ed2 <SdFile::readDirCache()+0x36>
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    2ea2:	b530      	push	{r4, r5, lr}
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    2ea4:	68c3      	ldr	r3, [r0, #12]
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    2ea6:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    2ea8:	2201      	movs	r2, #1
    2eaa:	f10d 0107 	add.w	r1, sp, #7
    2eae:	4604      	mov	r4, r0
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    2eb0:	f3c3 1543 	ubfx	r5, r3, #5, #4
    2eb4:	f7ff ff56 	bl	2d64 <SdFile::read(void*, unsigned int)>
    2eb8:	2801      	cmp	r0, #1
    2eba:	d002      	beq.n	2ec2 <SdFile::readDirCache()+0x26>

  // use read to locate and cache block
  if (read() < 0) return NULL;
    2ebc:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    2ebe:	b003      	add	sp, #12
    2ec0:	bd30      	pop	{r4, r5, pc}

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    2ec2:	68e3      	ldr	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    2ec4:	4804      	ldr	r0, [pc, #16]	; (2ed8 <SdFile::readDirCache()+0x3c>)

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    2ec6:	331f      	adds	r3, #31

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    2ec8:	eb00 1045 	add.w	r0, r0, r5, lsl #5

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    2ecc:	60e3      	str	r3, [r4, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    2ece:	b003      	add	sp, #12
    2ed0:	bd30      	pop	{r4, r5, pc}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    2ed2:	2000      	movs	r0, #0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    2ed4:	4770      	bx	lr
    2ed6:	bf00      	nop
    2ed8:	1fff140c 	.word	0x1fff140c

00002edc <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    2edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ede:	7983      	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    2ee0:	b113      	cbz	r3, 2ee8 <SdFile::seekSet(unsigned long)+0xc>
    2ee2:	6982      	ldr	r2, [r0, #24]
    2ee4:	428a      	cmp	r2, r1
    2ee6:	d201      	bcs.n	2eec <SdFile::seekSet(unsigned long)+0x10>
    2ee8:	2000      	movs	r0, #0
    2eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    2eec:	2b02      	cmp	r3, #2
    2eee:	460f      	mov	r7, r1
    2ef0:	4605      	mov	r5, r0
    2ef2:	d01a      	beq.n	2f2a <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    2ef4:	b307      	cbz	r7, 2f38 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    2ef6:	6a2b      	ldr	r3, [r5, #32]
    2ef8:	68e9      	ldr	r1, [r5, #12]
    2efa:	7c1c      	ldrb	r4, [r3, #16]
    2efc:	1e4a      	subs	r2, r1, #1
    2efe:	f104 0309 	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    2f02:	1e7c      	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    2f04:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    2f06:	40dc      	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    2f08:	42a2      	cmp	r2, r4
    2f0a:	d911      	bls.n	2f30 <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    2f0c:	69eb      	ldr	r3, [r5, #28]
    2f0e:	60ab      	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    2f10:	f105 0608 	add.w	r6, r5, #8
    2f14:	e006      	b.n	2f24 <SdFile::seekSet(unsigned long)+0x48>
    2f16:	68a9      	ldr	r1, [r5, #8]
    2f18:	6a28      	ldr	r0, [r5, #32]
    2f1a:	f000 fb57 	bl	35cc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2f1e:	3c01      	subs	r4, #1
    2f20:	2800      	cmp	r0, #0
    2f22:	d0e1      	beq.n	2ee8 <SdFile::seekSet(unsigned long)+0xc>
    2f24:	4632      	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    2f26:	2c00      	cmp	r4, #0
    2f28:	d1f5      	bne.n	2f16 <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    2f2a:	60ef      	str	r7, [r5, #12]
    return true;
    2f2c:	2001      	movs	r0, #1
    2f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    2f30:	2900      	cmp	r1, #0
    2f32:	d0eb      	beq.n	2f0c <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    2f34:	1aa4      	subs	r4, r4, r2
    2f36:	e7eb      	b.n	2f10 <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    2f38:	60af      	str	r7, [r5, #8]
    curPosition_ = 0;
    2f3a:	60ef      	str	r7, [r5, #12]
    return true;
    2f3c:	2001      	movs	r0, #1
    2f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002f40 <SdFile::sync()>:
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    2f40:	7983      	ldrb	r3, [r0, #6]
    2f42:	b10b      	cbz	r3, 2f48 <SdFile::sync()+0x8>
    2f44:	f7ff be24 	b.w	2b90 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    2f48:	4618      	mov	r0, r3
    2f4a:	4770      	bx	lr

00002f4c <SdFile::truncate(unsigned long)>:
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    2f4c:	7983      	ldrb	r3, [r0, #6]
    2f4e:	2b01      	cmp	r3, #1
    2f50:	d001      	beq.n	2f56 <SdFile::truncate(unsigned long)+0xa>
    2f52:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    2f54:	4770      	bx	lr
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    2f56:	b5f0      	push	{r4, r5, r6, r7, lr}
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    2f58:	7945      	ldrb	r5, [r0, #5]
    2f5a:	07ac      	lsls	r4, r5, #30
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    2f5c:	b083      	sub	sp, #12
    2f5e:	4602      	mov	r2, r0
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    2f60:	d51c      	bpl.n	2f9c <SdFile::truncate(unsigned long)+0x50>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    2f62:	6985      	ldr	r5, [r0, #24]
    2f64:	428d      	cmp	r5, r1
    2f66:	460c      	mov	r4, r1
    2f68:	d318      	bcc.n	2f9c <SdFile::truncate(unsigned long)+0x50>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    2f6a:	b1d5      	cbz	r5, 2fa2 <SdFile::truncate(unsigned long)+0x56>
    2f6c:	4625      	mov	r5, r4

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    2f6e:	68d6      	ldr	r6, [r2, #12]
    2f70:	4614      	mov	r4, r2

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    2f72:	f7ff ffb3 	bl	2edc <SdFile::seekSet(unsigned long)>
    2f76:	b188      	cbz	r0, 2f9c <SdFile::truncate(unsigned long)+0x50>

  if (length == 0) {
    2f78:	b9b5      	cbnz	r5, 2fa8 <SdFile::truncate(unsigned long)+0x5c>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    2f7a:	69e1      	ldr	r1, [r4, #28]
    2f7c:	6a20      	ldr	r0, [r4, #32]
    2f7e:	f000 fc17 	bl	37b0 <SdVolume::freeChain(unsigned long)>
    2f82:	b158      	cbz	r0, 2f9c <SdFile::truncate(unsigned long)+0x50>
    firstCluster_ = 0;
    2f84:	61e5      	str	r5, [r4, #28]
    2f86:	e022      	b.n	2fce <SdFile::truncate(unsigned long)+0x82>
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;

    if (!vol_->isEOC(toFree)) {
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    2f88:	f000 fc12 	bl	37b0 <SdVolume::freeChain(unsigned long)>
    2f8c:	b130      	cbz	r0, 2f9c <SdFile::truncate(unsigned long)+0x50>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2f8e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    2f92:	68a1      	ldr	r1, [r4, #8]
    2f94:	6a20      	ldr	r0, [r4, #32]
    2f96:	f000 fbf9 	bl	378c <SdVolume::fatPut(unsigned long, unsigned long)>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    2f9a:	b9c0      	cbnz	r0, 2fce <SdFile::truncate(unsigned long)+0x82>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    2f9c:	2000      	movs	r0, #0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    2f9e:	b003      	add	sp, #12
    2fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    2fa2:	4618      	mov	r0, r3

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    2fa4:	b003      	add	sp, #12
    2fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    2fa8:	aa01      	add	r2, sp, #4
    2faa:	68a1      	ldr	r1, [r4, #8]
    2fac:	6a20      	ldr	r0, [r4, #32]
    2fae:	f000 fb0d 	bl	35cc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2fb2:	2800      	cmp	r0, #0
    2fb4:	d0f2      	beq.n	2f9c <SdFile::truncate(unsigned long)+0x50>

    if (!vol_->isEOC(toFree)) {
    2fb6:	6a20      	ldr	r0, [r4, #32]
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2fb8:	4b0f      	ldr	r3, [pc, #60]	; (2ff8 <SdFile::truncate(unsigned long)+0xac>)
    2fba:	f890 7020 	ldrb.w	r7, [r0, #32]
    2fbe:	9901      	ldr	r1, [sp, #4]
    2fc0:	f64f 72f8 	movw	r2, #65528	; 0xfff8
    2fc4:	2f10      	cmp	r7, #16
    2fc6:	bf08      	it	eq
    2fc8:	4613      	moveq	r3, r2
    2fca:	4299      	cmp	r1, r3
    2fcc:	d3dc      	bcc.n	2f88 <SdFile::truncate(unsigned long)+0x3c>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    2fce:	7963      	ldrb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    2fd0:	79a2      	ldrb	r2, [r4, #6]

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    }
  }
  fileSize_ = length;
    2fd2:	61a5      	str	r5, [r4, #24]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    2fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2fd8:	7163      	strb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    2fda:	2a00      	cmp	r2, #0
    2fdc:	d0de      	beq.n	2f9c <SdFile::truncate(unsigned long)+0x50>
    2fde:	4620      	mov	r0, r4
    2fe0:	f7ff fdd6 	bl	2b90 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    2fe4:	2800      	cmp	r0, #0
    2fe6:	d0d9      	beq.n	2f9c <SdFile::truncate(unsigned long)+0x50>

  // set file to correct position
  return seekSet(newPos);
    2fe8:	42b5      	cmp	r5, r6
    2fea:	4629      	mov	r1, r5
    2fec:	4620      	mov	r0, r4
    2fee:	bf28      	it	cs
    2ff0:	4631      	movcs	r1, r6
    2ff2:	f7ff ff73 	bl	2edc <SdFile::seekSet(unsigned long)>
    2ff6:	e7d2      	b.n	2f9e <SdFile::truncate(unsigned long)+0x52>
    2ff8:	0ffffff8 	.word	0x0ffffff8

00002ffc <SdFile::openCachedEntry(unsigned char, unsigned char)>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    2ffc:	b570      	push	{r4, r5, r6, lr}
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    2ffe:	4b1d      	ldr	r3, [pc, #116]	; (3074 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x78>)
    3000:	eb03 1641 	add.w	r6, r3, r1, lsl #5

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    3004:	7af3      	ldrb	r3, [r6, #11]
    3006:	f013 0f11 	tst.w	r3, #17
    300a:	d002      	beq.n	3012 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x16>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    300c:	f012 0f42 	tst.w	r2, #66	; 0x42
    3010:	d11e      	bne.n	3050 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
  dirBlock_ = SdVolume::cacheBlockNumber_;
    3012:	4b19      	ldr	r3, [pc, #100]	; (3078 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x7c>)
  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    3014:	7501      	strb	r1, [r0, #20]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    3016:	681b      	ldr	r3, [r3, #0]
    3018:	6103      	str	r3, [r0, #16]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;
    301a:	8b73      	ldrh	r3, [r6, #26]
    301c:	8ab1      	ldrh	r1, [r6, #20]
    301e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    3022:	61c1      	str	r1, [r0, #28]
    3024:	7af3      	ldrb	r3, [r6, #11]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    3026:	f013 0318 	ands.w	r3, r3, #24
    302a:	4615      	mov	r5, r2
    302c:	4604      	mov	r4, r0
    302e:	d10d      	bne.n	304c <SdFile::openCachedEntry(unsigned char, unsigned char)+0x50>
    fileSize_ = p->fileSize;
    3030:	69f3      	ldr	r3, [r6, #28]
    3032:	6183      	str	r3, [r0, #24]
    type_ = FAT_FILE_TYPE_NORMAL;
    3034:	2301      	movs	r3, #1
    3036:	7183      	strb	r3, [r0, #6]
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    3038:	f005 030f 	and.w	r3, r5, #15

  // set to start of file
  curCluster_ = 0;
    303c:	2100      	movs	r1, #0
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    303e:	7163      	strb	r3, [r4, #5]
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    3040:	066b      	lsls	r3, r5, #25
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);

  // set to start of file
  curCluster_ = 0;
    3042:	60a1      	str	r1, [r4, #8]
  curPosition_ = 0;
    3044:	60e1      	str	r1, [r4, #12]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    3046:	d40f      	bmi.n	3068 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x6c>
  return true;
    3048:	2001      	movs	r0, #1
}
    304a:	bd70      	pop	{r4, r5, r6, pc}

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    304c:	2b10      	cmp	r3, #16
    304e:	d001      	beq.n	3054 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x58>
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    3050:	2000      	movs	r0, #0
    3052:	bd70      	pop	{r4, r5, r6, pc}
  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    3054:	f100 0218 	add.w	r2, r0, #24
    3058:	6a00      	ldr	r0, [r0, #32]
    305a:	f000 faef 	bl	363c <SdVolume::chainSize(unsigned long, unsigned long*) const>
    305e:	2800      	cmp	r0, #0
    3060:	d0f6      	beq.n	3050 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x54>
    type_ = FAT_FILE_TYPE_SUBDIR;
    3062:	2304      	movs	r3, #4
    3064:	71a3      	strb	r3, [r4, #6]
    3066:	e7e7      	b.n	3038 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x3c>
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    3068:	4620      	mov	r0, r4
  return true;
}
    306a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    306e:	f7ff bf6d 	b.w	2f4c <SdFile::truncate(unsigned long)>
    3072:	bf00      	nop
    3074:	1fff140c 	.word	0x1fff140c
    3078:	1fff0738 	.word	0x1fff0738

0000307c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    307c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3080:	b084      	sub	sp, #16
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    3082:	af01      	add	r7, sp, #4
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    3084:	4606      	mov	r6, r0
    3086:	460c      	mov	r4, r1
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    3088:	4610      	mov	r0, r2
    308a:	4639      	mov	r1, r7
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    308c:	4699      	mov	r9, r3
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    308e:	f7ff fe01 	bl	2c94 <SdFile::make83Name(char const*, unsigned char*)>
    3092:	b378      	cbz	r0, 30f4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    3094:	2200      	movs	r2, #0
  vol_ = dirFile->vol_;
    3096:	6a21      	ldr	r1, [r4, #32]
    3098:	6231      	str	r1, [r6, #32]
    309a:	4613      	mov	r3, r2
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    309c:	4615      	mov	r5, r2
    309e:	60a2      	str	r2, [r4, #8]
    30a0:	60e2      	str	r2, [r4, #12]
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    30a2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 31a4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x128>
    30a6:	e008      	b.n	30ba <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3e>
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    30a8:	2be5      	cmp	r3, #229	; 0xe5
    30aa:	d01c      	beq.n	30e6 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x6a>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    30ac:	4601      	mov	r1, r0
    30ae:	220b      	movs	r2, #11
    30b0:	4638      	mov	r0, r7
    30b2:	f004 f8e7 	bl	7284 <memcmp>
    30b6:	b388      	cbz	r0, 311c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xa0>
    30b8:	68e3      	ldr	r3, [r4, #12]

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    30ba:	69a2      	ldr	r2, [r4, #24]
    30bc:	429a      	cmp	r2, r3
    30be:	d91d      	bls.n	30fc <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x80>
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    30c0:	4620      	mov	r0, r4
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    30c2:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    p = dirFile->readDirCache();
    30c6:	f7ff fee9 	bl	2e9c <SdFile::readDirCache()>
    if (p == NULL) return false;
    30ca:	b198      	cbz	r0, 30f4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    30cc:	7803      	ldrb	r3, [r0, #0]
    30ce:	2b00      	cmp	r3, #0
    30d0:	d1ea      	bne.n	30a8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x2c>
      // remember first empty slot
      if (!emptyFound) {
    30d2:	b95d      	cbnz	r5, 30ec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x70>
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    30d4:	f8d8 3000 	ldr.w	r3, [r8]

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
    30d8:	f886 a014 	strb.w	sl, [r6, #20]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    30dc:	6133      	str	r3, [r6, #16]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    30de:	7803      	ldrb	r3, [r0, #0]
    30e0:	b123      	cbz	r3, 30ec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x70>
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
    30e2:	2501      	movs	r5, #1
    30e4:	e7e8      	b.n	30b8 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x3c>
    30e6:	2d00      	cmp	r5, #0
    30e8:	d1fb      	bne.n	30e2 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x66>
    30ea:	e7f3      	b.n	30d4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x58>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    30ec:	f009 0312 	and.w	r3, r9, #18
    30f0:	2b12      	cmp	r3, #18
    30f2:	d01d      	beq.n	3130 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xb4>
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    30f4:	2000      	movs	r0, #0
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    30f6:	b004      	add	sp, #16
    30f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    30fc:	f009 0312 	and.w	r3, r9, #18
    3100:	2b12      	cmp	r3, #18
    3102:	d1f7      	bne.n	30f4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    3104:	b9a5      	cbnz	r5, 3130 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xb4>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    3106:	79a3      	ldrb	r3, [r4, #6]
    3108:	2b02      	cmp	r3, #2
    310a:	d0f3      	beq.n	30f4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    310c:	4620      	mov	r0, r4
    310e:	f7ff fd8b 	bl	2c28 <SdFile::addDirCluster()>
    3112:	2800      	cmp	r0, #0
    3114:	d0ee      	beq.n	30f4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
    3116:	4c21      	ldr	r4, [pc, #132]	; (319c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x120>)

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;

    // use first entry in cluster
    dirIndex_ = 0;
    3118:	7535      	strb	r5, [r6, #20]
    311a:	e014      	b.n	3146 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xca>
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    311c:	f009 0330 	and.w	r3, r9, #48	; 0x30
    3120:	2b30      	cmp	r3, #48	; 0x30
    3122:	d0e7      	beq.n	30f4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    3124:	464a      	mov	r2, r9
    3126:	4651      	mov	r1, sl
    3128:	4630      	mov	r0, r6
    312a:	f7ff ff67 	bl	2ffc <SdFile::openCachedEntry(unsigned char, unsigned char)>
    312e:	e7e2      	b.n	30f6 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x7a>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    3130:	2101      	movs	r1, #1
    3132:	6930      	ldr	r0, [r6, #16]
    3134:	f000 f9be 	bl	34b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3138:	2800      	cmp	r0, #0
    313a:	d0db      	beq.n	30f4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    313c:	7d34      	ldrb	r4, [r6, #20]
    313e:	4b17      	ldr	r3, [pc, #92]	; (319c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x120>)
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
    3140:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
    3144:	d0d6      	beq.n	30f4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>
    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    3146:	2220      	movs	r2, #32
    3148:	2100      	movs	r1, #0
    314a:	4620      	mov	r0, r4
    314c:	f004 f930 	bl	73b0 <memset>
  memcpy(p->name, dname, 11);
    3150:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    3154:	4623      	mov	r3, r4
    3156:	c303      	stmia	r3!, {r0, r1}

  // set timestamps
  if (dateTime_) {
    3158:	4911      	ldr	r1, [pc, #68]	; (31a0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x124>)
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    315a:	f823 2b02 	strh.w	r2, [r3], #2

  // set timestamps
  if (dateTime_) {
    315e:	680d      	ldr	r5, [r1, #0]
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    3160:	0c12      	lsrs	r2, r2, #16
    3162:	701a      	strb	r2, [r3, #0]

  // set timestamps
  if (dateTime_) {
    3164:	b19d      	cbz	r5, 318e <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x112>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    3166:	f104 010e 	add.w	r1, r4, #14
    316a:	f104 0010 	add.w	r0, r4, #16
    316e:	47a8      	blx	r5
    3170:	8a23      	ldrh	r3, [r4, #16]
    3172:	89e2      	ldrh	r2, [r4, #14]
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    p->creationTime = FAT_DEFAULT_TIME;
  }
  p->lastAccessDate = p->creationDate;
    3174:	8263      	strh	r3, [r4, #18]
  p->lastWriteDate = p->creationDate;
    3176:	8323      	strh	r3, [r4, #24]
  p->lastWriteTime = p->creationTime;
    3178:	82e2      	strh	r2, [r4, #22]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    317a:	f000 f95b 	bl	3434 <SdVolume::cacheFlush()>
    317e:	2800      	cmp	r0, #0
    3180:	d0b8      	beq.n	30f4 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x78>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    3182:	464a      	mov	r2, r9
    3184:	7d31      	ldrb	r1, [r6, #20]
    3186:	4630      	mov	r0, r6
    3188:	f7ff ff38 	bl	2ffc <SdFile::openCachedEntry(unsigned char, unsigned char)>
    318c:	e7b3      	b.n	30f6 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x7a>
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    318e:	f642 0321 	movw	r3, #10273	; 0x2821
    p->creationTime = FAT_DEFAULT_TIME;
    3192:	f44f 6200 	mov.w	r2, #2048	; 0x800
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    3196:	8223      	strh	r3, [r4, #16]
    p->creationTime = FAT_DEFAULT_TIME;
    3198:	81e2      	strh	r2, [r4, #14]
    319a:	e7eb      	b.n	3174 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xf8>
    319c:	1fff140c 	.word	0x1fff140c
    31a0:	1fff1400 	.word	0x1fff1400
    31a4:	1fff0738 	.word	0x1fff0738

000031a8 <SdFile::open(SdFile*, char const*, unsigned char)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    31a8:	b410      	push	{r4}
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    31aa:	7984      	ldrb	r4, [r0, #6]
    31ac:	b11c      	cbz	r4, 31b6 <SdFile::open(SdFile*, char const*, unsigned char)+0xe>
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    31ae:	2000      	movs	r0, #0
    31b0:	f85d 4b04 	ldr.w	r4, [sp], #4
    31b4:	4770      	bx	lr
    31b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    31ba:	f7ff bf5f 	b.w	307c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
    31be:	bf00      	nop

000031c0 <SdFile::remove()>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
    31c0:	b510      	push	{r4, lr}
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    31c2:	2100      	movs	r1, #0
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
    31c4:	4604      	mov	r4, r0
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    31c6:	f7ff fec1 	bl	2f4c <SdFile::truncate(unsigned long)>
    31ca:	b908      	cbnz	r0, 31d0 <SdFile::remove()+0x10>
  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;

  // write entry to SD
  return SdVolume::cacheFlush();
}
    31cc:	2000      	movs	r0, #0
    31ce:	bd10      	pop	{r4, pc}
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    31d0:	2101      	movs	r1, #1
    31d2:	6920      	ldr	r0, [r4, #16]
    31d4:	f000 f96e 	bl	34b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    31d8:	2800      	cmp	r0, #0
    31da:	d0f7      	beq.n	31cc <SdFile::remove()+0xc>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    31dc:	7d23      	ldrb	r3, [r4, #20]
    31de:	4a06      	ldr	r2, [pc, #24]	; (31f8 <SdFile::remove()+0x38>)
    31e0:	015b      	lsls	r3, r3, #5
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;

  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
  if (!d) return false;
    31e2:	42da      	cmn	r2, r3
    31e4:	d0f2      	beq.n	31cc <SdFile::remove()+0xc>

  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    31e6:	20e5      	movs	r0, #229	; 0xe5
    31e8:	5498      	strb	r0, [r3, r2]

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;
    31ea:	2100      	movs	r1, #0
    31ec:	71a1      	strb	r1, [r4, #6]

  // write entry to SD
  return SdVolume::cacheFlush();
}
    31ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;

  // write entry to SD
  return SdVolume::cacheFlush();
    31f2:	f000 b91f 	b.w	3434 <SdVolume::cacheFlush()>
    31f6:	bf00      	nop
    31f8:	1fff140c 	.word	0x1fff140c

000031fc <SdFile::remove(SdFile*, char const*)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
    31fc:	b530      	push	{r4, r5, lr}
    31fe:	b08b      	sub	sp, #44	; 0x2c
    3200:	2400      	movs	r4, #0
    3202:	460a      	mov	r2, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    3204:	4d08      	ldr	r5, [pc, #32]	; (3228 <SdFile::remove(SdFile*, char const*)+0x2c>)
    3206:	f88d 4008 	strb.w	r4, [sp, #8]
    320a:	4601      	mov	r1, r0
    320c:	2302      	movs	r3, #2
    320e:	a801      	add	r0, sp, #4
    3210:	f88d 400a 	strb.w	r4, [sp, #10]
    3214:	9501      	str	r5, [sp, #4]
    3216:	f7ff ff31 	bl	307c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
  SdFile file;
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
    321a:	b110      	cbz	r0, 3222 <SdFile::remove(SdFile*, char const*)+0x26>
  return file.remove();
    321c:	a801      	add	r0, sp, #4
    321e:	f7ff ffcf 	bl	31c0 <SdFile::remove()>
}
    3222:	b00b      	add	sp, #44	; 0x2c
    3224:	bd30      	pop	{r4, r5, pc}
    3226:	bf00      	nop
    3228:	0000b488 	.word	0x0000b488

0000322c <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3230:	468b      	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3232:	7981      	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3234:	b085      	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3236:	2901      	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3238:	4607      	mov	r7, r0
    323a:	9201      	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    323c:	d005      	beq.n	324a <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    323e:	2301      	movs	r3, #1
    3240:	713b      	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3242:	2000      	movs	r0, #0
}
    3244:	b005      	add	sp, #20
    3246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    324a:	7942      	ldrb	r2, [r0, #5]
    324c:	0791      	lsls	r1, r2, #30
    324e:	d5f6      	bpl.n	323e <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3250:	0753      	lsls	r3, r2, #29
    3252:	d508      	bpl.n	3266 <SdFile::write(void const*, unsigned int)+0x3a>
    3254:	68fc      	ldr	r4, [r7, #12]
    3256:	69b9      	ldr	r1, [r7, #24]
    3258:	428c      	cmp	r4, r1
    325a:	f000 80b4 	beq.w	33c6 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    325e:	f7ff fe3d 	bl	2edc <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    3262:	2800      	cmp	r0, #0
    3264:	d0eb      	beq.n	323e <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    3266:	9b01      	ldr	r3, [sp, #4]
    3268:	68fc      	ldr	r4, [r7, #12]
    326a:	2b00      	cmp	r3, #0
    326c:	d04a      	beq.n	3304 <SdFile::write(void const*, unsigned int)+0xd8>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    326e:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 3414 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    3272:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 3418 <SdFile::write(void const*, unsigned int)+0x1ec>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3276:	f8dd 8004 	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    327a:	6a38      	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    327c:	7906      	ldrb	r6, [r0, #4]
    327e:	3e01      	subs	r6, #1
    3280:	ea06 2654 	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    3284:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3288:	f3c4 0408 	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    328c:	d143      	bne.n	3316 <SdFile::write(void const*, unsigned int)+0xea>
    328e:	2c00      	cmp	r4, #0
    3290:	d141      	bne.n	3316 <SdFile::write(void const*, unsigned int)+0xea>
      // start of new cluster
      if (curCluster_ == 0) {
    3292:	68b9      	ldr	r1, [r7, #8]
    3294:	2900      	cmp	r1, #0
    3296:	d173      	bne.n	3380 <SdFile::write(void const*, unsigned int)+0x154>
        if (firstCluster_ == 0) {
    3298:	69fa      	ldr	r2, [r7, #28]
    329a:	2a00      	cmp	r2, #0
    329c:	f000 8083 	beq.w	33a6 <SdFile::write(void const*, unsigned int)+0x17a>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    32a0:	60ba      	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    32a2:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    32a6:	b2ad      	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    32a8:	4545      	cmp	r5, r8
    32aa:	d93a      	bls.n	3322 <SdFile::write(void const*, unsigned int)+0xf6>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    32ac:	7c05      	ldrb	r5, [r0, #16]
    32ae:	6941      	ldr	r1, [r0, #20]
    32b0:	3a02      	subs	r2, #2
    32b2:	40aa      	lsls	r2, r5
    32b4:	440e      	add	r6, r1
    32b6:	4416      	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    32b8:	fa1f f588 	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    32bc:	b91c      	cbnz	r4, 32c6 <SdFile::write(void const*, unsigned int)+0x9a>
    32be:	68f8      	ldr	r0, [r7, #12]
    32c0:	69ba      	ldr	r2, [r7, #24]
    32c2:	4290      	cmp	r0, r2
    32c4:	d24f      	bcs.n	3366 <SdFile::write(void const*, unsigned int)+0x13a>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    32c6:	4630      	mov	r0, r6
    32c8:	2101      	movs	r1, #1
    32ca:	f000 f8f3 	bl	34b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    32ce:	2800      	cmp	r0, #0
    32d0:	d0b5      	beq.n	323e <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    32d2:	444c      	add	r4, r9
      uint8_t* end = dst + n;
    32d4:	eb04 0e05 	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    32d8:	4574      	cmp	r4, lr
    32da:	d00d      	beq.n	32f8 <SdFile::write(void const*, unsigned int)+0xcc>
    32dc:	f10b 31ff 	add.w	r1, fp, #4294967295
    32e0:	1e62      	subs	r2, r4, #1
    32e2:	f10e 36ff 	add.w	r6, lr, #4294967295
    32e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    32ea:	f802 0f01 	strb.w	r0, [r2, #1]!
    32ee:	4296      	cmp	r6, r2
    32f0:	d1f9      	bne.n	32e6 <SdFile::write(void const*, unsigned int)+0xba>
    32f2:	ebc4 040e 	rsb	r4, r4, lr
    32f6:	44a3      	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    32f8:	68fc      	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    32fa:	ebb8 0805 	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    32fe:	442c      	add	r4, r5
    3300:	60fc      	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3302:	d1ba      	bne.n	327a <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3304:	69bb      	ldr	r3, [r7, #24]
    3306:	42a3      	cmp	r3, r4
    3308:	d262      	bcs.n	33d0 <SdFile::write(void const*, unsigned int)+0x1a4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    330a:	797a      	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    330c:	61bc      	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    330e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3312:	717a      	strb	r2, [r7, #5]
    3314:	e065      	b.n	33e2 <SdFile::write(void const*, unsigned int)+0x1b6>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3316:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    331a:	b2ad      	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    331c:	4545      	cmp	r5, r8
    331e:	68ba      	ldr	r2, [r7, #8]
    3320:	d8c4      	bhi.n	32ac <SdFile::write(void const*, unsigned int)+0x80>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3322:	7c01      	ldrb	r1, [r0, #16]
    3324:	6940      	ldr	r0, [r0, #20]
    3326:	3a02      	subs	r2, #2
    3328:	408a      	lsls	r2, r1
    332a:	4406      	add	r6, r0
    if (n == 512) {
    332c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3330:	4416      	add	r6, r2
    if (n == 512) {
    3332:	d1c3      	bne.n	32bc <SdFile::write(void const*, unsigned int)+0x90>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    3334:	f8da 2000 	ldr.w	r2, [sl]
    3338:	4296      	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    333a:	bf04      	itt	eq
    333c:	f04f 32ff 	moveq.w	r2, #4294967295
    3340:	f8ca 2000 	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    3344:	4a2f      	ldr	r2, [pc, #188]	; (3404 <SdFile::write(void const*, unsigned int)+0x1d8>)
    3346:	6810      	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3348:	7802      	ldrb	r2, [r0, #0]
    334a:	2afe      	cmp	r2, #254	; 0xfe
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    334c:	4631      	mov	r1, r6
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    334e:	d033      	beq.n	33b8 <SdFile::write(void const*, unsigned int)+0x18c>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    3350:	465a      	mov	r2, fp
    3352:	f7ff fbcf 	bl	2af4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    3356:	2800      	cmp	r0, #0
    3358:	f43f af71 	beq.w	323e <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    335c:	f50b 7b00 	add.w	fp, fp, #512	; 0x200
    3360:	f44f 7500 	mov.w	r5, #512	; 0x200
    3364:	e7c8      	b.n	32f8 <SdFile::write(void const*, unsigned int)+0xcc>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    3366:	f000 f865 	bl	3434 <SdVolume::cacheFlush()>
    336a:	2800      	cmp	r0, #0
    336c:	f43f af67 	beq.w	323e <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3370:	4925      	ldr	r1, [pc, #148]	; (3408 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    3372:	f8ca 6000 	str.w	r6, [sl]
    3376:	780a      	ldrb	r2, [r1, #0]
    3378:	f042 0201 	orr.w	r2, r2, #1
    337c:	700a      	strb	r2, [r1, #0]
    337e:	e7a8      	b.n	32d2 <SdFile::write(void const*, unsigned int)+0xa6>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3380:	aa03      	add	r2, sp, #12
    3382:	f000 f923 	bl	35cc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3386:	2800      	cmp	r0, #0
    3388:	f43f af5c 	beq.w	3244 <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    338c:	6a38      	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    338e:	4b1f      	ldr	r3, [pc, #124]	; (340c <SdFile::write(void const*, unsigned int)+0x1e0>)
    3390:	f890 5020 	ldrb.w	r5, [r0, #32]
    3394:	9a03      	ldr	r2, [sp, #12]
    3396:	f64f 71f8 	movw	r1, #65528	; 0xfff8
    339a:	2d10      	cmp	r5, #16
    339c:	bf18      	it	ne
    339e:	4619      	movne	r1, r3
    33a0:	428a      	cmp	r2, r1
    33a2:	f4ff af7d 	bcc.w	32a0 <SdFile::write(void const*, unsigned int)+0x74>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    33a6:	4638      	mov	r0, r7
    33a8:	f7ff fc28 	bl	2bfc <SdFile::addCluster()>
    33ac:	2800      	cmp	r0, #0
    33ae:	f43f af46 	beq.w	323e <SdFile::write(void const*, unsigned int)+0x12>
    33b2:	6a38      	ldr	r0, [r7, #32]
    33b4:	68ba      	ldr	r2, [r7, #8]
    33b6:	e774      	b.n	32a2 <SdFile::write(void const*, unsigned int)+0x76>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    33b8:	4658      	mov	r0, fp
    33ba:	f7fe ff91 	bl	22e0 <SDHC_CardWriteBlock(void const*, unsigned long)>
    33be:	fab0 f080 	clz	r0, r0
    33c2:	0940      	lsrs	r0, r0, #5
    33c4:	e7c7      	b.n	3356 <SdFile::write(void const*, unsigned int)+0x12a>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    33c6:	9b01      	ldr	r3, [sp, #4]
    33c8:	2b00      	cmp	r3, #0
    33ca:	f47f af50 	bne.w	326e <SdFile::write(void const*, unsigned int)+0x42>
    33ce:	e008      	b.n	33e2 <SdFile::write(void const*, unsigned int)+0x1b6>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    33d0:	4b0f      	ldr	r3, [pc, #60]	; (3410 <SdFile::write(void const*, unsigned int)+0x1e4>)
    33d2:	797a      	ldrb	r2, [r7, #5]
    33d4:	681b      	ldr	r3, [r3, #0]
    33d6:	b123      	cbz	r3, 33e2 <SdFile::write(void const*, unsigned int)+0x1b6>
    33d8:	9b01      	ldr	r3, [sp, #4]
    33da:	b113      	cbz	r3, 33e2 <SdFile::write(void const*, unsigned int)+0x1b6>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    33dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    33e0:	717a      	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    33e2:	0712      	lsls	r2, r2, #28
    33e4:	d509      	bpl.n	33fa <SdFile::write(void const*, unsigned int)+0x1ce>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    33e6:	79bb      	ldrb	r3, [r7, #6]
    33e8:	2b00      	cmp	r3, #0
    33ea:	f43f af28 	beq.w	323e <SdFile::write(void const*, unsigned int)+0x12>
    33ee:	4638      	mov	r0, r7
    33f0:	f7ff fbce 	bl	2b90 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    33f4:	2800      	cmp	r0, #0
    33f6:	f43f af22 	beq.w	323e <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    33fa:	9801      	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    33fc:	b005      	add	sp, #20
    33fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3402:	bf00      	nop
    3404:	1fff1408 	.word	0x1fff1408
    3408:	1fff160c 	.word	0x1fff160c
    340c:	0ffffff8 	.word	0x0ffffff8
    3410:	1fff1400 	.word	0x1fff1400
    3414:	1fff140c 	.word	0x1fff140c
    3418:	1fff0738 	.word	0x1fff0738

0000341c <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    341c:	b500      	push	{lr}
    341e:	b083      	sub	sp, #12
    3420:	ab02      	add	r3, sp, #8
  return write(&b, 1);
    3422:	2201      	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3424:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    3428:	4619      	mov	r1, r3
    342a:	f7ff feff 	bl	322c <SdFile::write(void const*, unsigned int)>
}
    342e:	b003      	add	sp, #12
    3430:	f85d fb04 	ldr.w	pc, [sp], #4

00003434 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    3434:	b570      	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    3436:	4c1a      	ldr	r4, [pc, #104]	; (34a0 <SdVolume::cacheFlush()+0x6c>)
    3438:	7823      	ldrb	r3, [r4, #0]
    343a:	b90b      	cbnz	r3, 3440 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    343c:	2001      	movs	r0, #1
}
    343e:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    3440:	4d18      	ldr	r5, [pc, #96]	; (34a4 <SdVolume::cacheFlush()+0x70>)
    3442:	4b19      	ldr	r3, [pc, #100]	; (34a8 <SdVolume::cacheFlush()+0x74>)
    3444:	6828      	ldr	r0, [r5, #0]
    3446:	6819      	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3448:	7803      	ldrb	r3, [r0, #0]
    344a:	2bfe      	cmp	r3, #254	; 0xfe
    344c:	d017      	beq.n	347e <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    344e:	4a17      	ldr	r2, [pc, #92]	; (34ac <SdVolume::cacheFlush()+0x78>)
    3450:	f7ff fb50 	bl	2af4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    3454:	b188      	cbz	r0, 347a <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    3456:	4e16      	ldr	r6, [pc, #88]	; (34b0 <SdVolume::cacheFlush()+0x7c>)
    3458:	6831      	ldr	r1, [r6, #0]
    345a:	b919      	cbnz	r1, 3464 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    345c:	2300      	movs	r3, #0
    345e:	7023      	strb	r3, [r4, #0]
  }
  return true;
    3460:	2001      	movs	r0, #1
    3462:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    3464:	6828      	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3466:	7803      	ldrb	r3, [r0, #0]
    3468:	2bfe      	cmp	r3, #254	; 0xfe
    346a:	d00f      	beq.n	348c <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    346c:	4a0f      	ldr	r2, [pc, #60]	; (34ac <SdVolume::cacheFlush()+0x78>)
    346e:	f7ff fb41 	bl	2af4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    3472:	b110      	cbz	r0, 347a <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    3474:	2300      	movs	r3, #0
    3476:	6033      	str	r3, [r6, #0]
    3478:	e7f0      	b.n	345c <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    347a:	2000      	movs	r0, #0
    347c:	bd70      	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    347e:	480b      	ldr	r0, [pc, #44]	; (34ac <SdVolume::cacheFlush()+0x78>)
    3480:	f7fe ff2e 	bl	22e0 <SDHC_CardWriteBlock(void const*, unsigned long)>
    3484:	fab0 f080 	clz	r0, r0
    3488:	0940      	lsrs	r0, r0, #5
    348a:	e7e3      	b.n	3454 <SdVolume::cacheFlush()+0x20>
    348c:	4807      	ldr	r0, [pc, #28]	; (34ac <SdVolume::cacheFlush()+0x78>)
    348e:	f7fe ff27 	bl	22e0 <SDHC_CardWriteBlock(void const*, unsigned long)>
    3492:	fab0 f080 	clz	r0, r0
    3496:	0940      	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    3498:	2800      	cmp	r0, #0
    349a:	d1eb      	bne.n	3474 <SdVolume::cacheFlush()+0x40>
    349c:	e7ed      	b.n	347a <SdVolume::cacheFlush()+0x46>
    349e:	bf00      	nop
    34a0:	1fff160c 	.word	0x1fff160c
    34a4:	1fff1408 	.word	0x1fff1408
    34a8:	1fff0738 	.word	0x1fff0738
    34ac:	1fff140c 	.word	0x1fff140c
    34b0:	1fff1404 	.word	0x1fff1404

000034b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    34b4:	b570      	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    34b6:	4d12      	ldr	r5, [pc, #72]	; (3500 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    34b8:	682b      	ldr	r3, [r5, #0]
    34ba:	4283      	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    34bc:	460e      	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    34be:	d011      	beq.n	34e4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    34c0:	4604      	mov	r4, r0
    if (!cacheFlush()) return false;
    34c2:	f7ff ffb7 	bl	3434 <SdVolume::cacheFlush()>
    34c6:	b908      	cbnz	r0, 34cc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    34c8:	2000      	movs	r0, #0
    34ca:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    34cc:	4b0d      	ldr	r3, [pc, #52]	; (3504 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    34ce:	6818      	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    34d0:	7803      	ldrb	r3, [r0, #0]
    34d2:	2bfe      	cmp	r3, #254	; 0xfe
    34d4:	d00c      	beq.n	34f0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    34d6:	4a0c      	ldr	r2, [pc, #48]	; (3508 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    34d8:	4621      	mov	r1, r4
    34da:	f7ff fa45 	bl	2968 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    34de:	2800      	cmp	r0, #0
    34e0:	d0f2      	beq.n	34c8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    34e2:	602c      	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    34e4:	4b09      	ldr	r3, [pc, #36]	; (350c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
    34e6:	7819      	ldrb	r1, [r3, #0]
    34e8:	4331      	orrs	r1, r6
    34ea:	7019      	strb	r1, [r3, #0]
  return true;
    34ec:	2001      	movs	r0, #1
}
    34ee:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    34f0:	4621      	mov	r1, r4
    34f2:	4805      	ldr	r0, [pc, #20]	; (3508 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    34f4:	f7fe fe72 	bl	21dc <SDHC_CardReadBlock(void*, unsigned long)>
    34f8:	fab0 f080 	clz	r0, r0
    34fc:	0940      	lsrs	r0, r0, #5
    34fe:	e7ee      	b.n	34de <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    3500:	1fff0738 	.word	0x1fff0738
    3504:	1fff1408 	.word	0x1fff1408
    3508:	1fff140c 	.word	0x1fff140c
    350c:	1fff160c 	.word	0x1fff160c

00003510 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3512:	f890 3020 	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    3516:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3518:	2b10      	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    351a:	4b1a      	ldr	r3, [pc, #104]	; (3584 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    351c:	4605      	mov	r5, r0
    351e:	460e      	mov	r6, r1
    3520:	4617      	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    3522:	681b      	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3524:	d016      	beq.n	3554 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    3526:	eb04 14d1 	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    352a:	429c      	cmp	r4, r3
    352c:	d116      	bne.n	355c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    352e:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    3532:	4a15      	ldr	r2, [pc, #84]	; (3588 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    3534:	f842 7026 	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3538:	4914      	ldr	r1, [pc, #80]	; (358c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    353a:	7e28      	ldrb	r0, [r5, #24]
    353c:	780a      	ldrb	r2, [r1, #0]
    353e:	2801      	cmp	r0, #1
    3540:	f042 0201 	orr.w	r2, r2, #1
    3544:	700a      	strb	r2, [r1, #0]
    3546:	d918      	bls.n	357a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    3548:	68a9      	ldr	r1, [r5, #8]
    354a:	4a11      	ldr	r2, [pc, #68]	; (3590 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    354c:	440b      	add	r3, r1
    354e:	6013      	str	r3, [r2, #0]
  return true;
    3550:	2001      	movs	r0, #1
    3552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3554:	eb04 2411 	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    3558:	429c      	cmp	r4, r3
    355a:	d008      	beq.n	356e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    355c:	2100      	movs	r1, #0
    355e:	4620      	mov	r0, r4
    3560:	f7ff ffa8 	bl	34b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3564:	b150      	cbz	r0, 357c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    3566:	f895 3020 	ldrb.w	r3, [r5, #32]
    356a:	2b10      	cmp	r3, #16
    356c:	d107      	bne.n	357e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    356e:	b2f6      	uxtb	r6, r6
    3570:	4a05      	ldr	r2, [pc, #20]	; (3588 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    3572:	4623      	mov	r3, r4
    3574:	f822 7016 	strh.w	r7, [r2, r6, lsl #1]
    3578:	e7de      	b.n	3538 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    357a:	2001      	movs	r0, #1
}
    357c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    357e:	4623      	mov	r3, r4
    3580:	e7d5      	b.n	352e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    3582:	bf00      	nop
    3584:	1fff0738 	.word	0x1fff0738
    3588:	1fff140c 	.word	0x1fff140c
    358c:	1fff160c 	.word	0x1fff160c
    3590:	1fff1404 	.word	0x1fff1404

00003594 <SdVolume::cacheZeroBlock(unsigned long)>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    3594:	b510      	push	{r4, lr}
    3596:	4604      	mov	r4, r0
  if (!cacheFlush()) return false;
    3598:	f7ff ff4c 	bl	3434 <SdVolume::cacheFlush()>
    359c:	b178      	cbz	r0, 35be <SdVolume::cacheZeroBlock(unsigned long)+0x2a>
    359e:	4b08      	ldr	r3, [pc, #32]	; (35c0 <SdVolume::cacheZeroBlock(unsigned long)+0x2c>)

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    35a0:	2100      	movs	r1, #0
    35a2:	f503 7200 	add.w	r2, r3, #512	; 0x200
    35a6:	f803 1f01 	strb.w	r1, [r3, #1]!
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    35aa:	4293      	cmp	r3, r2
    35ac:	d1fb      	bne.n	35a6 <SdVolume::cacheZeroBlock(unsigned long)+0x12>
    35ae:	4a05      	ldr	r2, [pc, #20]	; (35c4 <SdVolume::cacheZeroBlock(unsigned long)+0x30>)
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    35b0:	4905      	ldr	r1, [pc, #20]	; (35c8 <SdVolume::cacheZeroBlock(unsigned long)+0x34>)
    35b2:	7813      	ldrb	r3, [r2, #0]
    35b4:	600c      	str	r4, [r1, #0]
    35b6:	f043 0301 	orr.w	r3, r3, #1
    35ba:	7013      	strb	r3, [r2, #0]
  cacheSetDirty();
  return true;
    35bc:	2001      	movs	r0, #1
}
    35be:	bd10      	pop	{r4, pc}
    35c0:	1fff140b 	.word	0x1fff140b
    35c4:	1fff160c 	.word	0x1fff160c
    35c8:	1fff0738 	.word	0x1fff0738

000035cc <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    35cc:	68c3      	ldr	r3, [r0, #12]
    35ce:	3301      	adds	r3, #1
    35d0:	428b      	cmp	r3, r1
    35d2:	d318      	bcc.n	3606 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    35d4:	b570      	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    35d6:	f890 3020 	ldrb.w	r3, [r0, #32]
    35da:	2b10      	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    35dc:	4b15      	ldr	r3, [pc, #84]	; (3634 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    35de:	4604      	mov	r4, r0
    35e0:	4616      	mov	r6, r2
    35e2:	460d      	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    35e4:	69c0      	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    35e6:	681b      	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    35e8:	d00f      	beq.n	360a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    35ea:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    35ee:	4298      	cmp	r0, r3
    35f0:	d10f      	bne.n	3612 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    35f2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    35f6:	4b10      	ldr	r3, [pc, #64]	; (3638 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    35f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    35fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    3600:	6033      	str	r3, [r6, #0]
    3602:	2001      	movs	r0, #1
  }
  return true;
}
    3604:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    3606:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    3608:	4770      	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    360a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    360e:	4298      	cmp	r0, r3
    3610:	d007      	beq.n	3622 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    3612:	2100      	movs	r1, #0
    3614:	f7ff ff4e 	bl	34b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3618:	b150      	cbz	r0, 3630 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    361a:	f894 3020 	ldrb.w	r3, [r4, #32]
    361e:	2b10      	cmp	r3, #16
    3620:	d1e7      	bne.n	35f2 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    3622:	b2e9      	uxtb	r1, r5
    3624:	4b04      	ldr	r3, [pc, #16]	; (3638 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    3626:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    362a:	6033      	str	r3, [r6, #0]
    362c:	2001      	movs	r0, #1
    362e:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    3630:	2000      	movs	r0, #0
    3632:	bd70      	pop	{r4, r5, r6, pc}
    3634:	1fff0738 	.word	0x1fff0738
    3638:	1fff140c 	.word	0x1fff140c

0000363c <SdVolume::chainSize(unsigned long, unsigned long*) const>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    363c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3640:	b082      	sub	sp, #8
    3642:	ad02      	add	r5, sp, #8
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3644:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3698 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x5c>
    3648:	f845 1d04 	str.w	r1, [r5, #-4]!
    364c:	4604      	mov	r4, r0
    364e:	4691      	mov	r9, r2
  uint32_t s = 0;
    3650:	f04f 0a00 	mov.w	sl, #0
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    3654:	f44f 7700 	mov.w	r7, #512	; 0x200
    3658:	f64f 76f8 	movw	r6, #65528	; 0xfff8
    365c:	e00c      	b.n	3678 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x3c>
    365e:	f894 3020 	ldrb.w	r3, [r4, #32]
    3662:	7c22      	ldrb	r2, [r4, #16]
  } while (!isEOC(cluster));
    3664:	9901      	ldr	r1, [sp, #4]
    3666:	2b10      	cmp	r3, #16
    3668:	bf14      	ite	ne
    366a:	4643      	movne	r3, r8
    366c:	4633      	moveq	r3, r6
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    366e:	fa07 f202 	lsl.w	r2, r7, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    3672:	4299      	cmp	r1, r3
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    3674:	4492      	add	sl, r2
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    3676:	d208      	bcs.n	368a <SdVolume::chainSize(unsigned long, unsigned long*) const+0x4e>
    if (!fatGet(cluster, &cluster)) return false;
    3678:	462a      	mov	r2, r5
    367a:	4620      	mov	r0, r4
    367c:	f7ff ffa6 	bl	35cc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3680:	2800      	cmp	r0, #0
    3682:	d1ec      	bne.n	365e <SdVolume::chainSize(unsigned long, unsigned long*) const+0x22>
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    3684:	b002      	add	sp, #8
    3686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
    368a:	2001      	movs	r0, #1
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    368c:	f8c9 a000 	str.w	sl, [r9]
  return true;
}
    3690:	b002      	add	sp, #8
    3692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3696:	bf00      	nop
    3698:	0ffffff8 	.word	0x0ffffff8

0000369c <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    36a0:	6817      	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    36a2:	b083      	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    36a4:	b36f      	cbz	r7, 3702 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    36a6:	3701      	adds	r7, #1

    // don't save new start location
    setStart = false;
    36a8:	f04f 0a00 	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    36ac:	68c3      	ldr	r3, [r0, #12]
    36ae:	f103 0801 	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    36b2:	b313      	cbz	r3, 36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    36b4:	468b      	mov	fp, r1
    36b6:	4606      	mov	r6, r0
    36b8:	4691      	mov	r9, r2
    36ba:	463c      	mov	r4, r7
    36bc:	2500      	movs	r5, #0
    36be:	e005      	b.n	36cc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    36c0:	461c      	mov	r4, r3
    36c2:	461f      	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    36c4:	68f3      	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    36c6:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    36c8:	42ab      	cmp	r3, r5
    36ca:	d916      	bls.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    36cc:	45a0      	cmp	r8, r4
      bgnCluster = endCluster = 2;
    36ce:	bf38      	it	cc
    36d0:	2402      	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    36d2:	4621      	mov	r1, r4
    36d4:	aa01      	add	r2, sp, #4
    36d6:	4630      	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    36d8:	bf38      	it	cc
    36da:	4627      	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    36dc:	f7ff ff76 	bl	35cc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    36e0:	1c63      	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    36e2:	1bd9      	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    36e4:	b148      	cbz	r0, 36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    36e6:	9a01      	ldr	r2, [sp, #4]
    36e8:	2a00      	cmp	r2, #0
    36ea:	d1e9      	bne.n	36c0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    36ec:	458b      	cmp	fp, r1
    36ee:	d010      	beq.n	3712 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    36f0:	461c      	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    36f2:	68f3      	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    36f4:	3501      	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    36f6:	42ab      	cmp	r3, r5
    36f8:	d8e8      	bhi.n	36cc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    36fa:	2000      	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    36fc:	b003      	add	sp, #12
    36fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    3702:	f1a1 0a01 	sub.w	sl, r1, #1
    3706:	faba fa8a 	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    370a:	6807      	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    370c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
    3710:	e7cc      	b.n	36ac <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3712:	2c01      	cmp	r4, #1
    3714:	d9f1      	bls.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3716:	68f3      	ldr	r3, [r6, #12]
    3718:	3301      	adds	r3, #1
    371a:	429c      	cmp	r4, r3
    371c:	d8ed      	bhi.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    371e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    3722:	4621      	mov	r1, r4
    3724:	4630      	mov	r0, r6
    3726:	f7ff fef3 	bl	3510 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    372a:	2800      	cmp	r0, #0
    372c:	d0e5      	beq.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    372e:	42a7      	cmp	r7, r4
    3730:	d214      	bcs.n	375c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3732:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3734:	2c01      	cmp	r4, #1
    3736:	d9e0      	bls.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3738:	68f3      	ldr	r3, [r6, #12]
    373a:	3301      	adds	r3, #1
    373c:	429c      	cmp	r4, r3
    373e:	d8dc      	bhi.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3740:	1c62      	adds	r2, r4, #1
    3742:	4621      	mov	r1, r4
    3744:	4630      	mov	r0, r6
    3746:	f7ff fee3 	bl	3510 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    374a:	2800      	cmp	r0, #0
    374c:	d0d5      	beq.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    374e:	42a7      	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3750:	f104 34ff 	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3754:	d002      	beq.n	375c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3756:	2c01      	cmp	r4, #1
    3758:	d1ee      	bne.n	3738 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    375a:	e7ce      	b.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    375c:	f8d9 1000 	ldr.w	r1, [r9]
    3760:	b159      	cbz	r1, 377a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3762:	2901      	cmp	r1, #1
    3764:	d9c9      	bls.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3766:	68f3      	ldr	r3, [r6, #12]
    3768:	3301      	adds	r3, #1
    376a:	4299      	cmp	r1, r3
    376c:	d8c5      	bhi.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    376e:	463a      	mov	r2, r7
    3770:	4630      	mov	r0, r6
    3772:	f7ff fecd 	bl	3510 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    3776:	2800      	cmp	r0, #0
    3778:	d0bf      	beq.n	36fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    377a:	f8c9 7000 	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    377e:	f1ba 0f00 	cmp.w	sl, #0
    3782:	d001      	beq.n	3788 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    3784:	3701      	adds	r7, #1
    3786:	6037      	str	r7, [r6, #0]

  return true;
    3788:	2001      	movs	r0, #1
    378a:	e7b7      	b.n	36fc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

0000378c <SdVolume::fatPut(unsigned long, unsigned long)>:
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    378c:	2901      	cmp	r1, #1
    378e:	d90c      	bls.n	37aa <SdVolume::fatPut(unsigned long, unsigned long)+0x1e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3790:	68c3      	ldr	r3, [r0, #12]
    3792:	3301      	adds	r3, #1
    3794:	4299      	cmp	r1, r3
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3796:	b410      	push	{r4}
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3798:	d803      	bhi.n	37a2 <SdVolume::fatPut(unsigned long, unsigned long)+0x16>
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    379a:	f85d 4b04 	ldr.w	r4, [sp], #4
    379e:	f7ff beb7 	b.w	3510 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    37a2:	2000      	movs	r0, #0
    37a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    37a8:	4770      	bx	lr
    37aa:	2000      	movs	r0, #0
    37ac:	4770      	bx	lr
    37ae:	bf00      	nop

000037b0 <SdVolume::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    37b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // clear free cluster location
  allocSearchStart_ = 2;
    37b2:	2302      	movs	r3, #2
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    37b4:	b083      	sub	sp, #12
    37b6:	4605      	mov	r5, r0
    37b8:	4f13      	ldr	r7, [pc, #76]	; (3808 <SdVolume::freeChain(unsigned long)+0x58>)
  // clear free cluster location
  allocSearchStart_ = 2;
    37ba:	6003      	str	r3, [r0, #0]
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    37bc:	460c      	mov	r4, r1
    37be:	f64f 76f8 	movw	r6, #65528	; 0xfff8
    37c2:	e00f      	b.n	37e4 <SdVolume::freeChain(unsigned long)+0x34>
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    37c4:	68eb      	ldr	r3, [r5, #12]
    37c6:	3301      	adds	r3, #1
    37c8:	429c      	cmp	r4, r3
    37ca:	d816      	bhi.n	37fa <SdVolume::freeChain(unsigned long)+0x4a>
    37cc:	f7ff fea0 	bl	3510 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    37d0:	b198      	cbz	r0, 37fa <SdVolume::freeChain(unsigned long)+0x4a>
    37d2:	f895 3020 	ldrb.w	r3, [r5, #32]

    cluster = next;
    37d6:	9c01      	ldr	r4, [sp, #4]
    37d8:	2b10      	cmp	r3, #16
    37da:	bf0c      	ite	eq
    37dc:	4633      	moveq	r3, r6
    37de:	463b      	movne	r3, r7
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    37e0:	429c      	cmp	r4, r3
    37e2:	d20d      	bcs.n	3800 <SdVolume::freeChain(unsigned long)+0x50>
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    37e4:	aa01      	add	r2, sp, #4
    37e6:	4621      	mov	r1, r4
    37e8:	4628      	mov	r0, r5
    37ea:	f7ff feef 	bl	35cc <SdVolume::fatGet(unsigned long, unsigned long*) const>
    37ee:	4621      	mov	r1, r4
    37f0:	2200      	movs	r2, #0
    37f2:	b110      	cbz	r0, 37fa <SdVolume::freeChain(unsigned long)+0x4a>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    37f4:	2c01      	cmp	r4, #1
    37f6:	4628      	mov	r0, r5
    37f8:	d8e4      	bhi.n	37c4 <SdVolume::freeChain(unsigned long)+0x14>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    37fa:	2000      	movs	r0, #0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    37fc:	b003      	add	sp, #12
    37fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    3800:	2001      	movs	r0, #1
}
    3802:	b003      	add	sp, #12
    3804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3806:	bf00      	nop
    3808:	0ffffff8 	.word	0x0ffffff8

0000380c <SdVolume::init(Sd2Card*, unsigned char)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    380e:	4b3e      	ldr	r3, [pc, #248]	; (3908 <SdVolume::init(Sd2Card*, unsigned char)+0xfc>)
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    3810:	4605      	mov	r5, r0
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    3812:	6019      	str	r1, [r3, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    3814:	4614      	mov	r4, r2
    3816:	b1da      	cbz	r2, 3850 <SdVolume::init(Sd2Card*, unsigned char)+0x44>
    if (part > 4)return false;
    3818:	2a04      	cmp	r2, #4
    381a:	d901      	bls.n	3820 <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    381c:	2000      	movs	r0, #0
    381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    3820:	2100      	movs	r1, #0
    3822:	4608      	mov	r0, r1
    3824:	f7ff fe46 	bl	34b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3828:	2800      	cmp	r0, #0
    382a:	d0f7      	beq.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    382c:	4b37      	ldr	r3, [pc, #220]	; (390c <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
    382e:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    3832:	f892 21ae 	ldrb.w	r2, [r2, #430]	; 0x1ae
    3836:	0652      	lsls	r2, r2, #25
    3838:	d1f0      	bne.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
    383a:	341b      	adds	r4, #27
    383c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    3840:	f8d4 300a 	ldr.w	r3, [r4, #10]
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    3844:	2b63      	cmp	r3, #99	; 0x63
    3846:	d9e9      	bls.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    3848:	f8d4 4006 	ldr.w	r4, [r4, #6]
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    384c:	2c00      	cmp	r4, #0
    384e:	d0e5      	beq.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    3850:	2100      	movs	r1, #0
    3852:	4620      	mov	r0, r4
    3854:	f7ff fe2e 	bl	34b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3858:	2800      	cmp	r0, #0
    385a:	d0df      	beq.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    385c:	4a2b      	ldr	r2, [pc, #172]	; (390c <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
    385e:	f8b2 300b 	ldrh.w	r3, [r2, #11]
    3862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3866:	d1d9      	bne.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    3868:	7c11      	ldrb	r1, [r2, #16]
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    386a:	2900      	cmp	r1, #0
    386c:	d0d6      	beq.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->fatCount == 0 ||
    386e:	89d3      	ldrh	r3, [r2, #14]
    3870:	2b00      	cmp	r3, #0
    3872:	d0d3      	beq.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    3874:	7b56      	ldrb	r6, [r2, #13]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    3876:	2e00      	cmp	r6, #0
    3878:	d0d0      	beq.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    387a:	2300      	movs	r3, #0
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    387c:	7629      	strb	r1, [r5, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
    387e:	712e      	strb	r6, [r5, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    3880:	742b      	strb	r3, [r5, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3882:	2701      	movs	r7, #1
    3884:	e003      	b.n	388e <SdVolume::init(Sd2Card*, unsigned char)+0x82>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3886:	2909      	cmp	r1, #9
    3888:	460b      	mov	r3, r1
    388a:	7429      	strb	r1, [r5, #16]
    388c:	d0c6      	beq.n	381c <SdVolume::init(Sd2Card*, unsigned char)+0x10>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    388e:	fa07 f003 	lsl.w	r0, r7, r3
    3892:	42b0      	cmp	r0, r6
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3894:	f103 0101 	add.w	r1, r3, #1
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3898:	d1f5      	bne.n	3886 <SdVolume::init(Sd2Card*, unsigned char)+0x7a>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    389a:	8ad6      	ldrh	r6, [r2, #22]
    389c:	491b      	ldr	r1, [pc, #108]	; (390c <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    389e:	b906      	cbnz	r6, 38a2 <SdVolume::init(Sd2Card*, unsigned char)+0x96>
    38a0:	6a4e      	ldr	r6, [r1, #36]	; 0x24

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    38a2:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    38a6:	60ae      	str	r6, [r5, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    38a8:	44a6      	add	lr, r4
    38aa:	f8c5 e01c 	str.w	lr, [r5, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    38ae:	f8b2 1011 	ldrh.w	r1, [r2, #17]

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    38b2:	7c17      	ldrb	r7, [r2, #16]
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    38b4:	8469      	strh	r1, [r5, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    38b6:	0148      	lsls	r0, r1, #5

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    38b8:	fb06 e607 	mla	r6, r6, r7, lr

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    38bc:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    38c0:	eb06 2060 	add.w	r0, r6, r0, asr #9

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    38c4:	626e      	str	r6, [r5, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    38c6:	6168      	str	r0, [r5, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    38c8:	f8b2 1013 	ldrh.w	r1, [r2, #19]
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    38cc:	4e0f      	ldr	r6, [pc, #60]	; (390c <SdVolume::init(Sd2Card*, unsigned char)+0x100>)
  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    38ce:	b901      	cbnz	r1, 38d2 <SdVolume::init(Sd2Card*, unsigned char)+0xc6>
    38d0:	6a31      	ldr	r1, [r6, #32]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    38d2:	1a24      	subs	r4, r4, r0
    38d4:	440c      	add	r4, r1
    38d6:	fa24 f303 	lsr.w	r3, r4, r3

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    38da:	f640 71f4 	movw	r1, #4084	; 0xff4
    38de:	428b      	cmp	r3, r1
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    38e0:	60eb      	str	r3, [r5, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    38e2:	d90b      	bls.n	38fc <SdVolume::init(Sd2Card*, unsigned char)+0xf0>
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    38e4:	f64f 71f4 	movw	r1, #65524	; 0xfff4
    38e8:	428b      	cmp	r3, r1
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    38ea:	bf85      	ittet	hi
    38ec:	6ad3      	ldrhi	r3, [r2, #44]	; 0x2c
    38ee:	626b      	strhi	r3, [r5, #36]	; 0x24

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    38f0:	2310      	movls	r3, #16
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
    38f2:	2320      	movhi	r3, #32
    38f4:	f885 3020 	strb.w	r3, [r5, #32]
  }
  return true;
    38f8:	2001      	movs	r0, #1
}
    38fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    38fc:	230c      	movs	r3, #12
    38fe:	f885 3020 	strb.w	r3, [r5, #32]
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    3902:	2001      	movs	r0, #1
    3904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3906:	bf00      	nop
    3908:	1fff1408 	.word	0x1fff1408
    390c:	1fff140c 	.word	0x1fff140c

00003910 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3910:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3912:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3914:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3916:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3918:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    391a:	d003      	beq.n	3924 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    391c:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3920:	f001 bd9e 	b.w	5460 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3924:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3926:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    392a:	4718      	bx	r3

0000392c <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    392c:	b4f0      	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    392e:	4b46      	ldr	r3, [pc, #280]	; (3a48 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    3930:	4a46      	ldr	r2, [pc, #280]	; (3a4c <_spi_dma_rxISR0()+0x120>)
    3932:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3934:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    3936:	7901      	ldrb	r1, [r0, #4]
    3938:	7011      	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    393a:	4945      	ldr	r1, [pc, #276]	; (3a50 <_spi_dma_rxISR0()+0x124>)
    393c:	7922      	ldrb	r2, [r4, #4]
    393e:	700a      	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    3940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3942:	7900      	ldrb	r0, [r0, #4]
    3944:	7008      	strb	r0, [r1, #0]
    3946:	2a00      	cmp	r2, #0
    3948:	d046      	beq.n	39d8 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    394a:	6859      	ldr	r1, [r3, #4]
    394c:	68c9      	ldr	r1, [r1, #12]
    394e:	428a      	cmp	r2, r1
    3950:	d83e      	bhi.n	39d0 <_spi_dma_rxISR0()+0xa4>
    3952:	6821      	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    3954:	8bcc      	ldrh	r4, [r1, #30]
    3956:	0424      	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    3958:	f102 30ff 	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    395c:	d465      	bmi.n	3a2a <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    395e:	f3c0 000e 	ubfx	r0, r0, #0, #15
    3962:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    3964:	8bc8      	ldrh	r0, [r1, #30]
    3966:	b280      	uxth	r0, r0
    3968:	82c8      	strh	r0, [r1, #22]
    396a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    396c:	6809      	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    396e:	8bc8      	ldrh	r0, [r1, #30]
    3970:	0400      	lsls	r0, r0, #16
    3972:	d452      	bmi.n	3a1a <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    3974:	f3c2 000e 	ubfx	r0, r2, #0, #15
    3978:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    397a:	8bc8      	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    397c:	2400      	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    397e:	b280      	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    3980:	f112 32ff 	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    3984:	82c8      	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    3986:	bf18      	it	ne
    3988:	2201      	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    398a:	631c      	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    398c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    398e:	482e      	ldr	r0, [pc, #184]	; (3a48 <_spi_dma_rxISR0()+0x11c>)
    3990:	6809      	ldr	r1, [r1, #0]
    3992:	680d      	ldr	r5, [r1, #0]
    3994:	f100 042c 	add.w	r4, r0, #44	; 0x2c
    3998:	42a5      	cmp	r5, r4
    399a:	d036      	beq.n	3a0a <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    399c:	6800      	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    399e:	68c4      	ldr	r4, [r0, #12]
    39a0:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    39a4:	680c      	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    39a6:	680d      	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    39a8:	bf15      	itete	ne
    39aa:	8824      	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    39ac:	7824      	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    39ae:	3502      	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    39b0:	3501      	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    39b2:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    39b6:	600d      	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    39b8:	6344      	str	r4, [r0, #52]	; 0x34
    39ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    39bc:	4b25      	ldr	r3, [pc, #148]	; (3a54 <_spi_dma_rxISR0()+0x128>)
    39be:	7909      	ldrb	r1, [r1, #4]
    39c0:	7019      	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    39c2:	4921      	ldr	r1, [pc, #132]	; (3a48 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    39c4:	b112      	cbz	r2, 39cc <_spi_dma_rxISR0()+0xa0>
    39c6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    39c8:	7912      	ldrb	r2, [r2, #4]
    39ca:	701a      	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    39cc:	bcf0      	pop	{r4, r5, r6, r7}
    39ce:	4770      	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    39d0:	1a52      	subs	r2, r2, r1
    39d2:	631a      	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    39d4:	2201      	movs	r2, #1
    39d6:	e7d9      	b.n	398c <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    39d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    39da:	6819      	ldr	r1, [r3, #0]
    39dc:	6805      	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    39de:	4c1e      	ldr	r4, [pc, #120]	; (3a58 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    39e0:	630a      	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    39e2:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    39e4:	68cc      	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    39e6:	682d      	ldr	r5, [r5, #0]
    39e8:	4e1c      	ldr	r6, [pc, #112]	; (3a5c <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    39ea:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    39ee:	2703      	movs	r7, #3
    39f0:	42b5      	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    39f2:	60cc      	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    39f4:	f883 702d 	strb.w	r7, [r3, #45]	; 0x2d
    39f8:	d11f      	bne.n	3a3a <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    39fa:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    39fc:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    39fe:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3a00:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3a02:	d01e      	beq.n	3a42 <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3a04:	bcf0      	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3a06:	f001 bd2b 	b.w	5460 <EventResponder::triggerEventNotImmediate()>
    3a0a:	6801      	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3a0c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    3a10:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    3a12:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    3a16:	6348      	str	r0, [r1, #52]	; 0x34
    3a18:	e7cf      	b.n	39ba <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    3a1a:	8bcc      	ldrh	r4, [r1, #30]
    3a1c:	f3c2 0008 	ubfx	r0, r2, #0, #9
    3a20:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    3a24:	4320      	orrs	r0, r4
    3a26:	83c8      	strh	r0, [r1, #30]
    3a28:	e7a7      	b.n	397a <_spi_dma_rxISR0()+0x4e>
    3a2a:	8bcc      	ldrh	r4, [r1, #30]
    3a2c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    3a30:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    3a34:	4320      	orrs	r0, r4
    3a36:	83c8      	strh	r0, [r1, #30]
    3a38:	e794      	b.n	3964 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3a3a:	462b      	mov	r3, r5
    3a3c:	4611      	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3a3e:	bcf0      	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3a40:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3a42:	6883      	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3a44:	bcf0      	pop	{r4, r5, r6, r7}
    3a46:	4718      	bx	r3
    3a48:	1fff073c 	.word	0x1fff073c
    3a4c:	4000801f 	.word	0x4000801f
    3a50:	4000801c 	.word	0x4000801c
    3a54:	4000801b 	.word	0x4000801b
    3a58:	ff0f0000 	.word	0xff0f0000
    3a5c:	00003911 	.word	0x00003911

00003a60 <SPIClass::begin()>:
    3a60:	e890 000c 	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    3a64:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    3a66:	681c      	ldr	r4, [r3, #0]
    3a68:	6859      	ldr	r1, [r3, #4]
    3a6a:	6825      	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    3a6c:	4f16      	ldr	r7, [pc, #88]	; (3ac8 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    3a6e:	4e17      	ldr	r6, [pc, #92]	; (3acc <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    3a70:	4329      	orrs	r1, r5
    3a72:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    3a74:	4d16      	ldr	r5, [pc, #88]	; (3ad0 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    3a76:	4917      	ldr	r1, [pc, #92]	; (3ad4 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    3a78:	6017      	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    3a7a:	60d6      	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    3a7c:	6115      	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    3a7e:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    3a80:	7a41      	ldrb	r1, [r0, #9]
    3a82:	4a15      	ldr	r2, [pc, #84]	; (3ad8 <SPIClass::begin()+0x78>)
    3a84:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    3a86:	310c      	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    3a88:	f894 402c 	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    3a8c:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    3a90:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    3a94:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    3a96:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    3a98:	7a01      	ldrb	r1, [r0, #8]
    3a9a:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    3a9c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    3aa0:	7e24      	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    3aa2:	69cd      	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    3aa4:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    3aa8:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    3aaa:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3aac:	7a81      	ldrb	r1, [r0, #10]
    3aae:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    3ab0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3ab4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    3ab8:	6c59      	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3aba:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    3abe:	bcf0      	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    3ac0:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    3ac2:	6019      	str	r1, [r3, #0]
}
    3ac4:	4770      	bx	lr
    3ac6:	bf00      	nop
    3ac8:	001f4001 	.word	0x001f4001
    3acc:	38001001 	.word	0x38001001
    3ad0:	78001001 	.word	0x78001001
    3ad4:	801f0000 	.word	0x801f0000
    3ad8:	0000b53c 	.word	0x0000b53c

00003adc <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3adc:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3ade:	4c10      	ldr	r4, [pc, #64]	; (3b20 <fault_isr+0x44>)
    3ae0:	e008      	b.n	3af4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3ae2:	6823      	ldr	r3, [r4, #0]
    3ae4:	0559      	lsls	r1, r3, #21
    3ae6:	d40d      	bmi.n	3b04 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3ae8:	6823      	ldr	r3, [r4, #0]
    3aea:	051a      	lsls	r2, r3, #20
    3aec:	d40f      	bmi.n	3b0e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3aee:	6823      	ldr	r3, [r4, #0]
    3af0:	04db      	lsls	r3, r3, #19
    3af2:	d411      	bmi.n	3b18 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3af4:	6823      	ldr	r3, [r4, #0]
    3af6:	0358      	lsls	r0, r3, #13
    3af8:	d5f3      	bpl.n	3ae2 <fault_isr+0x6>
    3afa:	f000 fd19 	bl	4530 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3afe:	6823      	ldr	r3, [r4, #0]
    3b00:	0559      	lsls	r1, r3, #21
    3b02:	d5f1      	bpl.n	3ae8 <fault_isr+0xc>
    3b04:	f002 f986 	bl	5e14 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3b08:	6823      	ldr	r3, [r4, #0]
    3b0a:	051a      	lsls	r2, r3, #20
    3b0c:	d5ef      	bpl.n	3aee <fault_isr+0x12>
    3b0e:	f002 fa17 	bl	5f40 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3b12:	6823      	ldr	r3, [r4, #0]
    3b14:	04db      	lsls	r3, r3, #19
    3b16:	d5ed      	bpl.n	3af4 <fault_isr+0x18>
    3b18:	f000 fac6 	bl	40a8 <uart2_status_isr>
    3b1c:	e7ea      	b.n	3af4 <fault_isr+0x18>
    3b1e:	bf00      	nop
    3b20:	40048034 	.word	0x40048034

00003b24 <unused_isr>:
	}
}

void unused_isr(void)
{
    3b24:	b508      	push	{r3, lr}
	fault_isr();
    3b26:	f7ff ffd9 	bl	3adc <fault_isr>
    3b2a:	bf00      	nop

00003b2c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3b2c:	4b01      	ldr	r3, [pc, #4]	; (3b34 <startup_early_hook+0x8>)
    3b2e:	2210      	movs	r2, #16
    3b30:	801a      	strh	r2, [r3, #0]
    3b32:	4770      	bx	lr
    3b34:	40052000 	.word	0x40052000

00003b38 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3b38:	4770      	bx	lr
    3b3a:	bf00      	nop

00003b3c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3b3c:	4909      	ldr	r1, [pc, #36]	; (3b64 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3b3e:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3b40:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    3b42:	b130      	cbz	r0, 3b52 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    3b44:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    3b46:	4418      	add	r0, r3
    3b48:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    3b4c:	4290      	cmp	r0, r2
    3b4e:	d202      	bcs.n	3b56 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3b50:	6008      	str	r0, [r1, #0]
	}
	return prev;
    3b52:	4618      	mov	r0, r3
}
    3b54:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    3b56:	f003 f885 	bl	6c64 <__errno>
    3b5a:	230c      	movs	r3, #12
    3b5c:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    3b5e:	f04f 30ff 	mov.w	r0, #4294967295
    3b62:	bd08      	pop	{r3, pc}
    3b64:	1fff077c 	.word	0x1fff077c

00003b68 <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    3b68:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    3b6c:	b970      	cbnz	r0, 3b8c <nvic_execution_priority+0x24>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3b6e:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    3b72:	b96b      	cbnz	r3, 3b90 <nvic_execution_priority+0x28>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3b74:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    3b78:	b95a      	cbnz	r2, 3b92 <nvic_execution_priority+0x2a>

#pragma GCC diagnostic pop

int nvic_execution_priority(void)
{
	uint32_t priority=256;
    3b7a:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    3b7e:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    3b82:	b12b      	cbz	r3, 3b90 <nvic_execution_priority+0x28>
    3b84:	4298      	cmp	r0, r3
    3b86:	bf28      	it	cs
    3b88:	4618      	movcs	r0, r3
	return priority;
    3b8a:	4770      	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    3b8c:	f04f 30ff 	mov.w	r0, #4294967295
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
	if (basepri > 0 && basepri < priority) priority = basepri;
	return priority;
}
    3b90:	4770      	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    3b92:	2a0f      	cmp	r2, #15
    3b94:	d801      	bhi.n	3b9a <nvic_execution_priority+0x32>
    3b96:	4618      	mov	r0, r3
    3b98:	e7f1      	b.n	3b7e <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    3b9a:	4b01      	ldr	r3, [pc, #4]	; (3ba0 <nvic_execution_priority+0x38>)
    3b9c:	5cd0      	ldrb	r0, [r2, r3]
    3b9e:	e7ee      	b.n	3b7e <nvic_execution_priority+0x16>
    3ba0:	e000e3f0 	.word	0xe000e3f0

00003ba4 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    3ba4:	4a08      	ldr	r2, [pc, #32]	; (3bc8 <kinetis_hsrun_disable+0x24>)
    3ba6:	7813      	ldrb	r3, [r2, #0]
    3ba8:	2b80      	cmp	r3, #128	; 0x80
    3baa:	d001      	beq.n	3bb0 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    3bac:	2000      	movs	r0, #0
}
    3bae:	4770      	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3bb0:	4906      	ldr	r1, [pc, #24]	; (3bcc <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3bb2:	4b07      	ldr	r3, [pc, #28]	; (3bd0 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    3bb4:	4807      	ldr	r0, [pc, #28]	; (3bd4 <kinetis_hsrun_disable+0x30>)
    3bb6:	6008      	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    3bb8:	2100      	movs	r1, #0
    3bba:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    3bbc:	7813      	ldrb	r3, [r2, #0]
    3bbe:	2b80      	cmp	r3, #128	; 0x80
    3bc0:	d0fc      	beq.n	3bbc <kinetis_hsrun_disable+0x18>
		return 1;
    3bc2:	2001      	movs	r0, #1
    3bc4:	4770      	bx	lr
    3bc6:	bf00      	nop
    3bc8:	4007e003 	.word	0x4007e003
    3bcc:	40048044 	.word	0x40048044
    3bd0:	4007e001 	.word	0x4007e001
    3bd4:	22280000 	.word	0x22280000

00003bd8 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    3bd8:	4a09      	ldr	r2, [pc, #36]	; (3c00 <kinetis_hsrun_enable+0x28>)
    3bda:	7813      	ldrb	r3, [r2, #0]
    3bdc:	2b01      	cmp	r3, #1
    3bde:	d001      	beq.n	3be4 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    3be0:	2000      	movs	r0, #0
}
    3be2:	4770      	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    3be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3be8:	f503 23fc 	add.w	r3, r3, #516096	; 0x7e000
    3bec:	2160      	movs	r1, #96	; 0x60
    3bee:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3bf0:	7813      	ldrb	r3, [r2, #0]
    3bf2:	2b80      	cmp	r3, #128	; 0x80
    3bf4:	d1fc      	bne.n	3bf0 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3bf6:	4b03      	ldr	r3, [pc, #12]	; (3c04 <kinetis_hsrun_enable+0x2c>)
    3bf8:	4a03      	ldr	r2, [pc, #12]	; (3c08 <kinetis_hsrun_enable+0x30>)
    3bfa:	601a      	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3bfc:	2001      	movs	r0, #1
    3bfe:	4770      	bx	lr
    3c00:	4007e003 	.word	0x4007e003
    3c04:	40048044 	.word	0x40048044
    3c08:	02060000 	.word	0x02060000

00003c0c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    3c0c:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    3c0e:	4b11      	ldr	r3, [pc, #68]	; (3c54 <digitalWrite.part.1+0x48>)
    3c10:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    3c14:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    3c18:	b134      	cbz	r4, 3c28 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    3c1a:	2301      	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    3c1c:	b179      	cbz	r1, 3c3e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    3c1e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3c22:	f85d 4b04 	ldr.w	r4, [sp], #4
    3c26:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    3c28:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    3c2c:	685b      	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3c2e:	681a      	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    3c30:	b951      	cbnz	r1, 3c48 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    3c32:	f022 0202 	bic.w	r2, r2, #2
    3c36:	601a      	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3c38:	f85d 4b04 	ldr.w	r4, [sp], #4
    3c3c:	4770      	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    3c3e:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3c42:	f85d 4b04 	ldr.w	r4, [sp], #4
    3c46:	4770      	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3c48:	f042 0203 	orr.w	r2, r2, #3
    3c4c:	601a      	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3c52:	4770      	bx	lr
    3c54:	0000b53c 	.word	0x0000b53c

00003c58 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    3c58:	4a1c      	ldr	r2, [pc, #112]	; (3ccc <pinMode.part.2+0x74>)
    3c5a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3c5e:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    3c60:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3c62:	d011      	beq.n	3c88 <pinMode.part.2+0x30>
    3c64:	2904      	cmp	r1, #4
    3c66:	d01b      	beq.n	3ca0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    3c68:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    3c6c:	2200      	movs	r2, #0
    3c6e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    3c72:	b129      	cbz	r1, 3c80 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    3c74:	2902      	cmp	r1, #2
    3c76:	d020      	beq.n	3cba <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    3c78:	2903      	cmp	r1, #3
    3c7a:	d022      	beq.n	3cc2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    3c7c:	601a      	str	r2, [r3, #0]
    3c7e:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    3c80:	f44f 7280 	mov.w	r2, #256	; 0x100
    3c84:	601a      	str	r2, [r3, #0]
    3c86:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3c88:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3c8c:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3c90:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3c94:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    3c96:	681a      	ldr	r2, [r3, #0]
    3c98:	f022 0220 	bic.w	r2, r2, #32
    3c9c:	601a      	str	r2, [r3, #0]
    3c9e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3ca0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3ca4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3ca8:	2001      	movs	r0, #1
    3caa:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3cae:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    3cb0:	681a      	ldr	r2, [r3, #0]
    3cb2:	f042 0220 	orr.w	r2, r2, #32
    3cb6:	601a      	str	r2, [r3, #0]
    3cb8:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    3cba:	f240 1203 	movw	r2, #259	; 0x103
    3cbe:	601a      	str	r2, [r3, #0]
    3cc0:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    3cc2:	f44f 7281 	mov.w	r2, #258	; 0x102
    3cc6:	601a      	str	r2, [r3, #0]
    3cc8:	4770      	bx	lr
    3cca:	bf00      	nop
    3ccc:	0000b53c 	.word	0x0000b53c

00003cd0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    3cd0:	b430      	push	{r4, r5}
	RTC_SR = 0;
    3cd2:	4b05      	ldr	r3, [pc, #20]	; (3ce8 <rtc_set+0x18>)
	RTC_TPR = 0;
    3cd4:	4d05      	ldr	r5, [pc, #20]	; (3cec <rtc_set+0x1c>)
	RTC_TSR = t;
    3cd6:	4c06      	ldr	r4, [pc, #24]	; (3cf0 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    3cd8:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    3cda:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    3cdc:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    3cde:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    3ce0:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    3ce2:	6019      	str	r1, [r3, #0]
}
    3ce4:	bc30      	pop	{r4, r5}
    3ce6:	4770      	bx	lr
    3ce8:	4003d014 	.word	0x4003d014
    3cec:	4003d004 	.word	0x4003d004
    3cf0:	4003d000 	.word	0x4003d000

00003cf4 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    3cf4:	283f      	cmp	r0, #63	; 0x3f
    3cf6:	d801      	bhi.n	3cfc <digitalWrite+0x8>
    3cf8:	f7ff bf88 	b.w	3c0c <digitalWrite.part.1>
    3cfc:	4770      	bx	lr
    3cfe:	bf00      	nop

00003d00 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    3d00:	283f      	cmp	r0, #63	; 0x3f
    3d02:	d801      	bhi.n	3d08 <pinMode+0x8>
    3d04:	f7ff bfa8 	b.w	3c58 <pinMode.part.2>
    3d08:	4770      	bx	lr
    3d0a:	bf00      	nop

00003d0c <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    3d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3d10:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3d12:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    3d14:	4f22      	ldr	r7, [pc, #136]	; (3da0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3d16:	4b23      	ldr	r3, [pc, #140]	; (3da4 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3d18:	4a23      	ldr	r2, [pc, #140]	; (3da8 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3d1a:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    3d1c:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3d1e:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    3d20:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3d22:	0152      	lsls	r2, r2, #5
    3d24:	d502      	bpl.n	3d2c <delay+0x20>
    3d26:	2b32      	cmp	r3, #50	; 0x32
    3d28:	bf88      	it	hi
    3d2a:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    3d2c:	b3b5      	cbz	r5, 3d9c <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    3d2e:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
    3d32:	f203 331f 	addw	r3, r3, #799	; 0x31f
    3d36:	4e1d      	ldr	r6, [pc, #116]	; (3dac <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3d38:	f8df 9068 	ldr.w	r9, [pc, #104]	; 3da4 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3d3c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3da8 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    3d40:	089b      	lsrs	r3, r3, #2
    3d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3d46:	fba6 1303 	umull	r1, r3, r6, r3
    3d4a:	fb02 f404 	mul.w	r4, r2, r4
    3d4e:	eb04 0493 	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3d52:	b672      	cpsid	i
	current = SYST_CVR;
    3d54:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    3d58:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3d5a:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    3d5e:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3d60:	f5c1 332f 	rsb	r3, r1, #179200	; 0x2bc00
    3d64:	f203 331f 	addw	r3, r3, #799	; 0x31f
    3d68:	089b      	lsrs	r3, r3, #2
    3d6a:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3d6e:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3d72:	ebc4 0393 	rsb	r3, r4, r3, lsr #2
    3d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3d7a:	d002      	beq.n	3d82 <delay+0x76>
    3d7c:	2932      	cmp	r1, #50	; 0x32
    3d7e:	bf88      	it	hi
    3d80:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3d82:	fb00 3302 	mla	r3, r0, r2, r3
    3d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    3d8a:	d304      	bcc.n	3d96 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    3d8c:	3d01      	subs	r5, #1
    3d8e:	d005      	beq.n	3d9c <delay+0x90>
				start += 1000;
    3d90:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    3d94:	e7dd      	b.n	3d52 <delay+0x46>
			}
			yield();
    3d96:	f001 fe9b 	bl	5ad0 <yield>
		}
    3d9a:	e7da      	b.n	3d52 <delay+0x46>
    3d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3da0:	1fff1610 	.word	0x1fff1610
    3da4:	e000e018 	.word	0xe000e018
    3da8:	e000ed04 	.word	0xe000ed04
    3dac:	16c16c17 	.word	0x16c16c17

00003db0 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    3db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3db2:	4b4e      	ldr	r3, [pc, #312]	; (3eec <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3db4:	484e      	ldr	r0, [pc, #312]	; (3ef0 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    3db6:	f8df c15c 	ldr.w	ip, [pc, #348]	; 3f14 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    3dba:	4c4e      	ldr	r4, [pc, #312]	; (3ef4 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    3dbc:	494e      	ldr	r1, [pc, #312]	; (3ef8 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3dbe:	f8df e158 	ldr.w	lr, [pc, #344]	; 3f18 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    3dc2:	4e4e      	ldr	r6, [pc, #312]	; (3efc <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    3dc4:	4d4e      	ldr	r5, [pc, #312]	; (3f00 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    3dc6:	4f4f      	ldr	r7, [pc, #316]	; (3f04 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3dc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    3dcc:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    3dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3dd2:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    3dd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3dd8:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    3dda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3dde:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    3de0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3de4:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3de6:	2200      	movs	r2, #0
    3de8:	6002      	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3dea:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    3dec:	f64e 70ff 	movw	r0, #61439	; 0xefff
    3df0:	f8cc 0000 	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3df4:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    3df8:	6023      	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    3dfa:	f50e 2e01 	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    3dfe:	600b      	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    3e00:	6033      	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    3e02:	602b      	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    3e04:	f506 2600 	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    3e08:	603b      	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    3e0a:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    3e0e:	62a3      	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    3e10:	f507 2700 	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    3e14:	628b      	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    3e16:	f504 2401 	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    3e1a:	f501 2101 	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    3e1e:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    3e22:	f605 75e8 	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    3e26:	f507 677f 	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    3e2a:	3110      	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    3e2c:	f10e 0e10 	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    3e30:	3420      	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    3e32:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    3e34:	602b      	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    3e36:	f8ce 3000 	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    3e3a:	603b      	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    3e3c:	600b      	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    3e3e:	6023      	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3e40:	4c31      	ldr	r4, [pc, #196]	; (3f08 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    3e42:	61bb      	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    3e44:	618b      	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3e46:	2109      	movs	r1, #9
    3e48:	6021      	str	r1, [r4, #0]
	FTM1_CNT = 0;
    3e4a:	f5a7 2700 	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    3e4e:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    3e52:	3f20      	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    3e54:	3408      	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    3e56:	603a      	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    3e58:	6020      	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    3e5a:	60bb      	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    3e5c:	60e3      	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3e5e:	f847 1c04 	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    3e62:	f504 24fd 	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    3e66:	f507 27fe 	add.w	r7, r7, #520192	; 0x7f000
    3e6a:	3704      	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    3e6c:	f204 74fc 	addw	r4, r4, #2044	; 0x7fc
    3e70:	6022      	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    3e72:	6038      	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    3e74:	60a3      	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    3e76:	60fb      	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3e78:	f844 1c04 	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    3e7c:	3408      	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    3e7e:	f604 74fc 	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    3e82:	f8c7 2ffc 	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    3e86:	6020      	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    3e88:	f5a4 24e1 	sub.w	r4, r4, #460800	; 0x70800
    3e8c:	f2a4 74dc 	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    3e90:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    3e92:	602b      	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3e94:	f8c7 1ff8 	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    3e98:	6821      	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    3e9a:	481c      	ldr	r0, [pc, #112]	; (3f0c <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    3e9c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    3ea0:	6021      	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    3ea2:	6801      	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    3ea4:	4c1a      	ldr	r4, [pc, #104]	; (3f10 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    3ea6:	f50e 4e7f 	add.w	lr, lr, #65280	; 0xff00
    3eaa:	f10e 0ee8 	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    3eae:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    3eb2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    3eb6:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    3eba:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    3ebe:	6001      	str	r1, [r0, #0]
	TPM1_CNT = 0;
    3ec0:	f8ce 2000 	str.w	r2, [lr]
	TPM1_MOD = 32767;
    3ec4:	f647 71ff 	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    3ec8:	2208      	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    3eca:	6039      	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    3ecc:	6033      	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    3ece:	602b      	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    3ed0:	6022      	str	r2, [r4, #0]
#endif
	analog_init();
    3ed2:	f001 fef9 	bl	5cc8 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    3ed6:	2019      	movs	r0, #25
    3ed8:	f7ff ff18 	bl	3d0c <delay>
	usb_init();
    3edc:	f001 f890 	bl	5000 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    3ee0:	f240 1013 	movw	r0, #275	; 0x113
}
    3ee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    3ee8:	f7ff bf10 	b.w	3d0c <delay>
    3eec:	e000e104 	.word	0xe000e104
    3ef0:	40038004 	.word	0x40038004
    3ef4:	40038014 	.word	0x40038014
    3ef8:	4003801c 	.word	0x4003801c
    3efc:	40038024 	.word	0x40038024
    3f00:	4003802c 	.word	0x4003802c
    3f04:	40038034 	.word	0x40038034
    3f08:	40038000 	.word	0x40038000
    3f0c:	40048004 	.word	0x40048004
    3f10:	400c9000 	.word	0x400c9000
    3f14:	40038008 	.word	0x40038008
    3f18:	4003800c 	.word	0x4003800c

00003f1c <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    3f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    3f20:	4b21      	ldr	r3, [pc, #132]	; (3fa8 <serial3_putchar.part.0+0x8c>)
    3f22:	681b      	ldr	r3, [r3, #0]
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    3f24:	4607      	mov	r7, r0
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    3f26:	b10b      	cbz	r3, 3f2c <serial3_putchar.part.0+0x10>
    3f28:	2201      	movs	r2, #1
    3f2a:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    3f2c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3fb8 <serial3_putchar.part.0+0x9c>
    3f30:	4d1e      	ldr	r5, [pc, #120]	; (3fac <serial3_putchar.part.0+0x90>)
    3f32:	f899 4000 	ldrb.w	r4, [r9]
    3f36:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3fbc <serial3_putchar.part.0+0xa0>
	if (++head >= SERIAL3_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    3f3a:	4e1d      	ldr	r6, [pc, #116]	; (3fb0 <serial3_putchar.part.0+0x94>)
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
	head = tx_buffer_head;
	if (++head >= SERIAL3_TX_BUFFER_SIZE) head = 0;
    3f3c:	3401      	adds	r4, #1
    3f3e:	2c27      	cmp	r4, #39	; 0x27
    3f40:	bf8a      	itet	hi
    3f42:	f04f 0a00 	movhi.w	sl, #0
    3f46:	fa5f fa84 	uxtbls.w	sl, r4
    3f4a:	4654      	movhi	r4, sl
	while (tx_buffer_tail == head) {
    3f4c:	46ab      	mov	fp, r5
    3f4e:	782b      	ldrb	r3, [r5, #0]
    3f50:	42a3      	cmp	r3, r4
    3f52:	d116      	bne.n	3f82 <serial3_putchar.part.0+0x66>
		int priority = nvic_execution_priority();
    3f54:	f7ff fe08 	bl	3b68 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    3f58:	2840      	cmp	r0, #64	; 0x40
    3f5a:	dc1f      	bgt.n	3f9c <serial3_putchar.part.0+0x80>
			if ((UART2_S1 & UART_S1_TDRE)) {
    3f5c:	7933      	ldrb	r3, [r6, #4]
    3f5e:	061b      	lsls	r3, r3, #24
    3f60:	d5f5      	bpl.n	3f4e <serial3_putchar.part.0+0x32>
				uint32_t tail = tx_buffer_tail;
    3f62:	f89b 3000 	ldrb.w	r3, [fp]
				if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3f66:	3301      	adds	r3, #1
    3f68:	2b27      	cmp	r3, #39	; 0x27
    3f6a:	bf86      	itte	hi
    3f6c:	2200      	movhi	r2, #0
    3f6e:	4613      	movhi	r3, r2
    3f70:	b2da      	uxtbls	r2, r3
				n = tx_buffer[tail];
    3f72:	f818 3003 	ldrb.w	r3, [r8, r3]
    3f76:	b2db      	uxtb	r3, r3
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
    3f78:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    3f7a:	702a      	strb	r2, [r5, #0]

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
	head = tx_buffer_head;
	if (++head >= SERIAL3_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
    3f7c:	782b      	ldrb	r3, [r5, #0]
    3f7e:	42a3      	cmp	r3, r4
    3f80:	d0e8      	beq.n	3f54 <serial3_putchar.part.0+0x38>
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    3f82:	490c      	ldr	r1, [pc, #48]	; (3fb4 <serial3_putchar.part.0+0x98>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    3f84:	4b0a      	ldr	r3, [pc, #40]	; (3fb0 <serial3_putchar.part.0+0x94>)
			}
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
    3f86:	b2ff      	uxtb	r7, r7
    3f88:	f808 7004 	strb.w	r7, [r8, r4]
	transmitting = 1;
    3f8c:	2001      	movs	r0, #1
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    3f8e:	22ac      	movs	r2, #172	; 0xac
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    3f90:	7008      	strb	r0, [r1, #0]
	tx_buffer_head = head;
    3f92:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    3f96:	70da      	strb	r2, [r3, #3]
    3f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				n = tx_buffer[tail];
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    3f9c:	28ff      	cmp	r0, #255	; 0xff
    3f9e:	ddd6      	ble.n	3f4e <serial3_putchar.part.0+0x32>
			yield(); // wait
    3fa0:	f001 fd96 	bl	5ad0 <yield>
    3fa4:	e7d3      	b.n	3f4e <serial3_putchar.part.0+0x32>
    3fa6:	bf00      	nop
    3fa8:	1fff1688 	.word	0x1fff1688
    3fac:	1fff1685 	.word	0x1fff1685
    3fb0:	4006c000 	.word	0x4006c000
    3fb4:	1fff1684 	.word	0x1fff1684
    3fb8:	1fff168c 	.word	0x1fff168c
    3fbc:	1fff161c 	.word	0x1fff161c

00003fc0 <serial3_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    3fc0:	4b1b      	ldr	r3, [pc, #108]	; (4030 <serial3_begin+0x70>)
	rx_buffer_head = 0;
    3fc2:	f8df c090 	ldr.w	ip, [pc, #144]	; 4054 <serial3_begin+0x94>
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    3fc6:	681a      	ldr	r2, [r3, #0]
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    3fc8:	491a      	ldr	r1, [pc, #104]	; (4034 <serial3_begin+0x74>)
#define C2_TX_ACTIVE		C2_ENABLE | UART_C2_TIE
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
    3fca:	b5f0      	push	{r4, r5, r6, r7, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    3fcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    3fd0:	4d19      	ldr	r5, [pc, #100]	; (4038 <serial3_begin+0x78>)
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    3fd2:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
    3fd4:	f8df e080 	ldr.w	lr, [pc, #128]	; 4058 <serial3_begin+0x98>
	tx_buffer_tail = 0;
    3fd8:	4f18      	ldr	r7, [pc, #96]	; (403c <serial3_begin+0x7c>)
	transmitting = 0;
    3fda:	4e19      	ldr	r6, [pc, #100]	; (4040 <serial3_begin+0x80>)
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    3fdc:	4c19      	ldr	r4, [pc, #100]	; (4044 <serial3_begin+0x84>)
#define C2_TX_INACTIVE		C2_ENABLE

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    3fde:	2300      	movs	r3, #0
    3fe0:	f88c 3000 	strb.w	r3, [ip]
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    3fe4:	f44f 7251 	mov.w	r2, #836	; 0x344

void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    3fe8:	702b      	strb	r3, [r5, #0]
		case 8:  CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 20: CORE_PIN20_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
    3fea:	281f      	cmp	r0, #31
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    3fec:	f240 3513 	movw	r5, #787	; 0x313
void serial3_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
    3ff0:	f88e 3000 	strb.w	r3, [lr]
	tx_buffer_tail = 0;
    3ff4:	703b      	strb	r3, [r7, #0]
	transmitting = 0;
    3ff6:	7033      	strb	r3, [r6, #0]
#if defined(KINETISK)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    3ff8:	6025      	str	r5, [r4, #0]
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    3ffa:	600a      	str	r2, [r1, #0]
		case 8:  CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 20: CORE_PIN20_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
    3ffc:	d811      	bhi.n	4022 <serial3_begin+0x62>
    3ffe:	4619      	mov	r1, r3
    4000:	2401      	movs	r4, #1
	UART2_BDH = (divisor >> 13) & 0x1F;
    4002:	4a11      	ldr	r2, [pc, #68]	; (4048 <serial3_begin+0x88>)
	UART2_BDH = (divisor >> 8) & 0x1F;
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    4004:	4d11      	ldr	r5, [pc, #68]	; (404c <serial3_begin+0x8c>)
		case 20: CORE_PIN20_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
	UART2_BDH = (divisor >> 13) & 0x1F;
    4006:	7011      	strb	r1, [r2, #0]
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    4008:	4811      	ldr	r0, [pc, #68]	; (4050 <serial3_begin+0x90>)
	}
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
    400a:	7054      	strb	r4, [r2, #1]
	UART2_C4 = divisor & 0x1F;
	UART2_C1 = 0;
    400c:	2100      	movs	r1, #0
	if (divisor < 1) divisor = 1;
	UART2_BDH = (divisor >> 8) & 0x1F;
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
    400e:	272c      	movs	r7, #44	; 0x2c
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    4010:	2640      	movs	r6, #64	; 0x40
#endif
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
	UART2_C4 = divisor & 0x1F;
    4012:	7293      	strb	r3, [r2, #10]
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    4014:	2408      	movs	r4, #8
#if defined(HAS_KINETISK_UART2)
	if (divisor < 32) divisor = 32;
	UART2_BDH = (divisor >> 13) & 0x1F;
	UART2_BDL = (divisor >> 5) & 0xFF;
	UART2_C4 = divisor & 0x1F;
	UART2_C1 = 0;
    4016:	7091      	strb	r1, [r2, #2]
	UART2_PFIFO = 0;
    4018:	7411      	strb	r1, [r2, #16]
	if (divisor < 1) divisor = 1;
	UART2_BDH = (divisor >> 8) & 0x1F;
	UART2_BDL = divisor & 0xFF;
	UART2_C1 = 0;
#endif
	UART2_C2 = C2_TX_INACTIVE;
    401a:	70d7      	strb	r7, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    401c:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    401e:	6004      	str	r4, [r0, #0]
    4020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4022:	f3c0 3144 	ubfx	r1, r0, #13, #5
    4026:	f3c0 1447 	ubfx	r4, r0, #5, #8
    402a:	f000 031f 	and.w	r3, r0, #31
    402e:	e7e8      	b.n	4002 <serial3_begin+0x42>
    4030:	40048034 	.word	0x40048034
    4034:	4004c00c 	.word	0x4004c00c
    4038:	1fff1619 	.word	0x1fff1619
    403c:	1fff1685 	.word	0x1fff1685
    4040:	1fff1684 	.word	0x1fff1684
    4044:	4004c008 	.word	0x4004c008
    4048:	4006c000 	.word	0x4006c000
    404c:	e000e423 	.word	0xe000e423
    4050:	e000e104 	.word	0xe000e104
    4054:	1fff1618 	.word	0x1fff1618
    4058:	1fff168c 	.word	0x1fff168c

0000405c <serial3_write>:
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
}

void serial3_write(const void *buf, unsigned int count)
{
    405c:	b570      	push	{r4, r5, r6, lr}

void serial3_putchar(uint32_t c)
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    405e:	4e09      	ldr	r6, [pc, #36]	; (4084 <serial3_write+0x28>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
}

void serial3_write(const void *buf, unsigned int count)
{
    4060:	4604      	mov	r4, r0
    4062:	1845      	adds	r5, r0, r1
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    4064:	42ac      	cmp	r4, r5
    4066:	f104 0401 	add.w	r4, r4, #1
    406a:	d00a      	beq.n	4082 <serial3_write+0x26>

void serial3_putchar(uint32_t c)
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    406c:	6833      	ldr	r3, [r6, #0]
    406e:	04db      	lsls	r3, r3, #19
    4070:	d5f8      	bpl.n	4064 <serial3_write+0x8>
    4072:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    4076:	f7ff ff51 	bl	3f1c <serial3_putchar.part.0>
}

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    407a:	42ac      	cmp	r4, r5
    407c:	f104 0401 	add.w	r4, r4, #1
    4080:	d1f4      	bne.n	406c <serial3_write+0x10>
}
    4082:	bd70      	pop	{r4, r5, r6, pc}
    4084:	40048034 	.word	0x40048034

00004088 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4088:	4a05      	ldr	r2, [pc, #20]	; (40a0 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    408a:	4b06      	ldr	r3, [pc, #24]	; (40a4 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    408c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    408e:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4090:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4092:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4094:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    4096:	bf38      	it	cc
    4098:	3040      	addcc	r0, #64	; 0x40
    409a:	1ac0      	subs	r0, r0, r3
}
    409c:	4770      	bx	lr
    409e:	bf00      	nop
    40a0:	1fff1618 	.word	0x1fff1618
    40a4:	1fff1619 	.word	0x1fff1619

000040a8 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    40a8:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    40aa:	4b2b      	ldr	r3, [pc, #172]	; (4158 <uart2_status_isr+0xb0>)
    40ac:	791a      	ldrb	r2, [r3, #4]
    40ae:	0694      	lsls	r4, r2, #26
    40b0:	d51f      	bpl.n	40f2 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    40b2:	482a      	ldr	r0, [pc, #168]	; (415c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    40b4:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    40b6:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    40b8:	4929      	ldr	r1, [pc, #164]	; (4160 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    40ba:	3301      	adds	r3, #1
    40bc:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    40be:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    40c0:	bfc8      	it	gt
    40c2:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    40c4:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    40c6:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    40c8:	d003      	beq.n	40d2 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    40ca:	4c26      	ldr	r4, [pc, #152]	; (4164 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    40cc:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    40ce:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    40d0:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    40d2:	4a25      	ldr	r2, [pc, #148]	; (4168 <uart2_status_isr+0xc0>)
    40d4:	6811      	ldr	r1, [r2, #0]
    40d6:	b161      	cbz	r1, 40f2 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    40d8:	4a24      	ldr	r2, [pc, #144]	; (416c <uart2_status_isr+0xc4>)
    40da:	7812      	ldrb	r2, [r2, #0]
    40dc:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    40de:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    40e0:	bf36      	itet	cc
    40e2:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    40e6:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    40e8:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    40ea:	2b27      	cmp	r3, #39	; 0x27
    40ec:	bfc4      	itt	gt
    40ee:	2301      	movgt	r3, #1
    40f0:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    40f2:	4a19      	ldr	r2, [pc, #100]	; (4158 <uart2_status_isr+0xb0>)
    40f4:	78d3      	ldrb	r3, [r2, #3]
    40f6:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    40f8:	0618      	lsls	r0, r3, #24
    40fa:	d411      	bmi.n	4120 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    40fc:	065a      	lsls	r2, r3, #25
    40fe:	d50d      	bpl.n	411c <uart2_status_isr+0x74>
    4100:	4b15      	ldr	r3, [pc, #84]	; (4158 <uart2_status_isr+0xb0>)
    4102:	791b      	ldrb	r3, [r3, #4]
    4104:	065b      	lsls	r3, r3, #25
    4106:	d509      	bpl.n	411c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4108:	4b19      	ldr	r3, [pc, #100]	; (4170 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    410a:	491a      	ldr	r1, [pc, #104]	; (4174 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    410c:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    410e:	2200      	movs	r2, #0
    4110:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    4112:	b103      	cbz	r3, 4116 <uart2_status_isr+0x6e>
    4114:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    4116:	4b10      	ldr	r3, [pc, #64]	; (4158 <uart2_status_isr+0xb0>)
    4118:	222c      	movs	r2, #44	; 0x2c
    411a:	70da      	strb	r2, [r3, #3]
	}
}
    411c:	bc30      	pop	{r4, r5}
    411e:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    4120:	7911      	ldrb	r1, [r2, #4]
    4122:	0609      	lsls	r1, r1, #24
    4124:	d5ea      	bpl.n	40fc <uart2_status_isr+0x54>
		head = tx_buffer_head;
    4126:	4914      	ldr	r1, [pc, #80]	; (4178 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4128:	4810      	ldr	r0, [pc, #64]	; (416c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    412a:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    412c:	7801      	ldrb	r1, [r0, #0]
    412e:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    4130:	428c      	cmp	r4, r1
    4132:	d00d      	beq.n	4150 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    4134:	1c4a      	adds	r2, r1, #1
    4136:	2a27      	cmp	r2, #39	; 0x27
    4138:	bf84      	itt	hi
    413a:	2100      	movhi	r1, #0
    413c:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    413e:	4d0f      	ldr	r5, [pc, #60]	; (417c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    4140:	4c05      	ldr	r4, [pc, #20]	; (4158 <uart2_status_isr+0xb0>)
    4142:	bf98      	it	ls
    4144:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4146:	5caa      	ldrb	r2, [r5, r2]
    4148:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    414a:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    414c:	7001      	strb	r1, [r0, #0]
    414e:	e7d5      	b.n	40fc <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    4150:	216c      	movs	r1, #108	; 0x6c
    4152:	70d1      	strb	r1, [r2, #3]
    4154:	e7d2      	b.n	40fc <uart2_status_isr+0x54>
    4156:	bf00      	nop
    4158:	4006c000 	.word	0x4006c000
    415c:	1fff1618 	.word	0x1fff1618
    4160:	1fff1619 	.word	0x1fff1619
    4164:	1fff1644 	.word	0x1fff1644
    4168:	1fff1614 	.word	0x1fff1614
    416c:	1fff1685 	.word	0x1fff1685
    4170:	1fff1688 	.word	0x1fff1688
    4174:	1fff1684 	.word	0x1fff1684
    4178:	1fff168c 	.word	0x1fff168c
    417c:	1fff161c 	.word	0x1fff161c

00004180 <serial5_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial5_begin(uint32_t divisor)
{
	SIM_SCGC1 |= SIM_SCGC1_UART4;	// turn on clock, TODO: use bitband
    4180:	4b1b      	ldr	r3, [pc, #108]	; (41f0 <serial5_begin+0x70>)
	rx_buffer_head = 0;
    4182:	f8df c090 	ldr.w	ip, [pc, #144]	; 4214 <serial5_begin+0x94>
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial5_begin(uint32_t divisor)
{
	SIM_SCGC1 |= SIM_SCGC1_UART4;	// turn on clock, TODO: use bitband
    4186:	681a      	ldr	r2, [r3, #0]
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    4188:	491a      	ldr	r1, [pc, #104]	; (41f4 <serial5_begin+0x74>)
#define C2_TX_ACTIVE		C2_ENABLE | UART_C2_TIE
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial5_begin(uint32_t divisor)
{
    418a:	b5f0      	push	{r4, r5, r6, r7, lr}
	SIM_SCGC1 |= SIM_SCGC1_UART4;	// turn on clock, TODO: use bitband
    418c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    4190:	4d19      	ldr	r5, [pc, #100]	; (41f8 <serial5_begin+0x78>)
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial5_begin(uint32_t divisor)
{
	SIM_SCGC1 |= SIM_SCGC1_UART4;	// turn on clock, TODO: use bitband
    4192:	601a      	str	r2, [r3, #0]
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
    4194:	f8df e080 	ldr.w	lr, [pc, #128]	; 4218 <serial5_begin+0x98>
	tx_buffer_tail = 0;
    4198:	4f18      	ldr	r7, [pc, #96]	; (41fc <serial5_begin+0x7c>)
	transmitting = 0;
    419a:	4e19      	ldr	r6, [pc, #100]	; (4200 <serial5_begin+0x80>)
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    419c:	4c19      	ldr	r4, [pc, #100]	; (4204 <serial5_begin+0x84>)
#define C2_TX_INACTIVE		C2_ENABLE

void serial5_begin(uint32_t divisor)
{
	SIM_SCGC1 |= SIM_SCGC1_UART4;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    419e:	2300      	movs	r3, #0
    41a0:	f88c 3000 	strb.w	r3, [ip]
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    41a4:	f44f 7251 	mov.w	r2, #836	; 0x344

void serial5_begin(uint32_t divisor)
{
	SIM_SCGC1 |= SIM_SCGC1_UART4;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    41a8:	702b      	strb	r3, [r5, #0]
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	if (divisor < 32) divisor = 32;
    41aa:	281f      	cmp	r0, #31
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    41ac:	f240 3513 	movw	r5, #787	; 0x313
void serial5_begin(uint32_t divisor)
{
	SIM_SCGC1 |= SIM_SCGC1_UART4;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
    41b0:	f88e 3000 	strb.w	r3, [lr]
	tx_buffer_tail = 0;
    41b4:	703b      	strb	r3, [r7, #0]
	transmitting = 0;
    41b6:	7033      	strb	r3, [r6, #0]
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    41b8:	6025      	str	r5, [r4, #0]
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    41ba:	600a      	str	r2, [r1, #0]
	if (divisor < 32) divisor = 32;
    41bc:	d811      	bhi.n	41e2 <serial5_begin+0x62>
    41be:	4619      	mov	r1, r3
    41c0:	2401      	movs	r4, #1
	UART4_BDH = (divisor >> 13) & 0x1F;
    41c2:	4a11      	ldr	r2, [pc, #68]	; (4208 <serial5_begin+0x88>)
	UART4_BDL = (divisor >> 5) & 0xFF;
	UART4_C4 = divisor & 0x1F;
	UART4_C1 = 0;
	UART4_PFIFO = 0;
	UART4_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART4_STATUS, IRQ_PRIORITY);
    41c4:	4d11      	ldr	r5, [pc, #68]	; (420c <serial5_begin+0x8c>)
	tx_buffer_tail = 0;
	transmitting = 0;
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	if (divisor < 32) divisor = 32;
	UART4_BDH = (divisor >> 13) & 0x1F;
    41c6:	7011      	strb	r1, [r2, #0]
	UART4_C4 = divisor & 0x1F;
	UART4_C1 = 0;
	UART4_PFIFO = 0;
	UART4_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART4_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART4_STATUS);
    41c8:	4811      	ldr	r0, [pc, #68]	; (4210 <serial5_begin+0x90>)
	transmitting = 0;
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	if (divisor < 32) divisor = 32;
	UART4_BDH = (divisor >> 13) & 0x1F;
	UART4_BDL = (divisor >> 5) & 0xFF;
    41ca:	7054      	strb	r4, [r2, #1]
	UART4_C4 = divisor & 0x1F;
	UART4_C1 = 0;
    41cc:	2100      	movs	r1, #0
	UART4_PFIFO = 0;
	UART4_C2 = C2_TX_INACTIVE;
    41ce:	272c      	movs	r7, #44	; 0x2c
	NVIC_SET_PRIORITY(IRQ_UART4_STATUS, IRQ_PRIORITY);
    41d0:	2640      	movs	r6, #64	; 0x40
	CORE_PIN34_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	if (divisor < 32) divisor = 32;
	UART4_BDH = (divisor >> 13) & 0x1F;
	UART4_BDL = (divisor >> 5) & 0xFF;
	UART4_C4 = divisor & 0x1F;
    41d2:	7293      	strb	r3, [r2, #10]
	UART4_C1 = 0;
	UART4_PFIFO = 0;
	UART4_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART4_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART4_STATUS);
    41d4:	2404      	movs	r4, #4
	CORE_PIN33_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
	if (divisor < 32) divisor = 32;
	UART4_BDH = (divisor >> 13) & 0x1F;
	UART4_BDL = (divisor >> 5) & 0xFF;
	UART4_C4 = divisor & 0x1F;
	UART4_C1 = 0;
    41d6:	7091      	strb	r1, [r2, #2]
	UART4_PFIFO = 0;
    41d8:	7411      	strb	r1, [r2, #16]
	UART4_C2 = C2_TX_INACTIVE;
    41da:	70d7      	strb	r7, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART4_STATUS, IRQ_PRIORITY);
    41dc:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_UART4_STATUS);
    41de:	6004      	str	r4, [r0, #0]
    41e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41e2:	f3c0 3144 	ubfx	r1, r0, #13, #5
    41e6:	f3c0 1447 	ubfx	r4, r0, #5, #8
    41ea:	f000 031f 	and.w	r3, r0, #31
    41ee:	e7e8      	b.n	41c2 <serial5_begin+0x42>
    41f0:	40048028 	.word	0x40048028
    41f4:	4004d060 	.word	0x4004d060
    41f8:	1fff1695 	.word	0x1fff1695
    41fc:	1fff1701 	.word	0x1fff1701
    4200:	1fff1700 	.word	0x1fff1700
    4204:	4004d064 	.word	0x4004d064
    4208:	400ea000 	.word	0x400ea000
    420c:	e000e442 	.word	0xe000e442
    4210:	e000e108 	.word	0xe000e108
    4214:	1fff1694 	.word	0x1fff1694
    4218:	1fff1708 	.word	0x1fff1708

0000421c <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    421c:	4a05      	ldr	r2, [pc, #20]	; (4234 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    421e:	4b06      	ldr	r3, [pc, #24]	; (4238 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4220:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    4222:	781b      	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    4224:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    4226:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    4228:	4298      	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    422a:	bf38      	it	cc
    422c:	3040      	addcc	r0, #64	; 0x40
    422e:	1ac0      	subs	r0, r0, r3
}
    4230:	4770      	bx	lr
    4232:	bf00      	nop
    4234:	1fff1694 	.word	0x1fff1694
    4238:	1fff1695 	.word	0x1fff1695

0000423c <serial5_getchar>:

int serial5_getchar(void)
{
    423c:	b430      	push	{r4, r5}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    423e:	4b15      	ldr	r3, [pc, #84]	; (4294 <serial5_getchar+0x58>)
	tail = rx_buffer_tail;
    4240:	4c15      	ldr	r4, [pc, #84]	; (4298 <serial5_getchar+0x5c>)
int serial5_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4242:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    4244:	7823      	ldrb	r3, [r4, #0]
int serial5_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    4246:	b2d2      	uxtb	r2, r2
	tail = rx_buffer_tail;
    4248:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    424a:	429a      	cmp	r2, r3
    424c:	d01e      	beq.n	428c <serial5_getchar+0x50>
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
    424e:	3301      	adds	r3, #1
    4250:	2b3f      	cmp	r3, #63	; 0x3f
    4252:	d90e      	bls.n	4272 <serial5_getchar+0x36>
	c = rx_buffer[tail];
    4254:	4911      	ldr	r1, [pc, #68]	; (429c <serial5_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    4256:	4b12      	ldr	r3, [pc, #72]	; (42a0 <serial5_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4258:	7808      	ldrb	r0, [r1, #0]
	rx_buffer_tail = tail;
	if (rts_pin) {
    425a:	6819      	ldr	r1, [r3, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    425c:	2300      	movs	r3, #0

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    425e:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    4260:	7023      	strb	r3, [r4, #0]
	if (rts_pin) {
    4262:	b121      	cbz	r1, 426e <serial5_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
		else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    4264:	1ad3      	subs	r3, r2, r3
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    4266:	2b1a      	cmp	r3, #26
    4268:	dc01      	bgt.n	426e <serial5_getchar+0x32>
    426a:	2300      	movs	r3, #0
    426c:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    426e:	bc30      	pop	{r4, r5}
    4270:	4770      	bx	lr

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4272:	480a      	ldr	r0, [pc, #40]	; (429c <serial5_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    4274:	490a      	ldr	r1, [pc, #40]	; (42a0 <serial5_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    4276:	5cc0      	ldrb	r0, [r0, r3]
	rx_buffer_tail = tail;
	if (rts_pin) {
    4278:	6809      	ldr	r1, [r1, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    427a:	b2dd      	uxtb	r5, r3

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL5_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    427c:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    427e:	7025      	strb	r5, [r4, #0]
	if (rts_pin) {
    4280:	2900      	cmp	r1, #0
    4282:	d0f4      	beq.n	426e <serial5_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
    4284:	429a      	cmp	r2, r3
		else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    4286:	bf38      	it	cc
    4288:	3240      	addcc	r2, #64	; 0x40
    428a:	e7eb      	b.n	4264 <serial5_getchar+0x28>
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    428c:	f04f 30ff 	mov.w	r0, #4294967295
    4290:	e7ed      	b.n	426e <serial5_getchar+0x32>
    4292:	bf00      	nop
    4294:	1fff1694 	.word	0x1fff1694
    4298:	1fff1695 	.word	0x1fff1695
    429c:	1fff16c0 	.word	0x1fff16c0
    42a0:	1fff1690 	.word	0x1fff1690

000042a4 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    42a4:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    42a6:	4b2b      	ldr	r3, [pc, #172]	; (4354 <uart4_status_isr+0xb0>)
    42a8:	791a      	ldrb	r2, [r3, #4]
    42aa:	0694      	lsls	r4, r2, #26
    42ac:	d51f      	bpl.n	42ee <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    42ae:	482a      	ldr	r0, [pc, #168]	; (4358 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    42b0:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    42b2:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    42b4:	4929      	ldr	r1, [pc, #164]	; (435c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    42b6:	3301      	adds	r3, #1
    42b8:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    42ba:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    42bc:	bfc8      	it	gt
    42be:	2300      	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    42c0:	428b      	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    42c2:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    42c4:	d003      	beq.n	42ce <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    42c6:	4c26      	ldr	r4, [pc, #152]	; (4360 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    42c8:	b2d9      	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    42ca:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    42cc:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    42ce:	4a25      	ldr	r2, [pc, #148]	; (4364 <uart4_status_isr+0xc0>)
    42d0:	6811      	ldr	r1, [r2, #0]
    42d2:	b161      	cbz	r1, 42ee <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    42d4:	4a24      	ldr	r2, [pc, #144]	; (4368 <uart4_status_isr+0xc4>)
    42d6:	7812      	ldrb	r2, [r2, #0]
    42d8:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    42da:	4293      	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    42dc:	bf36      	itet	cc
    42de:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    42e2:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    42e4:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    42e6:	2b27      	cmp	r3, #39	; 0x27
    42e8:	bfc4      	itt	gt
    42ea:	2301      	movgt	r3, #1
    42ec:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    42ee:	4a19      	ldr	r2, [pc, #100]	; (4354 <uart4_status_isr+0xb0>)
    42f0:	78d3      	ldrb	r3, [r2, #3]
    42f2:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    42f4:	0618      	lsls	r0, r3, #24
    42f6:	d411      	bmi.n	431c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    42f8:	065a      	lsls	r2, r3, #25
    42fa:	d50d      	bpl.n	4318 <uart4_status_isr+0x74>
    42fc:	4b15      	ldr	r3, [pc, #84]	; (4354 <uart4_status_isr+0xb0>)
    42fe:	791b      	ldrb	r3, [r3, #4]
    4300:	065b      	lsls	r3, r3, #25
    4302:	d509      	bpl.n	4318 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    4304:	4b19      	ldr	r3, [pc, #100]	; (436c <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    4306:	491a      	ldr	r1, [pc, #104]	; (4370 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    4308:	681b      	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    430a:	2200      	movs	r2, #0
    430c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    430e:	b103      	cbz	r3, 4312 <uart4_status_isr+0x6e>
    4310:	701a      	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    4312:	4b10      	ldr	r3, [pc, #64]	; (4354 <uart4_status_isr+0xb0>)
    4314:	222c      	movs	r2, #44	; 0x2c
    4316:	70da      	strb	r2, [r3, #3]
	}
}
    4318:	bc30      	pop	{r4, r5}
    431a:	4770      	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    431c:	7911      	ldrb	r1, [r2, #4]
    431e:	0609      	lsls	r1, r1, #24
    4320:	d5ea      	bpl.n	42f8 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    4322:	4914      	ldr	r1, [pc, #80]	; (4374 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    4324:	4810      	ldr	r0, [pc, #64]	; (4368 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    4326:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    4328:	7801      	ldrb	r1, [r0, #0]
    432a:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    432c:	428c      	cmp	r4, r1
    432e:	d00d      	beq.n	434c <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    4330:	1c4a      	adds	r2, r1, #1
    4332:	2a27      	cmp	r2, #39	; 0x27
    4334:	bf84      	itt	hi
    4336:	2100      	movhi	r1, #0
    4338:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    433a:	4d0f      	ldr	r5, [pc, #60]	; (4378 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    433c:	4c05      	ldr	r4, [pc, #20]	; (4354 <uart4_status_isr+0xb0>)
    433e:	bf98      	it	ls
    4340:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    4342:	5caa      	ldrb	r2, [r5, r2]
    4344:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    4346:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    4348:	7001      	strb	r1, [r0, #0]
    434a:	e7d5      	b.n	42f8 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    434c:	216c      	movs	r1, #108	; 0x6c
    434e:	70d1      	strb	r1, [r2, #3]
    4350:	e7d2      	b.n	42f8 <uart4_status_isr+0x54>
    4352:	bf00      	nop
    4354:	400ea000 	.word	0x400ea000
    4358:	1fff1694 	.word	0x1fff1694
    435c:	1fff1695 	.word	0x1fff1695
    4360:	1fff16c0 	.word	0x1fff16c0
    4364:	1fff1690 	.word	0x1fff1690
    4368:	1fff1701 	.word	0x1fff1701
    436c:	1fff1704 	.word	0x1fff1704
    4370:	1fff1700 	.word	0x1fff1700
    4374:	1fff1708 	.word	0x1fff1708
    4378:	1fff1698 	.word	0x1fff1698

0000437c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    437c:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    437e:	2b03      	cmp	r3, #3
    4380:	d814      	bhi.n	43ac <usb_rx+0x30>
	__disable_irq();
    4382:	b672      	cpsid	i
	ret = rx_first[endpoint];
    4384:	490a      	ldr	r1, [pc, #40]	; (43b0 <usb_rx+0x34>)
    4386:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    438a:	b168      	cbz	r0, 43a8 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    438c:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    438e:	4c09      	ldr	r4, [pc, #36]	; (43b4 <usb_rx+0x38>)
    4390:	8805      	ldrh	r5, [r0, #0]
    4392:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    4396:	6846      	ldr	r6, [r0, #4]
    4398:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    439c:	1b52      	subs	r2, r2, r5
    439e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    43a2:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    43a4:	bc70      	pop	{r4, r5, r6}
    43a6:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    43a8:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    43aa:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    43ac:	2000      	movs	r0, #0
    43ae:	4770      	bx	lr
    43b0:	1fff1764 	.word	0x1fff1764
    43b4:	1fff1a64 	.word	0x1fff1a64

000043b8 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    43b8:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    43ba:	2803      	cmp	r0, #3
    43bc:	d80b      	bhi.n	43d6 <usb_tx_packet_count+0x1e>
	__disable_irq();
    43be:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    43c0:	4b07      	ldr	r3, [pc, #28]	; (43e0 <usb_tx_packet_count+0x28>)
    43c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    43c6:	b143      	cbz	r3, 43da <usb_tx_packet_count+0x22>
    43c8:	2000      	movs	r0, #0
    43ca:	685b      	ldr	r3, [r3, #4]
    43cc:	3001      	adds	r0, #1
    43ce:	2b00      	cmp	r3, #0
    43d0:	d1fb      	bne.n	43ca <usb_tx_packet_count+0x12>
	__enable_irq();
    43d2:	b662      	cpsie	i
	return count;
    43d4:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    43d6:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    43d8:	4770      	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    43da:	4618      	mov	r0, r3
    43dc:	e7f9      	b.n	43d2 <usb_tx_packet_count+0x1a>
    43de:	bf00      	nop
    43e0:	1fff17b8 	.word	0x1fff17b8

000043e4 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    43e4:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    43e6:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    43e8:	4a2b      	ldr	r2, [pc, #172]	; (4498 <usb_rx_memory+0xb4>)
    43ea:	7813      	ldrb	r3, [r2, #0]
    43ec:	071d      	lsls	r5, r3, #28
    43ee:	d506      	bpl.n	43fe <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    43f0:	4b2a      	ldr	r3, [pc, #168]	; (449c <usb_rx_memory+0xb8>)
    43f2:	6a19      	ldr	r1, [r3, #32]
    43f4:	2900      	cmp	r1, #0
    43f6:	d036      	beq.n	4466 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    43f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    43fa:	2900      	cmp	r1, #0
    43fc:	d041      	beq.n	4482 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    43fe:	7853      	ldrb	r3, [r2, #1]
    4400:	071c      	lsls	r4, r3, #28
    4402:	d506      	bpl.n	4412 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4404:	4b25      	ldr	r3, [pc, #148]	; (449c <usb_rx_memory+0xb8>)
    4406:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4408:	2900      	cmp	r1, #0
    440a:	d03e      	beq.n	448a <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    440c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    440e:	2900      	cmp	r1, #0
    4410:	d039      	beq.n	4486 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4412:	7893      	ldrb	r3, [r2, #2]
    4414:	0719      	lsls	r1, r3, #28
    4416:	d505      	bpl.n	4424 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4418:	4b20      	ldr	r3, [pc, #128]	; (449c <usb_rx_memory+0xb8>)
    441a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    441c:	2900      	cmp	r1, #0
    441e:	d036      	beq.n	448e <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4420:	6e99      	ldr	r1, [r3, #104]	; 0x68
    4422:	b189      	cbz	r1, 4448 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4424:	78d3      	ldrb	r3, [r2, #3]
    4426:	071b      	lsls	r3, r3, #28
    4428:	d507      	bpl.n	443a <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    442a:	4b1c      	ldr	r3, [pc, #112]	; (449c <usb_rx_memory+0xb8>)
    442c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    4430:	b37a      	cbz	r2, 4492 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4432:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4436:	2111      	movs	r1, #17
    4438:	b13a      	cbz	r2, 444a <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    443a:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    443c:	4b18      	ldr	r3, [pc, #96]	; (44a0 <usb_rx_memory+0xbc>)
    443e:	2200      	movs	r2, #0
    4440:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    4442:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    4444:	f000 be7c 	b.w	5140 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4448:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    444a:	4c15      	ldr	r4, [pc, #84]	; (44a0 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    444c:	4d15      	ldr	r5, [pc, #84]	; (44a4 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    444e:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4450:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    4454:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4458:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    445a:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    445c:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    445e:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    4460:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    4462:	bc30      	pop	{r4, r5}
    4464:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    4466:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4468:	4c0d      	ldr	r4, [pc, #52]	; (44a0 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    446a:	4d0f      	ldr	r5, [pc, #60]	; (44a8 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    446c:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    446e:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    4472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4476:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4478:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    447a:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    447c:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    447e:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    4480:	e7ef      	b.n	4462 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4482:	2105      	movs	r1, #5
    4484:	e7e1      	b.n	444a <usb_rx_memory+0x66>
    4486:	2109      	movs	r1, #9
    4488:	e7df      	b.n	444a <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    448a:	2208      	movs	r2, #8
    448c:	e7ec      	b.n	4468 <usb_rx_memory+0x84>
    448e:	220c      	movs	r2, #12
    4490:	e7ea      	b.n	4468 <usb_rx_memory+0x84>
    4492:	2210      	movs	r2, #16
    4494:	e7e8      	b.n	4468 <usb_rx_memory+0x84>
    4496:	bf00      	nop
    4498:	0000b774 	.word	0x0000b774
    449c:	1fff0000 	.word	0x1fff0000
    44a0:	1fff17e1 	.word	0x1fff17e1
    44a4:	004000c8 	.word	0x004000c8
    44a8:	00400088 	.word	0x00400088

000044ac <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    44ac:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    44ae:	2b03      	cmp	r3, #3
    44b0:	d81d      	bhi.n	44ee <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    44b2:	4a1b      	ldr	r2, [pc, #108]	; (4520 <usb_tx+0x74>)
    44b4:	0140      	lsls	r0, r0, #5
    44b6:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    44ba:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    44bc:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    44be:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    44c0:	4c18      	ldr	r4, [pc, #96]	; (4524 <usb_tx+0x78>)
    44c2:	5ce2      	ldrb	r2, [r4, r3]
    44c4:	2a03      	cmp	r2, #3
    44c6:	d81b      	bhi.n	4500 <usb_tx+0x54>
    44c8:	e8df f002 	tbb	[pc, r2]
    44cc:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    44d0:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    44d2:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    44d4:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    44d6:	f010 0f08 	tst.w	r0, #8
    44da:	bf14      	ite	ne
    44dc:	23c8      	movne	r3, #200	; 0xc8
    44de:	2388      	moveq	r3, #136	; 0x88
    44e0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    44e4:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    44e6:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    44e8:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    44ea:	b662      	cpsie	i
}
    44ec:	bc30      	pop	{r4, r5}
    44ee:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    44f0:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    44f2:	2202      	movs	r2, #2
		break;
    44f4:	e7ed      	b.n	44d2 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    44f6:	2205      	movs	r2, #5
    44f8:	e7eb      	b.n	44d2 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    44fa:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    44fc:	2204      	movs	r2, #4
		break;
    44fe:	e7e8      	b.n	44d2 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    4500:	4a09      	ldr	r2, [pc, #36]	; (4528 <usb_tx+0x7c>)
    4502:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    4506:	b138      	cbz	r0, 4518 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    4508:	4a08      	ldr	r2, [pc, #32]	; (452c <usb_tx+0x80>)
    450a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    450e:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    4510:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    4514:	b662      	cpsie	i
		return;
    4516:	e7e9      	b.n	44ec <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    4518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    451c:	4a03      	ldr	r2, [pc, #12]	; (452c <usb_tx+0x80>)
    451e:	e7f7      	b.n	4510 <usb_tx+0x64>
    4520:	1fff0000 	.word	0x1fff0000
    4524:	1fff17f0 	.word	0x1fff17f0
    4528:	1fff17b8 	.word	0x1fff17b8
    452c:	1fff17c8 	.word	0x1fff17c8

00004530 <usb_isr>:
}



void usb_isr(void)
{
    4530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    4534:	f8df b30c 	ldr.w	fp, [pc, #780]	; 4844 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    4538:	f8df a30c 	ldr.w	sl, [pc, #780]	; 4848 <usb_isr+0x318>
}



void usb_isr(void)
{
    453c:	b087      	sub	sp, #28
    453e:	e044      	b.n	45ca <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    4540:	4fab      	ldr	r7, [pc, #684]	; (47f0 <usb_isr+0x2c0>)
    4542:	ea4f 0893 	mov.w	r8, r3, lsr #2
    4546:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    454a:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    454c:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    4550:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    4554:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4556:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    455a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    455e:	2b00      	cmp	r3, #0
    4560:	f040 8102 	bne.w	4768 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    4564:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    4568:	0c1b      	lsrs	r3, r3, #16
    456a:	b299      	uxth	r1, r3
    456c:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    4570:	2b00      	cmp	r3, #0
    4572:	f000 80f0 	beq.w	4756 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    4576:	4b9f      	ldr	r3, [pc, #636]	; (47f4 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    4578:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    457c:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    4580:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    4584:	2a00      	cmp	r2, #0
    4586:	f000 82c5 	beq.w	4b14 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    458a:	4d9b      	ldr	r5, [pc, #620]	; (47f8 <usb_isr+0x2c8>)
    458c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    4590:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    4592:	4c9a      	ldr	r4, [pc, #616]	; (47fc <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    4594:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    4598:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    459c:	4419      	add	r1, r3
    459e:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    45a2:	f000 fdad 	bl	5100 <usb_malloc>
					if (packet) {
    45a6:	2800      	cmp	r0, #0
    45a8:	f000 82ad 	beq.w	4b06 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    45ac:	4a94      	ldr	r2, [pc, #592]	; (4800 <usb_isr+0x2d0>)
    45ae:	4b95      	ldr	r3, [pc, #596]	; (4804 <usb_isr+0x2d4>)
    45b0:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    45b4:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    45b8:	bf18      	it	ne
    45ba:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    45bc:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    45c0:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    45c4:	2308      	movs	r3, #8
    45c6:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    45ca:	f89b 4000 	ldrb.w	r4, [fp]
    45ce:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    45d0:	0761      	lsls	r1, r4, #29
    45d2:	d51a      	bpl.n	460a <usb_isr+0xda>
		if (usb_configuration) {
    45d4:	4b8c      	ldr	r3, [pc, #560]	; (4808 <usb_isr+0x2d8>)
    45d6:	781b      	ldrb	r3, [r3, #0]
    45d8:	b1a3      	cbz	r3, 4604 <usb_isr+0xd4>
			t = usb_reboot_timer;
    45da:	498c      	ldr	r1, [pc, #560]	; (480c <usb_isr+0x2dc>)
    45dc:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    45de:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    45e2:	b122      	cbz	r2, 45ee <usb_isr+0xbe>
				usb_reboot_timer = --t;
    45e4:	3b01      	subs	r3, #1
    45e6:	b2db      	uxtb	r3, r3
    45e8:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    45ea:	b903      	cbnz	r3, 45ee <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    45ec:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    45ee:	4988      	ldr	r1, [pc, #544]	; (4810 <usb_isr+0x2e0>)
    45f0:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    45f2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    45f6:	b12a      	cbz	r2, 4604 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    45f8:	3b01      	subs	r3, #1
    45fa:	b2db      	uxtb	r3, r3
    45fc:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    45fe:	2b00      	cmp	r3, #0
    4600:	f000 8257 	beq.w	4ab2 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    4604:	2304      	movs	r3, #4
    4606:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    460a:	f004 0308 	and.w	r3, r4, #8
    460e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4612:	2b00      	cmp	r3, #0
    4614:	f000 80cc 	beq.w	47b0 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    4618:	f89a 3000 	ldrb.w	r3, [sl]
    461c:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    461e:	091e      	lsrs	r6, r3, #4
    4620:	d18e      	bne.n	4540 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4622:	089c      	lsrs	r4, r3, #2
    4624:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 47f0 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4628:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    462c:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4630:	f3c2 0283 	ubfx	r2, r2, #2, #4
    4634:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    4636:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4638:	2a0c      	cmp	r2, #12
    463a:	f200 8088 	bhi.w	474e <usb_isr+0x21e>
    463e:	e8df f002 	tbb	[pc, r2]
    4642:	7c7c      	.short	0x7c7c
    4644:	86868686 	.word	0x86868686
    4648:	86478686 	.word	0x86478686
    464c:	8686      	.short	0x8686
    464e:	07          	.byte	0x07
    464f:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4650:	6808      	ldr	r0, [r1, #0]
    4652:	4d70      	ldr	r5, [pc, #448]	; (4814 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    4654:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4656:	4f70      	ldr	r7, [pc, #448]	; (4818 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4658:	4e70      	ldr	r6, [pc, #448]	; (481c <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    465a:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    465c:	b281      	uxth	r1, r0
    465e:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4662:	4b67      	ldr	r3, [pc, #412]	; (4800 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    4664:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4666:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    466a:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    466c:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    466e:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4672:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4674:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    4678:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    467c:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4680:	4c5b      	ldr	r4, [pc, #364]	; (47f0 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4682:	f200 80e3 	bhi.w	484c <usb_isr+0x31c>
    4686:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    468a:	f080 8346 	bcs.w	4d1a <usb_isr+0x7ea>
    468e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    4692:	f000 82fc 	beq.w	4c8e <usb_isr+0x75e>
    4696:	f200 828d 	bhi.w	4bb4 <usb_isr+0x684>
    469a:	2980      	cmp	r1, #128	; 0x80
    469c:	f000 8377 	beq.w	4d8e <usb_isr+0x85e>
    46a0:	2982      	cmp	r1, #130	; 0x82
    46a2:	f040 82fa 	bne.w	4c9a <usb_isr+0x76a>
    46a6:	88a9      	ldrh	r1, [r5, #4]
    46a8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    46ac:	2904      	cmp	r1, #4
    46ae:	f200 82f4 	bhi.w	4c9a <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    46b2:	485b      	ldr	r0, [pc, #364]	; (4820 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    46b4:	4c5b      	ldr	r4, [pc, #364]	; (4824 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    46b6:	0089      	lsls	r1, r1, #2
    46b8:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    46ba:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    46bc:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    46be:	7802      	ldrb	r2, [r0, #0]
    46c0:	0793      	lsls	r3, r2, #30
    46c2:	f140 8458 	bpl.w	4f76 <usb_isr+0xa46>
    46c6:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    46ca:	f04f 0e02 	mov.w	lr, #2
    46ce:	e342      	b.n	4d56 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    46d0:	4f51      	ldr	r7, [pc, #324]	; (4818 <usb_isr+0x2e8>)
    46d2:	683a      	ldr	r2, [r7, #0]
		if (data) {
    46d4:	b332      	cbz	r2, 4724 <usb_isr+0x1f4>
			size = ep0_tx_len;
    46d6:	4b54      	ldr	r3, [pc, #336]	; (4828 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    46d8:	4e50      	ldr	r6, [pc, #320]	; (481c <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    46da:	4954      	ldr	r1, [pc, #336]	; (482c <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    46dc:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    46de:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    46e0:	780d      	ldrb	r5, [r1, #0]
    46e2:	2840      	cmp	r0, #64	; 0x40
    46e4:	4686      	mov	lr, r0
    46e6:	f045 0802 	orr.w	r8, r5, #2
    46ea:	bf28      	it	cs
    46ec:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    46f0:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    46f2:	f084 0401 	eor.w	r4, r4, #1
    46f6:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    46f8:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    46fc:	bf0c      	ite	eq
    46fe:	2488      	moveq	r4, #136	; 0x88
    4700:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4702:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4706:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4708:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    470c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4710:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4712:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4714:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    4718:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    471a:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    471c:	2800      	cmp	r0, #0
    471e:	f000 8145 	beq.w	49ac <usb_isr+0x47c>
    4722:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    4724:	4b3b      	ldr	r3, [pc, #236]	; (4814 <usb_isr+0x2e4>)
    4726:	881a      	ldrh	r2, [r3, #0]
    4728:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    472c:	d10f      	bne.n	474e <usb_isr+0x21e>
			setup.bRequest = 0;
    472e:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4730:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    4732:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4734:	4b3e      	ldr	r3, [pc, #248]	; (4830 <usb_isr+0x300>)
    4736:	701a      	strb	r2, [r3, #0]
    4738:	e009      	b.n	474e <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    473a:	4a36      	ldr	r2, [pc, #216]	; (4814 <usb_isr+0x2e4>)
    473c:	8810      	ldrh	r0, [r2, #0]
    473e:	f242 0221 	movw	r2, #8225	; 0x2021
    4742:	4290      	cmp	r0, r2
    4744:	f000 8137 	beq.w	49b6 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4748:	4a2d      	ldr	r2, [pc, #180]	; (4800 <usb_isr+0x2d0>)
    474a:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    474e:	4a39      	ldr	r2, [pc, #228]	; (4834 <usb_isr+0x304>)
    4750:	2301      	movs	r3, #1
    4752:	7013      	strb	r3, [r2, #0]
    4754:	e736      	b.n	45c4 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4756:	4a2a      	ldr	r2, [pc, #168]	; (4800 <usb_isr+0x2d0>)
    4758:	4b2a      	ldr	r3, [pc, #168]	; (4804 <usb_isr+0x2d4>)
    475a:	f019 0f08 	tst.w	r9, #8
    475e:	bf18      	it	ne
    4760:	4613      	movne	r3, r2
    4762:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    4766:	e72d      	b.n	45c4 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    4768:	f000 fcea 	bl	5140 <usb_free>
				packet = tx_first[endpoint];
    476c:	4a32      	ldr	r2, [pc, #200]	; (4838 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    476e:	4933      	ldr	r1, [pc, #204]	; (483c <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    4770:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    4774:	2b00      	cmp	r3, #0
    4776:	f000 81d1 	beq.w	4b1c <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    477a:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    477c:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    477e:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    4782:	f103 0208 	add.w	r2, r3, #8
    4786:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    478a:	2c03      	cmp	r4, #3
    478c:	d805      	bhi.n	479a <usb_isr+0x26a>
    478e:	e8df f004 	tbb	[pc, r4]
    4792:	022c      	.short	0x022c
    4794:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    4796:	2202      	movs	r2, #2
    4798:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    479a:	881a      	ldrh	r2, [r3, #0]
    479c:	f019 0f08 	tst.w	r9, #8
    47a0:	bf0c      	ite	eq
    47a2:	2388      	moveq	r3, #136	; 0x88
    47a4:	23c8      	movne	r3, #200	; 0xc8
    47a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    47aa:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    47ae:	e709      	b.n	45c4 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    47b0:	07e0      	lsls	r0, r4, #31
    47b2:	f100 8181 	bmi.w	4ab8 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    47b6:	0621      	lsls	r1, r4, #24
    47b8:	f100 81f2 	bmi.w	4ba0 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    47bc:	07a2      	lsls	r2, r4, #30
    47be:	d506      	bpl.n	47ce <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    47c0:	4a1f      	ldr	r2, [pc, #124]	; (4840 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    47c2:	4920      	ldr	r1, [pc, #128]	; (4844 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    47c4:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    47c6:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    47c8:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    47ca:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    47cc:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    47ce:	06e3      	lsls	r3, r4, #27
    47d0:	d502      	bpl.n	47d8 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    47d2:	4b1c      	ldr	r3, [pc, #112]	; (4844 <usb_isr+0x314>)
    47d4:	2210      	movs	r2, #16
    47d6:	701a      	strb	r2, [r3, #0]
	}

}
    47d8:	b007      	add	sp, #28
    47da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    47de:	2204      	movs	r2, #4
    47e0:	558a      	strb	r2, [r1, r6]
						break;
    47e2:	e7da      	b.n	479a <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    47e4:	2205      	movs	r2, #5
    47e6:	558a      	strb	r2, [r1, r6]
						break;
    47e8:	e7d7      	b.n	479a <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    47ea:	2203      	movs	r2, #3
    47ec:	558a      	strb	r2, [r1, r6]
						break;
    47ee:	e7d4      	b.n	479a <usb_isr+0x26a>
    47f0:	1fff0000 	.word	0x1fff0000
    47f4:	1fff1764 	.word	0x1fff1764
    47f8:	1fff1710 	.word	0x1fff1710
    47fc:	1fff1a64 	.word	0x1fff1a64
    4800:	004000c8 	.word	0x004000c8
    4804:	00400088 	.word	0x00400088
    4808:	1fff17ec 	.word	0x1fff17ec
    480c:	1fff1775 	.word	0x1fff1775
    4810:	1fff17f4 	.word	0x1fff17f4
    4814:	1fff17d8 	.word	0x1fff17d8
    4818:	1fff170c 	.word	0x1fff170c
    481c:	1fff1774 	.word	0x1fff1774
    4820:	400720c0 	.word	0x400720c0
    4824:	1fff17e4 	.word	0x1fff17e4
    4828:	1fff1720 	.word	0x1fff1720
    482c:	1fff17e0 	.word	0x1fff17e0
    4830:	40072098 	.word	0x40072098
    4834:	40072094 	.word	0x40072094
    4838:	1fff17b8 	.word	0x1fff17b8
    483c:	1fff17f0 	.word	0x1fff17f0
    4840:	40072088 	.word	0x40072088
    4844:	40072080 	.word	0x40072080
    4848:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    484c:	f242 0021 	movw	r0, #8225	; 0x2021
    4850:	4281      	cmp	r1, r0
    4852:	f000 812a 	beq.w	4aaa <usb_isr+0x57a>
    4856:	f200 80d8 	bhi.w	4a0a <usb_isr+0x4da>
    485a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    485e:	f000 8276 	beq.w	4d4e <usb_isr+0x81e>
    4862:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    4866:	f040 8218 	bne.w	4c9a <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    486a:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    486c:	49b3      	ldr	r1, [pc, #716]	; (4b3c <usb_isr+0x60c>)
    486e:	78a8      	ldrb	r0, [r5, #2]
    4870:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    4872:	0612      	lsls	r2, r2, #24
    4874:	f100 833a 	bmi.w	4eec <usb_isr+0x9bc>
    4878:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    487c:	49b0      	ldr	r1, [pc, #704]	; (4b40 <usb_isr+0x610>)
    487e:	0613      	lsls	r3, r2, #24
    4880:	f100 830c 	bmi.w	4e9c <usb_isr+0x96c>
    4884:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    4888:	49ad      	ldr	r1, [pc, #692]	; (4b40 <usb_isr+0x610>)
    488a:	0615      	lsls	r5, r2, #24
    488c:	f100 8301 	bmi.w	4e92 <usb_isr+0x962>
    4890:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    4894:	49aa      	ldr	r1, [pc, #680]	; (4b40 <usb_isr+0x610>)
    4896:	0614      	lsls	r4, r2, #24
    4898:	f100 82f6 	bmi.w	4e88 <usb_isr+0x958>
    489c:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    48a0:	49a7      	ldr	r1, [pc, #668]	; (4b40 <usb_isr+0x610>)
    48a2:	0610      	lsls	r0, r2, #24
    48a4:	f100 834a 	bmi.w	4f3c <usb_isr+0xa0c>
    48a8:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    48ac:	49a4      	ldr	r1, [pc, #656]	; (4b40 <usb_isr+0x610>)
    48ae:	0612      	lsls	r2, r2, #24
    48b0:	f100 833f 	bmi.w	4f32 <usb_isr+0xa02>
    48b4:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    48b8:	49a1      	ldr	r1, [pc, #644]	; (4b40 <usb_isr+0x610>)
    48ba:	0613      	lsls	r3, r2, #24
    48bc:	f100 8334 	bmi.w	4f28 <usb_isr+0x9f8>
    48c0:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    48c4:	499e      	ldr	r1, [pc, #632]	; (4b40 <usb_isr+0x610>)
    48c6:	0615      	lsls	r5, r2, #24
    48c8:	f100 8329 	bmi.w	4f1e <usb_isr+0x9ee>
    48cc:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    48d0:	499b      	ldr	r1, [pc, #620]	; (4b40 <usb_isr+0x610>)
    48d2:	0614      	lsls	r4, r2, #24
    48d4:	f100 831e 	bmi.w	4f14 <usb_isr+0x9e4>
    48d8:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    48dc:	4998      	ldr	r1, [pc, #608]	; (4b40 <usb_isr+0x610>)
    48de:	0610      	lsls	r0, r2, #24
    48e0:	f100 8313 	bmi.w	4f0a <usb_isr+0x9da>
    48e4:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    48e8:	4995      	ldr	r1, [pc, #596]	; (4b40 <usb_isr+0x610>)
    48ea:	0612      	lsls	r2, r2, #24
    48ec:	f100 8308 	bmi.w	4f00 <usb_isr+0x9d0>
    48f0:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    48f4:	4992      	ldr	r1, [pc, #584]	; (4b40 <usb_isr+0x610>)
    48f6:	0613      	lsls	r3, r2, #24
    48f8:	f100 82fd 	bmi.w	4ef6 <usb_isr+0x9c6>
    48fc:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    4900:	498f      	ldr	r1, [pc, #572]	; (4b40 <usb_isr+0x610>)
    4902:	0615      	lsls	r5, r2, #24
    4904:	f100 8331 	bmi.w	4f6a <usb_isr+0xa3a>
    4908:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    490c:	498c      	ldr	r1, [pc, #560]	; (4b40 <usb_isr+0x610>)
    490e:	0614      	lsls	r4, r2, #24
    4910:	f100 8325 	bmi.w	4f5e <usb_isr+0xa2e>
    4914:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    4918:	4989      	ldr	r1, [pc, #548]	; (4b40 <usb_isr+0x610>)
    491a:	0610      	lsls	r0, r2, #24
    491c:	f100 8319 	bmi.w	4f52 <usb_isr+0xa22>
    4920:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    4924:	4986      	ldr	r1, [pc, #536]	; (4b40 <usb_isr+0x610>)
    4926:	0612      	lsls	r2, r2, #24
    4928:	f100 830d 	bmi.w	4f46 <usb_isr+0xa16>
    492c:	4885      	ldr	r0, [pc, #532]	; (4b44 <usb_isr+0x614>)
    492e:	4a86      	ldr	r2, [pc, #536]	; (4b48 <usb_isr+0x618>)
    4930:	4986      	ldr	r1, [pc, #536]	; (4b4c <usb_isr+0x61c>)
    4932:	9001      	str	r0, [sp, #4]
    4934:	4886      	ldr	r0, [pc, #536]	; (4b50 <usb_isr+0x620>)
    4936:	4d87      	ldr	r5, [pc, #540]	; (4b54 <usb_isr+0x624>)
    4938:	4c87      	ldr	r4, [pc, #540]	; (4b58 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    493a:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    493c:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    493e:	9605      	str	r6, [sp, #20]
    4940:	9502      	str	r5, [sp, #8]
    4942:	4680      	mov	r8, r0
    4944:	460f      	mov	r7, r1
    4946:	4616      	mov	r6, r2
    4948:	461d      	mov	r5, r3
    494a:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    494c:	6830      	ldr	r0, [r6, #0]
			while (p) {
    494e:	b128      	cbz	r0, 495c <usb_isr+0x42c>
				n = p->next;
    4950:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    4952:	f000 fbf5 	bl	5140 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    4956:	4620      	mov	r0, r4
    4958:	2c00      	cmp	r4, #0
    495a:	d1f9      	bne.n	4950 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    495c:	2300      	movs	r3, #0
    495e:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    4960:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    4962:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    4964:	461a      	mov	r2, r3
    4966:	2300      	movs	r3, #0
    4968:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    496c:	b128      	cbz	r0, 497a <usb_isr+0x44a>
				n = p->next;
    496e:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    4970:	f000 fbe6 	bl	5140 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    4974:	4620      	mov	r0, r4
    4976:	2c00      	cmp	r4, #0
    4978:	d1f9      	bne.n	496e <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    497a:	2200      	movs	r2, #0
    497c:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    497e:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    4980:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    4984:	4611      	mov	r1, r2
    4986:	2200      	movs	r2, #0
    4988:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    498c:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    498e:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    4990:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    4992:	f04f 0100 	mov.w	r1, #0
    4996:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    499a:	2b03      	cmp	r3, #3
    499c:	f200 812b 	bhi.w	4bf6 <usb_isr+0x6c6>
    49a0:	e8df f013 	tbh	[pc, r3, lsl #1]
    49a4:	01250170 	.word	0x01250170
    49a8:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    49ac:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    49b0:	bf18      	it	ne
    49b2:	2200      	movne	r2, #0
    49b4:	e6b5      	b.n	4722 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    49b6:	4a69      	ldr	r2, [pc, #420]	; (4b5c <usb_isr+0x62c>)
    49b8:	780d      	ldrb	r5, [r1, #0]
    49ba:	7848      	ldrb	r0, [r1, #1]
    49bc:	7015      	strb	r5, [r2, #0]
    49be:	7050      	strb	r0, [r2, #1]
    49c0:	788d      	ldrb	r5, [r1, #2]
    49c2:	78c8      	ldrb	r0, [r1, #3]
    49c4:	7095      	strb	r5, [r2, #2]
    49c6:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    49c8:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    49ca:	790d      	ldrb	r5, [r1, #4]
    49cc:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    49ce:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    49d0:	794d      	ldrb	r5, [r1, #5]
    49d2:	7989      	ldrb	r1, [r1, #6]
    49d4:	7155      	strb	r5, [r2, #5]
    49d6:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    49d8:	f000 819b 	beq.w	4d12 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    49dc:	4960      	ldr	r1, [pc, #384]	; (4b60 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    49de:	4e61      	ldr	r6, [pc, #388]	; (4b64 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    49e0:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    49e2:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    49e4:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    49e8:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    49ea:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    49ee:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    49f0:	bf0c      	ite	eq
    49f2:	2188      	moveq	r1, #136	; 0x88
    49f4:	21c8      	movne	r1, #200	; 0xc8
    49f6:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    49fa:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    49fe:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a02:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4a04:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a06:	6051      	str	r1, [r2, #4]
    4a08:	e69e      	b.n	4748 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4a0a:	f242 2021 	movw	r0, #8737	; 0x2221
    4a0e:	4281      	cmp	r1, r0
    4a10:	f040 81cb 	bne.w	4daa <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4a14:	4b54      	ldr	r3, [pc, #336]	; (4b68 <usb_isr+0x638>)
    4a16:	4c55      	ldr	r4, [pc, #340]	; (4b6c <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    4a18:	4955      	ldr	r1, [pc, #340]	; (4b70 <usb_isr+0x640>)
    4a1a:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4a1c:	681d      	ldr	r5, [r3, #0]
    4a1e:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    4a20:	f8cd e004 	str.w	lr, [sp, #4]
    4a24:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4a26:	2000      	movs	r0, #0
    4a28:	9002      	str	r0, [sp, #8]
    4a2a:	4680      	mov	r8, r0
    4a2c:	4684      	mov	ip, r0
    4a2e:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a30:	494b      	ldr	r1, [pc, #300]	; (4b60 <usb_isr+0x630>)
    4a32:	780d      	ldrb	r5, [r1, #0]
    4a34:	f045 0e02 	orr.w	lr, r5, #2
    4a38:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    4a3c:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a3e:	9b01      	ldr	r3, [sp, #4]
    4a40:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a42:	9b03      	ldr	r3, [sp, #12]
    4a44:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a46:	bf0c      	ite	eq
    4a48:	2488      	moveq	r4, #136	; 0x88
    4a4a:	24c8      	movne	r4, #200	; 0xc8
    4a4c:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4a50:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a54:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    4a58:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    4a5a:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a5c:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 4b40 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    4a60:	4b40      	ldr	r3, [pc, #256]	; (4b64 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    4a62:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 4b60 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4a66:	2800      	cmp	r0, #0
    4a68:	f040 811e 	bne.w	4ca8 <usb_isr+0x778>
    4a6c:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    4a70:	d11b      	bne.n	4aaa <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a72:	f044 0c02 	orr.w	ip, r4, #2
    4a76:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    4a7a:	9c02      	ldr	r4, [sp, #8]
    4a7c:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 4b40 <usb_isr+0x610>
    4a80:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a82:	2a00      	cmp	r2, #0
    4a84:	f040 8126 	bne.w	4cd4 <usb_isr+0x7a4>
    4a88:	0402      	lsls	r2, r0, #16
    4a8a:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    4a8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a92:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4a96:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4a98:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    4a9a:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4a9c:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4a9e:	2840      	cmp	r0, #64	; 0x40
    4aa0:	d103      	bne.n	4aaa <usb_isr+0x57a>
    4aa2:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    4aa4:	4a33      	ldr	r2, [pc, #204]	; (4b74 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    4aa6:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    4aa8:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4aaa:	4a33      	ldr	r2, [pc, #204]	; (4b78 <usb_isr+0x648>)
    4aac:	2301      	movs	r3, #1
    4aae:	7013      	strb	r3, [r2, #0]
    4ab0:	e64d      	b.n	474e <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    4ab2:	f000 fcb1 	bl	5418 <usb_serial_flush_callback>
    4ab6:	e5a5      	b.n	4604 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4ab8:	4b21      	ldr	r3, [pc, #132]	; (4b40 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    4aba:	482f      	ldr	r0, [pc, #188]	; (4b78 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    4abc:	4928      	ldr	r1, [pc, #160]	; (4b60 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    4abe:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    4ac0:	f04f 0e02 	mov.w	lr, #2
    4ac4:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4ac8:	4f2c      	ldr	r7, [pc, #176]	; (4b7c <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    4aca:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4acc:	492c      	ldr	r1, [pc, #176]	; (4b80 <usb_isr+0x650>)
    4ace:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    4ad0:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    4ad2:	4e2c      	ldr	r6, [pc, #176]	; (4b84 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    4ad4:	4d2c      	ldr	r5, [pc, #176]	; (4b88 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    4ad6:	4c2d      	ldr	r4, [pc, #180]	; (4b8c <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    4ad8:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4ada:	210d      	movs	r1, #13
    4adc:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    4ade:	21ff      	movs	r1, #255	; 0xff
    4ae0:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    4ae2:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 4b9c <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    4ae6:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    4ae8:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4aea:	4d29      	ldr	r5, [pc, #164]	; (4b90 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    4aec:	4a29      	ldr	r2, [pc, #164]	; (4b94 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    4aee:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    4af2:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    4af4:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    4af6:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4afa:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    4afc:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    4afe:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    4b00:	b007      	add	sp, #28
    4b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    4b06:	4a24      	ldr	r2, [pc, #144]	; (4b98 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    4b08:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    4b0c:	7813      	ldrb	r3, [r2, #0]
    4b0e:	3301      	adds	r3, #1
    4b10:	7013      	strb	r3, [r2, #0]
    4b12:	e557      	b.n	45c4 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    4b14:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    4b18:	4d0e      	ldr	r5, [pc, #56]	; (4b54 <usb_isr+0x624>)
    4b1a:	e53a      	b.n	4592 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    4b1c:	5d8b      	ldrb	r3, [r1, r6]
    4b1e:	2b03      	cmp	r3, #3
    4b20:	f200 80f0 	bhi.w	4d04 <usb_isr+0x7d4>
    4b24:	a201      	add	r2, pc, #4	; (adr r2, 4b2c <usb_isr+0x5fc>)
    4b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4b2a:	bf00      	nop
    4b2c:	000045c5 	.word	0x000045c5
    4b30:	000045c5 	.word	0x000045c5
    4b34:	00004be9 	.word	0x00004be9
    4b38:	00004be3 	.word	0x00004be3
    4b3c:	1fff17ec 	.word	0x1fff17ec
    4b40:	1fff0000 	.word	0x1fff0000
    4b44:	1fff17c8 	.word	0x1fff17c8
    4b48:	1fff1764 	.word	0x1fff1764
    4b4c:	1fff17b8 	.word	0x1fff17b8
    4b50:	1fff17f0 	.word	0x1fff17f0
    4b54:	1fff1710 	.word	0x1fff1710
    4b58:	1fff1a64 	.word	0x1fff1a64
    4b5c:	1fff1a6c 	.word	0x1fff1a6c
    4b60:	1fff17e0 	.word	0x1fff17e0
    4b64:	1fff1774 	.word	0x1fff1774
    4b68:	1fff1610 	.word	0x1fff1610
    4b6c:	1fff1a74 	.word	0x1fff1a74
    4b70:	1fff1804 	.word	0x1fff1804
    4b74:	1fff1720 	.word	0x1fff1720
    4b78:	40072094 	.word	0x40072094
    4b7c:	400720c0 	.word	0x400720c0
    4b80:	00400088 	.word	0x00400088
    4b84:	40072088 	.word	0x40072088
    4b88:	40072080 	.word	0x40072080
    4b8c:	40072098 	.word	0x40072098
    4b90:	1fff1724 	.word	0x1fff1724
    4b94:	1fff1778 	.word	0x1fff1778
    4b98:	1fff17e1 	.word	0x1fff17e1
    4b9c:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4ba0:	49c1      	ldr	r1, [pc, #772]	; (4ea8 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    4ba2:	4bc2      	ldr	r3, [pc, #776]	; (4eac <usb_isr+0x97c>)
    4ba4:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4ba6:	200d      	movs	r0, #13
    4ba8:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    4baa:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    4bac:	07a2      	lsls	r2, r4, #30
    4bae:	f57f ae0e 	bpl.w	47ce <usb_isr+0x29e>
    4bb2:	e605      	b.n	47c0 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4bb4:	f240 3202 	movw	r2, #770	; 0x302
    4bb8:	4291      	cmp	r1, r2
    4bba:	f040 80ee 	bne.w	4d9a <usb_isr+0x86a>
    4bbe:	88a9      	ldrh	r1, [r5, #4]
    4bc0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4bc4:	2904      	cmp	r1, #4
    4bc6:	d868      	bhi.n	4c9a <usb_isr+0x76a>
    4bc8:	886a      	ldrh	r2, [r5, #2]
    4bca:	2a00      	cmp	r2, #0
    4bcc:	d165      	bne.n	4c9a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    4bce:	48b6      	ldr	r0, [pc, #728]	; (4ea8 <usb_isr+0x978>)
    4bd0:	f8cd e004 	str.w	lr, [sp, #4]
    4bd4:	0089      	lsls	r1, r1, #2
    4bd6:	4408      	add	r0, r1
    4bd8:	7801      	ldrb	r1, [r0, #0]
    4bda:	f041 0102 	orr.w	r1, r1, #2
    4bde:	7001      	strb	r1, [r0, #0]
    4be0:	e721      	b.n	4a26 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4be2:	2301      	movs	r3, #1
    4be4:	558b      	strb	r3, [r1, r6]
						break;
    4be6:	e4ed      	b.n	45c4 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    4be8:	2300      	movs	r3, #0
    4bea:	558b      	strb	r3, [r1, r6]
						break;
    4bec:	e4ea      	b.n	45c4 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4bee:	f04f 0301 	mov.w	r3, #1
    4bf2:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    4bf6:	3501      	adds	r5, #1
    4bf8:	2d04      	cmp	r5, #4
    4bfa:	f106 0604 	add.w	r6, r6, #4
    4bfe:	f107 0704 	add.w	r7, r7, #4
    4c02:	f108 0801 	add.w	r8, r8, #1
    4c06:	f47f aea1 	bne.w	494c <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4c0a:	4ca9      	ldr	r4, [pc, #676]	; (4eb0 <usb_isr+0x980>)
			*reg = epconf;
    4c0c:	4ba9      	ldr	r3, [pc, #676]	; (4eb4 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4c0e:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    4c10:	4da9      	ldr	r5, [pc, #676]	; (4eb8 <usb_isr+0x988>)
    4c12:	9f04      	ldr	r7, [sp, #16]
    4c14:	9e05      	ldr	r6, [sp, #20]
    4c16:	2100      	movs	r1, #0
    4c18:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4c1a:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4c1c:	0713      	lsls	r3, r2, #28
    4c1e:	f100 8105 	bmi.w	4e2c <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4c22:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    4c24:	49a5      	ldr	r1, [pc, #660]	; (4ebc <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c26:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 4ec8 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4c2a:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4c2c:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c2e:	f04f 0100 	mov.w	r1, #0
    4c32:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    4c36:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4c3a:	f100 80e0 	bmi.w	4dfe <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4c3e:	49a0      	ldr	r1, [pc, #640]	; (4ec0 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4c40:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    4c42:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c44:	2100      	movs	r1, #0
    4c46:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    4c4a:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4c4e:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c50:	f8df 8274 	ldr.w	r8, [pc, #628]	; 4ec8 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4c54:	f100 8101 	bmi.w	4e5a <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4c58:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    4c5a:	499a      	ldr	r1, [pc, #616]	; (4ec4 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c5c:	4c9a      	ldr	r4, [pc, #616]	; (4ec8 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4c5e:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c60:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4c62:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c64:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    4c68:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4c6c:	f100 80b0 	bmi.w	4dd0 <usb_isr+0x8a0>
    4c70:	7833      	ldrb	r3, [r6, #0]
    4c72:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4c74:	2100      	movs	r1, #0
    4c76:	f083 0201 	eor.w	r2, r3, #1
    4c7a:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    4c7e:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    4c82:	e6d0      	b.n	4a26 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    4c84:	f04f 0300 	mov.w	r3, #0
    4c88:	f888 3000 	strb.w	r3, [r8]
    4c8c:	e7b3      	b.n	4bf6 <usb_isr+0x6c6>
    4c8e:	88a9      	ldrh	r1, [r5, #4]
    4c90:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4c94:	2904      	cmp	r1, #4
    4c96:	f240 808d 	bls.w	4db4 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4c9a:	4a83      	ldr	r2, [pc, #524]	; (4ea8 <usb_isr+0x978>)
    4c9c:	230f      	movs	r3, #15
    4c9e:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4ca0:	4a8a      	ldr	r2, [pc, #552]	; (4ecc <usb_isr+0x99c>)
    4ca2:	2301      	movs	r3, #1
    4ca4:	7013      	strb	r3, [r2, #0]
    4ca6:	e552      	b.n	474e <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    4ca8:	2840      	cmp	r0, #64	; 0x40
    4caa:	f67f aee2 	bls.w	4a72 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4cae:	f044 0402 	orr.w	r4, r4, #2
    4cb2:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    4cb6:	9e02      	ldr	r6, [sp, #8]
    4cb8:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cba:	b1ba      	cbz	r2, 4cec <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    4cbc:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cc0:	4a83      	ldr	r2, [pc, #524]	; (4ed0 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    4cc2:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4cc4:	4633      	mov	r3, r6
    4cc6:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4cc8:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4ccc:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cce:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    4cd2:	e6e7      	b.n	4aa4 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    4cd4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4cd8:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cda:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4cdc:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4cde:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4ce0:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4ce4:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4ce6:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    4cea:	e6d8      	b.n	4a9e <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    4cec:	f89d 1004 	ldrb.w	r1, [sp, #4]
    4cf0:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4cf2:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cf4:	4a77      	ldr	r2, [pc, #476]	; (4ed4 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4cf6:	f888 5000 	strb.w	r5, [r8]
    4cfa:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4cfc:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4cfe:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    4d02:	e6cf      	b.n	4aa4 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    4d04:	f019 0f08 	tst.w	r9, #8
    4d08:	bf0c      	ite	eq
    4d0a:	2302      	moveq	r3, #2
    4d0c:	2303      	movne	r3, #3
    4d0e:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    4d10:	e458      	b.n	45c4 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4d12:	4a71      	ldr	r2, [pc, #452]	; (4ed8 <usb_isr+0x9a8>)
    4d14:	210f      	movs	r1, #15
    4d16:	7011      	strb	r1, [r2, #0]
    4d18:	e660      	b.n	49dc <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    4d1a:	4a70      	ldr	r2, [pc, #448]	; (4edc <usb_isr+0x9ac>)
    4d1c:	6854      	ldr	r4, [r2, #4]
    4d1e:	2c00      	cmp	r4, #0
    4d20:	d0bb      	beq.n	4c9a <usb_isr+0x76a>
    4d22:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4d24:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    4d28:	e003      	b.n	4d32 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    4d2a:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    4d2c:	6854      	ldr	r4, [r2, #4]
    4d2e:	2c00      	cmp	r4, #0
    4d30:	d0b3      	beq.n	4c9a <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4d32:	8813      	ldrh	r3, [r2, #0]
    4d34:	4283      	cmp	r3, r0
    4d36:	d1f8      	bne.n	4d2a <usb_isr+0x7fa>
    4d38:	8853      	ldrh	r3, [r2, #2]
    4d3a:	4573      	cmp	r3, lr
    4d3c:	d1f5      	bne.n	4d2a <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    4d3e:	0a00      	lsrs	r0, r0, #8
    4d40:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    4d42:	bf0c      	ite	eq
    4d44:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    4d48:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    4d4c:	e003      	b.n	4d56 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    4d4e:	4a64      	ldr	r2, [pc, #400]	; (4ee0 <usb_isr+0x9b0>)
    4d50:	4c64      	ldr	r4, [pc, #400]	; (4ee4 <usb_isr+0x9b4>)
    4d52:	7812      	ldrb	r2, [r2, #0]
    4d54:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4d56:	88e8      	ldrh	r0, [r5, #6]
    4d58:	4570      	cmp	r0, lr
    4d5a:	f080 813f 	bcs.w	4fdc <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4d5e:	4962      	ldr	r1, [pc, #392]	; (4ee8 <usb_isr+0x9b8>)
    4d60:	780d      	ldrb	r5, [r1, #0]
    4d62:	2840      	cmp	r0, #64	; 0x40
    4d64:	4684      	mov	ip, r0
    4d66:	f045 0e02 	orr.w	lr, r5, #2
    4d6a:	bf28      	it	cs
    4d6c:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    4d70:	eb04 030c 	add.w	r3, r4, ip
    4d74:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    4d78:	9302      	str	r3, [sp, #8]
    4d7a:	2301      	movs	r3, #1
    4d7c:	6054      	str	r4, [r2, #4]
    4d7e:	ebcc 0000 	rsb	r0, ip, r0
    4d82:	ea4f 480c 	mov.w	r8, ip, lsl #16
    4d86:	2200      	movs	r2, #0
    4d88:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4d8a:	24c8      	movs	r4, #200	; 0xc8
    4d8c:	e65e      	b.n	4a4c <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    4d8e:	4c55      	ldr	r4, [pc, #340]	; (4ee4 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    4d90:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    4d94:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    4d96:	7062      	strb	r2, [r4, #1]
    4d98:	e7dd      	b.n	4d56 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4d9a:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    4d9e:	f47f af7c 	bne.w	4c9a <usb_isr+0x76a>
    4da2:	2301      	movs	r3, #1
    4da4:	2200      	movs	r2, #0
    4da6:	9301      	str	r3, [sp, #4]
    4da8:	e63d      	b.n	4a26 <usb_isr+0x4f6>
    4daa:	f242 3221 	movw	r2, #8993	; 0x2321
    4dae:	4291      	cmp	r1, r2
    4db0:	d0f7      	beq.n	4da2 <usb_isr+0x872>
    4db2:	e772      	b.n	4c9a <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4db4:	886a      	ldrh	r2, [r5, #2]
    4db6:	2a00      	cmp	r2, #0
    4db8:	f47f af6f 	bne.w	4c9a <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    4dbc:	483a      	ldr	r0, [pc, #232]	; (4ea8 <usb_isr+0x978>)
    4dbe:	f8cd e004 	str.w	lr, [sp, #4]
    4dc2:	0089      	lsls	r1, r1, #2
    4dc4:	4408      	add	r0, r1
    4dc6:	7801      	ldrb	r1, [r0, #0]
    4dc8:	f021 0102 	bic.w	r1, r1, #2
    4dcc:	7001      	strb	r1, [r0, #0]
    4dce:	e62a      	b.n	4a26 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    4dd0:	f000 f996 	bl	5100 <usb_malloc>
				if (p) {
    4dd4:	2800      	cmp	r0, #0
    4dd6:	f000 80ef 	beq.w	4fb8 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    4dda:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4ddc:	4a3d      	ldr	r2, [pc, #244]	; (4ed4 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    4dde:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4de2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    4de6:	f000 f98b 	bl	5100 <usb_malloc>
				if (p) {
    4dea:	2800      	cmp	r0, #0
    4dec:	f000 80de 	beq.w	4fac <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    4df0:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4df2:	4a37      	ldr	r2, [pc, #220]	; (4ed0 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    4df4:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4df8:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    4dfc:	e738      	b.n	4c70 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    4dfe:	f000 f97f 	bl	5100 <usb_malloc>
				if (p) {
    4e02:	2800      	cmp	r0, #0
    4e04:	f000 80c0 	beq.w	4f88 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    4e08:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4e0a:	4a32      	ldr	r2, [pc, #200]	; (4ed4 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    4e0c:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4e10:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    4e14:	f000 f974 	bl	5100 <usb_malloc>
				if (p) {
    4e18:	2800      	cmp	r0, #0
    4e1a:	f000 80af 	beq.w	4f7c <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    4e1e:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4e20:	4a2b      	ldr	r2, [pc, #172]	; (4ed0 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    4e22:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4e26:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    4e2a:	e708      	b.n	4c3e <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    4e2c:	f000 f968 	bl	5100 <usb_malloc>
				if (p) {
    4e30:	2800      	cmp	r0, #0
    4e32:	f000 80cd 	beq.w	4fd0 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    4e36:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4e38:	4a26      	ldr	r2, [pc, #152]	; (4ed4 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    4e3a:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4e3e:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    4e42:	f000 f95d 	bl	5100 <usb_malloc>
				if (p) {
    4e46:	2800      	cmp	r0, #0
    4e48:	f000 80bc 	beq.w	4fc4 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    4e4c:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4e4e:	4a20      	ldr	r2, [pc, #128]	; (4ed0 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    4e50:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4e54:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    4e58:	e6e3      	b.n	4c22 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    4e5a:	f000 f951 	bl	5100 <usb_malloc>
				if (p) {
    4e5e:	2800      	cmp	r0, #0
    4e60:	f000 809e 	beq.w	4fa0 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    4e64:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4e66:	4a1b      	ldr	r2, [pc, #108]	; (4ed4 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    4e68:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4e6c:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    4e70:	f000 f946 	bl	5100 <usb_malloc>
				if (p) {
    4e74:	2800      	cmp	r0, #0
    4e76:	f000 808d 	beq.w	4f94 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    4e7a:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4e7c:	4a14      	ldr	r2, [pc, #80]	; (4ed0 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    4e7e:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4e82:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    4e86:	e6e7      	b.n	4c58 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    4e88:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    4e8a:	3808      	subs	r0, #8
    4e8c:	f000 f958 	bl	5140 <usb_free>
    4e90:	e504      	b.n	489c <usb_isr+0x36c>
    4e92:	6b48      	ldr	r0, [r1, #52]	; 0x34
    4e94:	3808      	subs	r0, #8
    4e96:	f000 f953 	bl	5140 <usb_free>
    4e9a:	e4f9      	b.n	4890 <usb_isr+0x360>
    4e9c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    4e9e:	3808      	subs	r0, #8
    4ea0:	f000 f94e 	bl	5140 <usb_free>
    4ea4:	e4ee      	b.n	4884 <usb_isr+0x354>
    4ea6:	bf00      	nop
    4ea8:	400720c0 	.word	0x400720c0
    4eac:	40072080 	.word	0x40072080
    4eb0:	0000b774 	.word	0x0000b774
    4eb4:	400720c4 	.word	0x400720c4
    4eb8:	1fff17e1 	.word	0x1fff17e1
    4ebc:	400720c8 	.word	0x400720c8
    4ec0:	400720cc 	.word	0x400720cc
    4ec4:	400720d0 	.word	0x400720d0
    4ec8:	1fff0000 	.word	0x1fff0000
    4ecc:	40072094 	.word	0x40072094
    4ed0:	004000c8 	.word	0x004000c8
    4ed4:	00400088 	.word	0x00400088
    4ed8:	1fff1775 	.word	0x1fff1775
    4edc:	0000b778 	.word	0x0000b778
    4ee0:	1fff17ec 	.word	0x1fff17ec
    4ee4:	1fff17e4 	.word	0x1fff17e4
    4ee8:	1fff17e0 	.word	0x1fff17e0
    4eec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4eee:	3808      	subs	r0, #8
    4ef0:	f000 f926 	bl	5140 <usb_free>
    4ef4:	e4c0      	b.n	4878 <usb_isr+0x348>
    4ef6:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    4ef8:	3808      	subs	r0, #8
    4efa:	f000 f921 	bl	5140 <usb_free>
    4efe:	e4fd      	b.n	48fc <usb_isr+0x3cc>
    4f00:	6f48      	ldr	r0, [r1, #116]	; 0x74
    4f02:	3808      	subs	r0, #8
    4f04:	f000 f91c 	bl	5140 <usb_free>
    4f08:	e4f2      	b.n	48f0 <usb_isr+0x3c0>
    4f0a:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    4f0c:	3808      	subs	r0, #8
    4f0e:	f000 f917 	bl	5140 <usb_free>
    4f12:	e4e7      	b.n	48e4 <usb_isr+0x3b4>
    4f14:	6e48      	ldr	r0, [r1, #100]	; 0x64
    4f16:	3808      	subs	r0, #8
    4f18:	f000 f912 	bl	5140 <usb_free>
    4f1c:	e4dc      	b.n	48d8 <usb_isr+0x3a8>
    4f1e:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    4f20:	3808      	subs	r0, #8
    4f22:	f000 f90d 	bl	5140 <usb_free>
    4f26:	e4d1      	b.n	48cc <usb_isr+0x39c>
    4f28:	6d48      	ldr	r0, [r1, #84]	; 0x54
    4f2a:	3808      	subs	r0, #8
    4f2c:	f000 f908 	bl	5140 <usb_free>
    4f30:	e4c6      	b.n	48c0 <usb_isr+0x390>
    4f32:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    4f34:	3808      	subs	r0, #8
    4f36:	f000 f903 	bl	5140 <usb_free>
    4f3a:	e4bb      	b.n	48b4 <usb_isr+0x384>
    4f3c:	6c48      	ldr	r0, [r1, #68]	; 0x44
    4f3e:	3808      	subs	r0, #8
    4f40:	f000 f8fe 	bl	5140 <usb_free>
    4f44:	e4b0      	b.n	48a8 <usb_isr+0x378>
    4f46:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    4f4a:	3808      	subs	r0, #8
    4f4c:	f000 f8f8 	bl	5140 <usb_free>
    4f50:	e4ec      	b.n	492c <usb_isr+0x3fc>
    4f52:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    4f56:	3808      	subs	r0, #8
    4f58:	f000 f8f2 	bl	5140 <usb_free>
    4f5c:	e4e0      	b.n	4920 <usb_isr+0x3f0>
    4f5e:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    4f62:	3808      	subs	r0, #8
    4f64:	f000 f8ec 	bl	5140 <usb_free>
    4f68:	e4d4      	b.n	4914 <usb_isr+0x3e4>
    4f6a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    4f6e:	3808      	subs	r0, #8
    4f70:	f000 f8e6 	bl	5140 <usb_free>
    4f74:	e4c8      	b.n	4908 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    4f76:	f04f 0e02 	mov.w	lr, #2
    4f7a:	e6ec      	b.n	4d56 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4f7c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4f7e:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    4f82:	3201      	adds	r2, #1
    4f84:	702a      	strb	r2, [r5, #0]
    4f86:	e65a      	b.n	4c3e <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4f88:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4f8a:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    4f8e:	3201      	adds	r2, #1
    4f90:	702a      	strb	r2, [r5, #0]
    4f92:	e73f      	b.n	4e14 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4f94:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4f96:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    4f9a:	3201      	adds	r2, #1
    4f9c:	702a      	strb	r2, [r5, #0]
    4f9e:	e65b      	b.n	4c58 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4fa0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4fa2:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    4fa6:	3201      	adds	r2, #1
    4fa8:	702a      	strb	r2, [r5, #0]
    4faa:	e761      	b.n	4e70 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4fac:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4fae:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    4fb2:	3201      	adds	r2, #1
    4fb4:	702a      	strb	r2, [r5, #0]
    4fb6:	e65b      	b.n	4c70 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4fb8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4fba:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    4fbe:	3201      	adds	r2, #1
    4fc0:	702a      	strb	r2, [r5, #0]
    4fc2:	e710      	b.n	4de6 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4fc4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4fc6:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    4fca:	3201      	adds	r2, #1
    4fcc:	702a      	strb	r2, [r5, #0]
    4fce:	e628      	b.n	4c22 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4fd0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4fd2:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    4fd6:	3201      	adds	r2, #1
    4fd8:	702a      	strb	r2, [r5, #0]
    4fda:	e732      	b.n	4e42 <usb_isr+0x912>
    4fdc:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    4fe0:	46f4      	mov	ip, lr
    4fe2:	bf28      	it	cs
    4fe4:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    4fe8:	eb04 030c 	add.w	r3, r4, ip
    4fec:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4fee:	2301      	movs	r3, #1
    4ff0:	ebcc 000e 	rsb	r0, ip, lr
    4ff4:	ea4f 480c 	mov.w	r8, ip, lsl #16
    4ff8:	2200      	movs	r2, #0
    4ffa:	9301      	str	r3, [sp, #4]
    4ffc:	e518      	b.n	4a30 <usb_isr+0x500>
    4ffe:	bf00      	nop

00005000 <usb_init>:
}



void usb_init(void)
{
    5000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    5004:	f001 f920 	bl	6248 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5008:	4c31      	ldr	r4, [pc, #196]	; (50d0 <usb_init+0xd0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    500a:	4b32      	ldr	r3, [pc, #200]	; (50d4 <usb_init+0xd4>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    500c:	4832      	ldr	r0, [pc, #200]	; (50d8 <usb_init+0xd8>)
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    500e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 50f4 <usb_init+0xf4>
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5012:	4e32      	ldr	r6, [pc, #200]	; (50dc <usb_init+0xdc>)
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    5014:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 50f8 <usb_init+0xf8>
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5018:	4f31      	ldr	r7, [pc, #196]	; (50e0 <usb_init+0xe0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    501a:	4d32      	ldr	r5, [pc, #200]	; (50e4 <usb_init+0xe4>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    501c:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 50fc <usb_init+0xfc>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5020:	2200      	movs	r2, #0
    5022:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    5024:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5026:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    5028:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    502a:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    502c:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    502e:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    5030:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5032:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    5034:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5036:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    5038:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    503a:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    503c:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    503e:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    5040:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5042:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    5044:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5046:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    5048:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    504a:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    504c:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    504e:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    5050:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5052:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    5054:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5056:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    5058:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    505a:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    505c:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    505e:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    5060:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5066:	6821      	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    5068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    506c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    5070:	6021      	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    5072:	6801      	ldr	r1, [r0, #0]
    5074:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
    5078:	6001      	str	r1, [r0, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    507a:	2103      	movs	r1, #3
    507c:	f888 1000 	strb.w	r1, [r8]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    5080:	20a0      	movs	r0, #160	; 0xa0
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5082:	f3c3 2107 	ubfx	r1, r3, #8, #8
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    5086:	f88c 0000 	strb.w	r0, [ip]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    508a:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    508e:	7031      	strb	r1, [r6, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5090:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5094:	4914      	ldr	r1, [pc, #80]	; (50e8 <usb_init+0xe8>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5096:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5098:	0e1b      	lsrs	r3, r3, #24
    509a:	702b      	strb	r3, [r5, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    509c:	34cc      	adds	r4, #204	; 0xcc
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    509e:	23ff      	movs	r3, #255	; 0xff
    50a0:	f88e 3000 	strb.w	r3, [lr]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    50a4:	4d11      	ldr	r5, [pc, #68]	; (50ec <usb_init+0xec>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    50a6:	f80c 3cb8 	strb.w	r3, [ip, #-184]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    50aa:	4811      	ldr	r0, [pc, #68]	; (50f0 <usb_init+0xf0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    50ac:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    50ae:	2301      	movs	r3, #1
    50b0:	f806 3c08 	strb.w	r3, [r6, #-8]
	USB0_USBCTRL = 0;
    50b4:	7022      	strb	r2, [r4, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    50b6:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    50b8:	f44f 1400 	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    50bc:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    50be:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    50c2:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    50c4:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    50c6:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    50ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50ce:	bf00      	nop
    50d0:	40048034 	.word	0x40048034
    50d4:	1fff0000 	.word	0x1fff0000
    50d8:	4000d800 	.word	0x4000d800
    50dc:	4007209c 	.word	0x4007209c
    50e0:	400720b0 	.word	0x400720b0
    50e4:	400720b4 	.word	0x400720b4
    50e8:	40072010 	.word	0x40072010
    50ec:	e000e435 	.word	0xe000e435
    50f0:	e000e104 	.word	0xe000e104
    50f4:	40072144 	.word	0x40072144
    50f8:	40072140 	.word	0x40072140
    50fc:	40072080 	.word	0x40072080

00005100 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    5100:	b672      	cpsid	i
	avail = usb_buffer_available;
    5102:	480d      	ldr	r0, [pc, #52]	; (5138 <usb_malloc+0x38>)
    5104:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    5106:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    510a:	2b0b      	cmp	r3, #11
    510c:	dc10      	bgt.n	5130 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    510e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5112:	40d9      	lsrs	r1, r3
    5114:	ea22 0201 	bic.w	r2, r2, r1
    5118:	6002      	str	r2, [r0, #0]
	__enable_irq();
    511a:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    511c:	4807      	ldr	r0, [pc, #28]	; (513c <usb_malloc+0x3c>)
    511e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    5122:	00db      	lsls	r3, r3, #3
    5124:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    5126:	2100      	movs	r1, #0
    5128:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    512a:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    512c:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    512e:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    5130:	b662      	cpsie	i
		return NULL;
    5132:	2000      	movs	r0, #0
    5134:	4770      	bx	lr
    5136:	bf00      	nop
    5138:	1fff0780 	.word	0x1fff0780
    513c:	1fff03d0 	.word	0x1fff03d0

00005140 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    5140:	4b0d      	ldr	r3, [pc, #52]	; (5178 <usb_free+0x38>)
    5142:	4a0e      	ldr	r2, [pc, #56]	; (517c <usb_free+0x3c>)
    5144:	1ac3      	subs	r3, r0, r3
    5146:	fba2 2303 	umull	r2, r3, r2, r3
    514a:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    514c:	2b0b      	cmp	r3, #11
    514e:	d80c      	bhi.n	516a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    5150:	4a0b      	ldr	r2, [pc, #44]	; (5180 <usb_free+0x40>)
    5152:	7812      	ldrb	r2, [r2, #0]
    5154:	b952      	cbnz	r2, 516c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    5156:	b672      	cpsid	i
	usb_buffer_available |= mask;
    5158:	480a      	ldr	r0, [pc, #40]	; (5184 <usb_free+0x44>)
    515a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    515e:	6802      	ldr	r2, [r0, #0]
    5160:	fa21 f303 	lsr.w	r3, r1, r3
    5164:	431a      	orrs	r2, r3
    5166:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5168:	b662      	cpsie	i
    516a:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    516c:	4a06      	ldr	r2, [pc, #24]	; (5188 <usb_free+0x48>)
    516e:	7812      	ldrb	r2, [r2, #0]
    5170:	2a00      	cmp	r2, #0
    5172:	d0f0      	beq.n	5156 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    5174:	f7ff b936 	b.w	43e4 <usb_rx_memory>
    5178:	1fff03d0 	.word	0x1fff03d0
    517c:	38e38e39 	.word	0x38e38e39
    5180:	1fff17e1 	.word	0x1fff17e1
    5184:	1fff0780 	.word	0x1fff0780
    5188:	1fff17ec 	.word	0x1fff17ec

0000518c <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    518c:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    518e:	4d0f      	ldr	r5, [pc, #60]	; (51cc <usb_serial_getchar+0x40>)
    5190:	6828      	ldr	r0, [r5, #0]
    5192:	b178      	cbz	r0, 51b4 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    5194:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    5196:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    5198:	18c1      	adds	r1, r0, r3
    519a:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    519c:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    519e:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    51a0:	d202      	bcs.n	51a8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    51a2:	8043      	strh	r3, [r0, #2]
	}
	return c;
    51a4:	4620      	mov	r0, r4
}
    51a6:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    51a8:	f7ff ffca 	bl	5140 <usb_free>
		rx_packet = NULL;
    51ac:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    51ae:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    51b0:	602b      	str	r3, [r5, #0]
    51b2:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    51b4:	4b06      	ldr	r3, [pc, #24]	; (51d0 <usb_serial_getchar+0x44>)
    51b6:	781b      	ldrb	r3, [r3, #0]
    51b8:	b12b      	cbz	r3, 51c6 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    51ba:	2003      	movs	r0, #3
    51bc:	f7ff f8de 	bl	437c <usb_rx>
    51c0:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    51c2:	2800      	cmp	r0, #0
    51c4:	d1e6      	bne.n	5194 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    51c6:	f04f 30ff 	mov.w	r0, #4294967295
    51ca:	bd38      	pop	{r3, r4, r5, pc}
    51cc:	1fff1800 	.word	0x1fff1800
    51d0:	1fff17ec 	.word	0x1fff17ec

000051d4 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    51d4:	b510      	push	{r4, lr}
	if (!rx_packet) {
    51d6:	4c09      	ldr	r4, [pc, #36]	; (51fc <usb_serial_peekchar+0x28>)
    51d8:	6820      	ldr	r0, [r4, #0]
    51da:	b118      	cbz	r0, 51e4 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    51dc:	8843      	ldrh	r3, [r0, #2]
    51de:	4418      	add	r0, r3
    51e0:	7a00      	ldrb	r0, [r0, #8]
}
    51e2:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    51e4:	4b06      	ldr	r3, [pc, #24]	; (5200 <usb_serial_peekchar+0x2c>)
    51e6:	781b      	ldrb	r3, [r3, #0]
    51e8:	b12b      	cbz	r3, 51f6 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    51ea:	2003      	movs	r0, #3
    51ec:	f7ff f8c6 	bl	437c <usb_rx>
    51f0:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    51f2:	2800      	cmp	r0, #0
    51f4:	d1f2      	bne.n	51dc <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    51f6:	f04f 30ff 	mov.w	r0, #4294967295
    51fa:	bd10      	pop	{r4, pc}
    51fc:	1fff1800 	.word	0x1fff1800
    5200:	1fff17ec 	.word	0x1fff17ec

00005204 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5204:	4b04      	ldr	r3, [pc, #16]	; (5218 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    5206:	4a05      	ldr	r2, [pc, #20]	; (521c <usb_serial_available+0x18>)
    5208:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    520a:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    520c:	b11b      	cbz	r3, 5216 <usb_serial_available+0x12>
    520e:	881a      	ldrh	r2, [r3, #0]
    5210:	885b      	ldrh	r3, [r3, #2]
    5212:	1ad3      	subs	r3, r2, r3
    5214:	4418      	add	r0, r3
	return count;
}
    5216:	4770      	bx	lr
    5218:	1fff1800 	.word	0x1fff1800
    521c:	1fff1a64 	.word	0x1fff1a64

00005220 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    5220:	4b0b      	ldr	r3, [pc, #44]	; (5250 <usb_serial_flush_input+0x30>)
    5222:	781b      	ldrb	r3, [r3, #0]
    5224:	b19b      	cbz	r3, 524e <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    5226:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    5228:	4c0a      	ldr	r4, [pc, #40]	; (5254 <usb_serial_flush_input+0x34>)
    522a:	6820      	ldr	r0, [r4, #0]
    522c:	b148      	cbz	r0, 5242 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    522e:	f7ff ff87 	bl	5140 <usb_free>
		rx_packet = NULL;
    5232:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5234:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5236:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5238:	f7ff f8a0 	bl	437c <usb_rx>
		if (!rx) break;
    523c:	b130      	cbz	r0, 524c <usb_serial_flush_input+0x2c>
		usb_free(rx);
    523e:	f7ff ff7f 	bl	5140 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5242:	2003      	movs	r0, #3
    5244:	f7ff f89a 	bl	437c <usb_rx>
		if (!rx) break;
    5248:	2800      	cmp	r0, #0
    524a:	d1f8      	bne.n	523e <usb_serial_flush_input+0x1e>
    524c:	bd10      	pop	{r4, pc}
    524e:	4770      	bx	lr
    5250:	1fff17ec 	.word	0x1fff17ec
    5254:	1fff1800 	.word	0x1fff1800

00005258 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    525c:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 5358 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5260:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5262:	2201      	movs	r2, #1
    5264:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    5268:	9101      	str	r1, [sp, #4]
    526a:	b369      	cbz	r1, 52c8 <usb_serial_write+0x70>
    526c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 535c <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5270:	4f35      	ldr	r7, [pc, #212]	; (5348 <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5272:	9e01      	ldr	r6, [sp, #4]
    5274:	4683      	mov	fp, r0
		if (!tx_packet) {
    5276:	f8d8 0000 	ldr.w	r0, [r8]
    527a:	b3b0      	cbz	r0, 52ea <usb_serial_write+0x92>
    527c:	4d33      	ldr	r5, [pc, #204]	; (534c <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    527e:	8844      	ldrh	r4, [r0, #2]
    5280:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    5284:	42b1      	cmp	r1, r6
    5286:	bf28      	it	cs
    5288:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    528a:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    528e:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5290:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5294:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    5296:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5298:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    529c:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    52a0:	b151      	cbz	r1, 52b8 <usb_serial_write+0x60>
    52a2:	3c01      	subs	r4, #1
    52a4:	4422      	add	r2, r4
    52a6:	4459      	add	r1, fp
    52a8:	f81b 4b01 	ldrb.w	r4, [fp], #1
    52ac:	f802 4f01 	strb.w	r4, [r2, #1]!
    52b0:	458b      	cmp	fp, r1
    52b2:	d1f9      	bne.n	52a8 <usb_serial_write+0x50>
    52b4:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    52b8:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    52bc:	d80b      	bhi.n	52d6 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    52be:	4a24      	ldr	r2, [pc, #144]	; (5350 <usb_serial_write+0xf8>)
    52c0:	2105      	movs	r1, #5
    52c2:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    52c4:	2e00      	cmp	r6, #0
    52c6:	d1d6      	bne.n	5276 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    52c8:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    52ca:	2300      	movs	r3, #0
    52cc:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    52d0:	b003      	add	sp, #12
    52d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    52d6:	2240      	movs	r2, #64	; 0x40
    52d8:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    52da:	4601      	mov	r1, r0
    52dc:	2004      	movs	r0, #4
    52de:	f7ff f8e5 	bl	44ac <usb_tx>
			tx_packet = NULL;
    52e2:	2200      	movs	r2, #0
    52e4:	f8c8 2000 	str.w	r2, [r8]
    52e8:	e7e9      	b.n	52be <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    52ea:	783a      	ldrb	r2, [r7, #0]
    52ec:	b322      	cbz	r2, 5338 <usb_serial_write+0xe0>
    52ee:	4c19      	ldr	r4, [pc, #100]	; (5354 <usb_serial_write+0xfc>)
    52f0:	4d16      	ldr	r5, [pc, #88]	; (534c <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    52f2:	f04f 0a01 	mov.w	sl, #1
    52f6:	e007      	b.n	5308 <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    52f8:	3c01      	subs	r4, #1
    52fa:	d016      	beq.n	532a <usb_serial_write+0xd2>
    52fc:	782a      	ldrb	r2, [r5, #0]
    52fe:	b9a2      	cbnz	r2, 532a <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    5300:	f000 fbe6 	bl	5ad0 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5304:	783a      	ldrb	r2, [r7, #0]
    5306:	b1ba      	cbz	r2, 5338 <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    5308:	2004      	movs	r0, #4
    530a:	f7ff f855 	bl	43b8 <usb_tx_packet_count>
    530e:	2807      	cmp	r0, #7
    5310:	d8f2      	bhi.n	52f8 <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    5312:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    5316:	f7ff fef3 	bl	5100 <usb_malloc>
    531a:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    531e:	2800      	cmp	r0, #0
    5320:	d1ad      	bne.n	527e <usb_serial_write+0x26>
					tx_noautoflush = 0;
    5322:	4b0d      	ldr	r3, [pc, #52]	; (5358 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5324:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    5326:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5328:	d1e8      	bne.n	52fc <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    532a:	2301      	movs	r3, #1
					return -1;
    532c:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    5330:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5332:	b003      	add	sp, #12
    5334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    5338:	2300      	movs	r3, #0
					return -1;
    533a:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    533e:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5342:	b003      	add	sp, #12
    5344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5348:	1fff17ec 	.word	0x1fff17ec
    534c:	1fff17fc 	.word	0x1fff17fc
    5350:	1fff17f4 	.word	0x1fff17f4
    5354:	00014821 	.word	0x00014821
    5358:	1fff17f5 	.word	0x1fff17f5
    535c:	1fff17f8 	.word	0x1fff17f8

00005360 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5360:	b500      	push	{lr}
    5362:	b083      	sub	sp, #12
    5364:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    5366:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5368:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    536c:	4618      	mov	r0, r3
    536e:	f7ff ff73 	bl	5258 <usb_serial_write>
}
    5372:	b003      	add	sp, #12
    5374:	f85d fb04 	ldr.w	pc, [sp], #4

00005378 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    5378:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    537a:	4d0e      	ldr	r5, [pc, #56]	; (53b4 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    537c:	4c0e      	ldr	r4, [pc, #56]	; (53b8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    537e:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    5380:	2301      	movs	r3, #1
    5382:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    5384:	b128      	cbz	r0, 5392 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    5386:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    5388:	2300      	movs	r3, #0
    538a:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    538c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    5390:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    5392:	4b0a      	ldr	r3, [pc, #40]	; (53bc <usb_serial_write_buffer_free+0x44>)
    5394:	781b      	ldrb	r3, [r3, #0]
    5396:	b913      	cbnz	r3, 539e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    5398:	2000      	movs	r0, #0
    539a:	7020      	strb	r0, [r4, #0]
			return 0;
    539c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    539e:	2004      	movs	r0, #4
    53a0:	f7ff f80a 	bl	43b8 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    53a4:	2807      	cmp	r0, #7
    53a6:	d8f7      	bhi.n	5398 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    53a8:	f7ff feaa 	bl	5100 <usb_malloc>
    53ac:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    53ae:	2800      	cmp	r0, #0
    53b0:	d1e9      	bne.n	5386 <usb_serial_write_buffer_free+0xe>
    53b2:	e7f1      	b.n	5398 <usb_serial_write_buffer_free+0x20>
    53b4:	1fff17f8 	.word	0x1fff17f8
    53b8:	1fff17f5 	.word	0x1fff17f5
    53bc:	1fff17ec 	.word	0x1fff17ec

000053c0 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    53c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    53c2:	4b11      	ldr	r3, [pc, #68]	; (5408 <usb_serial_flush_output+0x48>)
    53c4:	781b      	ldrb	r3, [r3, #0]
    53c6:	b18b      	cbz	r3, 53ec <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    53c8:	4e10      	ldr	r6, [pc, #64]	; (540c <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    53ca:	4d11      	ldr	r5, [pc, #68]	; (5410 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    53cc:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    53ce:	2701      	movs	r7, #1
    53d0:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    53d2:	b164      	cbz	r4, 53ee <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    53d4:	4a0f      	ldr	r2, [pc, #60]	; (5414 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    53d6:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    53d8:	2700      	movs	r7, #0
    53da:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    53dc:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    53de:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    53e0:	2004      	movs	r0, #4
    53e2:	f7ff f863 	bl	44ac <usb_tx>
		tx_packet = NULL;
    53e6:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    53e8:	2300      	movs	r3, #0
    53ea:	702b      	strb	r3, [r5, #0]
    53ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    53ee:	f7ff fe87 	bl	5100 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    53f2:	4b08      	ldr	r3, [pc, #32]	; (5414 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    53f4:	b128      	cbz	r0, 5402 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    53f6:	4601      	mov	r1, r0
    53f8:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    53fa:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    53fc:	f7ff f856 	bl	44ac <usb_tx>
    5400:	e7f2      	b.n	53e8 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5402:	701f      	strb	r7, [r3, #0]
    5404:	e7f0      	b.n	53e8 <usb_serial_flush_output+0x28>
    5406:	bf00      	nop
    5408:	1fff17ec 	.word	0x1fff17ec
    540c:	1fff17f8 	.word	0x1fff17f8
    5410:	1fff17f5 	.word	0x1fff17f5
    5414:	1fff17f4 	.word	0x1fff17f4

00005418 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    5418:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    541a:	4b0e      	ldr	r3, [pc, #56]	; (5454 <usb_serial_flush_callback+0x3c>)
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	b973      	cbnz	r3, 543e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    5420:	4c0d      	ldr	r4, [pc, #52]	; (5458 <usb_serial_flush_callback+0x40>)
    5422:	6821      	ldr	r1, [r4, #0]
    5424:	b161      	cbz	r1, 5440 <usb_serial_flush_callback+0x28>
    5426:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    542a:	884b      	ldrh	r3, [r1, #2]
    542c:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    542e:	2004      	movs	r0, #4
    5430:	f7ff f83c 	bl	44ac <usb_tx>
		tx_packet = NULL;
    5434:	6025      	str	r5, [r4, #0]
    5436:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5438:	4b08      	ldr	r3, [pc, #32]	; (545c <usb_serial_flush_callback+0x44>)
    543a:	2201      	movs	r2, #1
    543c:	701a      	strb	r2, [r3, #0]
    543e:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    5440:	f7ff fe5e 	bl	5100 <usb_malloc>
		if (tx) {
    5444:	2800      	cmp	r0, #0
    5446:	d0f7      	beq.n	5438 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    5448:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    544a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    544e:	2004      	movs	r0, #4
    5450:	f7ff b82c 	b.w	44ac <usb_tx>
    5454:	1fff17f5 	.word	0x1fff17f5
    5458:	1fff17f8 	.word	0x1fff17f8
    545c:	1fff17f4 	.word	0x1fff17f4

00005460 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    5460:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5462:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5466:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    5468:	7f43      	ldrb	r3, [r0, #29]
    546a:	b933      	cbnz	r3, 547a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    546c:	7f01      	ldrb	r1, [r0, #28]
    546e:	2901      	cmp	r1, #1
    5470:	d008      	beq.n	5484 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    5472:	2903      	cmp	r1, #3
    5474:	d010      	beq.n	5498 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    5476:	2301      	movs	r3, #1
    5478:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    547a:	b902      	cbnz	r2, 547e <EventResponder::triggerEventNotImmediate()+0x1e>
    547c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    547e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5482:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    5484:	4c11      	ldr	r4, [pc, #68]	; (54cc <EventResponder::triggerEventNotImmediate()+0x6c>)
    5486:	6821      	ldr	r1, [r4, #0]
    5488:	b1a1      	cbz	r1, 54b4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    548a:	4911      	ldr	r1, [pc, #68]	; (54d0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    548c:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    548e:	680b      	ldr	r3, [r1, #0]
    5490:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    5492:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    5494:	6158      	str	r0, [r3, #20]
    5496:	e7ee      	b.n	5476 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    5498:	4c0e      	ldr	r4, [pc, #56]	; (54d4 <EventResponder::triggerEventNotImmediate()+0x74>)
    549a:	6821      	ldr	r1, [r4, #0]
    549c:	b181      	cbz	r1, 54c0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    549e:	490e      	ldr	r1, [pc, #56]	; (54d8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    54a0:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    54a2:	680b      	ldr	r3, [r1, #0]
    54a4:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    54a6:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    54a8:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    54aa:	4b0c      	ldr	r3, [pc, #48]	; (54dc <EventResponder::triggerEventNotImmediate()+0x7c>)
    54ac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    54b0:	6019      	str	r1, [r3, #0]
    54b2:	e7e0      	b.n	5476 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    54b4:	4b06      	ldr	r3, [pc, #24]	; (54d0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    54b6:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    54b8:	6181      	str	r1, [r0, #24]
				firstYield = this;
    54ba:	6020      	str	r0, [r4, #0]
				lastYield = this;
    54bc:	6018      	str	r0, [r3, #0]
    54be:	e7da      	b.n	5476 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    54c0:	4b05      	ldr	r3, [pc, #20]	; (54d8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    54c2:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    54c4:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    54c6:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    54c8:	6018      	str	r0, [r3, #0]
    54ca:	e7ee      	b.n	54aa <EventResponder::triggerEventNotImmediate()+0x4a>
    54cc:	1fff1818 	.word	0x1fff1818
    54d0:	1fff1814 	.word	0x1fff1814
    54d4:	1fff1808 	.word	0x1fff1808
    54d8:	1fff180c 	.word	0x1fff180c
    54dc:	e000ed04 	.word	0xe000ed04

000054e0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    54e0:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    54e2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    54e6:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    54e8:	4c0c      	ldr	r4, [pc, #48]	; (551c <EventResponder::runFromInterrupt()+0x3c>)
    54ea:	6820      	ldr	r0, [r4, #0]
		if (first) {
    54ec:	b180      	cbz	r0, 5510 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    54ee:	4e0c      	ldr	r6, [pc, #48]	; (5520 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    54f0:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    54f2:	6943      	ldr	r3, [r0, #20]
    54f4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    54f6:	b173      	cbz	r3, 5516 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    54f8:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    54fa:	b902      	cbnz	r2, 54fe <EventResponder::runFromInterrupt()+0x1e>
    54fc:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    54fe:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    5500:	6883      	ldr	r3, [r0, #8]
    5502:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5504:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5508:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    550a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    550c:	2800      	cmp	r0, #0
    550e:	d1f0      	bne.n	54f2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5510:	b902      	cbnz	r2, 5514 <EventResponder::runFromInterrupt()+0x34>
    5512:	b662      	cpsie	i
    5514:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5516:	6033      	str	r3, [r6, #0]
    5518:	e7ef      	b.n	54fa <EventResponder::runFromInterrupt()+0x1a>
    551a:	bf00      	nop
    551c:	1fff1808 	.word	0x1fff1808
    5520:	1fff180c 	.word	0x1fff180c

00005524 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    5524:	f7ff bfdc 	b.w	54e0 <EventResponder::runFromInterrupt()>

00005528 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    5528:	4a18      	ldr	r2, [pc, #96]	; (558c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    552a:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    552c:	6814      	ldr	r4, [r2, #0]
    552e:	2c00      	cmp	r4, #0
    5530:	d027      	beq.n	5582 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    5532:	6803      	ldr	r3, [r0, #0]
    5534:	6821      	ldr	r1, [r4, #0]
    5536:	428b      	cmp	r3, r1
    5538:	d20e      	bcs.n	5558 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    553a:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    553c:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    553e:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5540:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    5542:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    5544:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    5546:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    5548:	2302      	movs	r3, #2
    554a:	7503      	strb	r3, [r0, #20]
}
    554c:	bc30      	pop	{r4, r5}
    554e:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    5550:	6811      	ldr	r1, [r2, #0]
    5552:	428b      	cmp	r3, r1
    5554:	4614      	mov	r4, r2
    5556:	d308      	bcc.n	556a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5558:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    555a:	1a5b      	subs	r3, r3, r1
    555c:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    555e:	2a00      	cmp	r2, #0
    5560:	d1f6      	bne.n	5550 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    5562:	6082      	str	r2, [r0, #8]
		_prev = timer;
    5564:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    5566:	60a0      	str	r0, [r4, #8]
    5568:	e7ee      	b.n	5548 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    556a:	68d2      	ldr	r2, [r2, #12]
    556c:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    556e:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    5570:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    5572:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    5574:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    5576:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    5578:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    557a:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    557c:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    557e:	bc30      	pop	{r4, r5}
    5580:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    5582:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5584:	60c4      	str	r4, [r0, #12]
		listActive = this;
    5586:	6010      	str	r0, [r2, #0]
    5588:	e7de      	b.n	5548 <MillisTimer::addToActiveList()+0x20>
    558a:	bf00      	nop
    558c:	1fff1810 	.word	0x1fff1810

00005590 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    5590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    5592:	4e22      	ldr	r6, [pc, #136]	; (561c <MillisTimer::runFromTimer()+0x8c>)
    5594:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    5596:	b32c      	cbz	r4, 55e4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    5598:	6823      	ldr	r3, [r4, #0]
    559a:	2b00      	cmp	r3, #0
    559c:	d13a      	bne.n	5614 <MillisTimer::runFromTimer()+0x84>
    559e:	4f20      	ldr	r7, [pc, #128]	; (5620 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    55a0:	461d      	mov	r5, r3
    55a2:	e004      	b.n	55ae <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    55a4:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    55a6:	b1ec      	cbz	r4, 55e4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    55a8:	6823      	ldr	r3, [r4, #0]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d132      	bne.n	5614 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    55ae:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    55b0:	b103      	cbz	r3, 55b4 <MillisTimer::runFromTimer()+0x24>
    55b2:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    55b4:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    55b6:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    55b8:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    55ba:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    55bc:	681b      	ldr	r3, [r3, #0]
    55be:	42bb      	cmp	r3, r7
    55c0:	d121      	bne.n	5606 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    55c2:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    55c4:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    55c6:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    55c8:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    55ca:	d020      	beq.n	560e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    55cc:	f7ff ff48 	bl	5460 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    55d0:	6863      	ldr	r3, [r4, #4]
    55d2:	2b00      	cmp	r3, #0
    55d4:	d0e6      	beq.n	55a4 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    55d6:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    55d8:	4620      	mov	r0, r4
    55da:	f7ff ffa5 	bl	5528 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    55de:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    55e0:	2c00      	cmp	r4, #0
    55e2:	d1e1      	bne.n	55a8 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    55e4:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    55e8:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    55ea:	4a0e      	ldr	r2, [pc, #56]	; (5624 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    55ec:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    55ee:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    55f0:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    55f2:	b903      	cbnz	r3, 55f6 <MillisTimer::runFromTimer()+0x66>
    55f4:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    55f6:	b128      	cbz	r0, 5604 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    55f8:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    55fa:	f7ff ff95 	bl	5528 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    55fe:	4620      	mov	r0, r4
    5600:	2800      	cmp	r0, #0
    5602:	d1f9      	bne.n	55f8 <MillisTimer::runFromTimer()+0x68>
    5604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5606:	4622      	mov	r2, r4
    5608:	2100      	movs	r1, #0
    560a:	4798      	blx	r3
    560c:	e7e0      	b.n	55d0 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    560e:	6883      	ldr	r3, [r0, #8]
    5610:	4798      	blx	r3
    5612:	e7dd      	b.n	55d0 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    5614:	3b01      	subs	r3, #1
    5616:	6023      	str	r3, [r4, #0]
			break;
    5618:	e7e4      	b.n	55e4 <MillisTimer::runFromTimer()+0x54>
    561a:	bf00      	nop
    561c:	1fff1810 	.word	0x1fff1810
    5620:	00003911 	.word	0x00003911
    5624:	1fff1820 	.word	0x1fff1820

00005628 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    5628:	4a02      	ldr	r2, [pc, #8]	; (5634 <systick_isr+0xc>)
    562a:	6813      	ldr	r3, [r2, #0]
    562c:	3301      	adds	r3, #1
    562e:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    5630:	f7ff bfae 	b.w	5590 <MillisTimer::runFromTimer()>
    5634:	1fff1610 	.word	0x1fff1610

00005638 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    5638:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    563a:	f7fa ff21 	bl	480 <setup>
	while (1) {
		loop();
    563e:	f7fa ff57 	bl	4f0 <loop>
		yield();
    5642:	f000 fa45 	bl	5ad0 <yield>
    5646:	e7fa      	b.n	563e <main+0x6>

00005648 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    5648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    564a:	460e      	mov	r6, r1
    564c:	b171      	cbz	r1, 566c <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    564e:	b17a      	cbz	r2, 5670 <Print::write(unsigned char const*, unsigned int)+0x28>
    5650:	4607      	mov	r7, r0
    5652:	4614      	mov	r4, r2
    5654:	2500      	movs	r5, #0
    5656:	683b      	ldr	r3, [r7, #0]
    5658:	f816 1b01 	ldrb.w	r1, [r6], #1
    565c:	681b      	ldr	r3, [r3, #0]
    565e:	4638      	mov	r0, r7
    5660:	4798      	blx	r3
    5662:	3c01      	subs	r4, #1
    5664:	4405      	add	r5, r0
    5666:	d1f6      	bne.n	5656 <Print::write(unsigned char const*, unsigned int)+0xe>
    5668:	4628      	mov	r0, r5
    566a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    566c:	4608      	mov	r0, r1
    566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5670:	4610      	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    5672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005674 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    5674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5678:	688c      	ldr	r4, [r1, #8]
    567a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    567c:	b1ec      	cbz	r4, 56ba <Print::print(String const&)+0x46>
    567e:	2500      	movs	r5, #0
    5680:	4606      	mov	r6, r0
    5682:	4689      	mov	r9, r1
    5684:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    5686:	462b      	mov	r3, r5
    5688:	2221      	movs	r2, #33	; 0x21
    568a:	a901      	add	r1, sp, #4
    568c:	4648      	mov	r0, r9
    568e:	f000 fa05 	bl	5a9c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    5692:	6832      	ldr	r2, [r6, #0]
    5694:	2c20      	cmp	r4, #32
    5696:	4623      	mov	r3, r4
    5698:	bf28      	it	cs
    569a:	2320      	movcs	r3, #32
    569c:	f8d2 8004 	ldr.w	r8, [r2, #4]
    56a0:	a901      	add	r1, sp, #4
    56a2:	461a      	mov	r2, r3
    56a4:	4630      	mov	r0, r6
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    56a6:	441d      	add	r5, r3
		len -= nbytes;
    56a8:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    56aa:	47c0      	blx	r8
    56ac:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    56ae:	2c00      	cmp	r4, #0
    56b0:	d1e9      	bne.n	5686 <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    56b2:	4638      	mov	r0, r7
    56b4:	b00b      	add	sp, #44	; 0x2c
    56b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    56ba:	4627      	mov	r7, r4
    56bc:	e7f9      	b.n	56b2 <Print::print(String const&)+0x3e>
    56be:	bf00      	nop

000056c0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    56c0:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    56c2:	4a06      	ldr	r2, [pc, #24]	; (56dc <Print::println()+0x1c>)
	return write(buf, 2);
    56c4:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    56c6:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    56c8:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    56ca:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    56cc:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    56ce:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    56d2:	2202      	movs	r2, #2
    56d4:	4798      	blx	r3
}
    56d6:	b003      	add	sp, #12
    56d8:	f85d fb04 	ldr.w	pc, [sp], #4
    56dc:	0000b73c 	.word	0x0000b73c

000056e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    56e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56e2:	4607      	mov	r7, r0
    56e4:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    56e6:	2a00      	cmp	r2, #0
    56e8:	d033      	beq.n	5752 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    56ea:	2a01      	cmp	r2, #1
    56ec:	bf08      	it	eq
    56ee:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    56f0:	b351      	cbz	r1, 5748 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    56f2:	2421      	movs	r4, #33	; 0x21
    56f4:	e000      	b.n	56f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    56f6:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    56f8:	fbb1 f5f2 	udiv	r5, r1, r2
    56fc:	fb02 1115 	mls	r1, r2, r5, r1
    5700:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5702:	2909      	cmp	r1, #9
    5704:	f100 0130 	add.w	r1, r0, #48	; 0x30
    5708:	bf98      	it	ls
    570a:	b2c8      	uxtbls	r0, r1
    570c:	a90a      	add	r1, sp, #40	; 0x28
    570e:	bf88      	it	hi
    5710:	3037      	addhi	r0, #55	; 0x37
    5712:	4421      	add	r1, r4
    5714:	bf88      	it	hi
    5716:	b2c0      	uxtbhi	r0, r0
    5718:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    571c:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    571e:	4629      	mov	r1, r5
    5720:	2d00      	cmp	r5, #0
    5722:	d1e8      	bne.n	56f6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    5724:	b133      	cbz	r3, 5734 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    5726:	3c01      	subs	r4, #1
    5728:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    572a:	ab0a      	add	r3, sp, #40	; 0x28
    572c:	4423      	add	r3, r4
    572e:	222d      	movs	r2, #45	; 0x2d
    5730:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    5734:	683b      	ldr	r3, [r7, #0]
    5736:	aa01      	add	r2, sp, #4
    5738:	1911      	adds	r1, r2, r4
    573a:	685b      	ldr	r3, [r3, #4]
    573c:	4638      	mov	r0, r7
    573e:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    5742:	4798      	blx	r3
}
    5744:	b00b      	add	sp, #44	; 0x2c
    5746:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    5748:	2230      	movs	r2, #48	; 0x30
    574a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    574e:	2421      	movs	r4, #33	; 0x21
    5750:	e7e8      	b.n	5724 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    5752:	6803      	ldr	r3, [r0, #0]
    5754:	b2c9      	uxtb	r1, r1
    5756:	681b      	ldr	r3, [r3, #0]
    5758:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    575a:	b00b      	add	sp, #44	; 0x2c
    575c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    575e:	bf00      	nop

00005760 <Print::printFloat(double, unsigned char)>:

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
    5760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5764:	ec57 6b10 	vmov	r6, r7, d0
    5768:	b085      	sub	sp, #20
    576a:	4605      	mov	r5, r0
    576c:	460c      	mov	r4, r1
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    576e:	ee10 2a10 	vmov	r2, s0
    5772:	463b      	mov	r3, r7
    5774:	ee10 0a10 	vmov	r0, s0
    5778:	4639      	mov	r1, r7
    577a:	f001 fa05 	bl	6b88 <__aeabi_dcmpun>
    577e:	2800      	cmp	r0, #0
    5780:	f040 80b2 	bne.w	58e8 <Print::printFloat(double, unsigned char)+0x188>
    	if (isinf(number)) return print("inf");
    5784:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
    5788:	4630      	mov	r0, r6
    578a:	4649      	mov	r1, r9
    578c:	f04f 32ff 	mov.w	r2, #4294967295
    5790:	4b59      	ldr	r3, [pc, #356]	; (58f8 <Print::printFloat(double, unsigned char)+0x198>)
    5792:	f001 f9f9 	bl	6b88 <__aeabi_dcmpun>
    5796:	b990      	cbnz	r0, 57be <Print::printFloat(double, unsigned char)+0x5e>
    5798:	4630      	mov	r0, r6
    579a:	4649      	mov	r1, r9
    579c:	f04f 32ff 	mov.w	r2, #4294967295
    57a0:	4b55      	ldr	r3, [pc, #340]	; (58f8 <Print::printFloat(double, unsigned char)+0x198>)
    57a2:	f001 f9d3 	bl	6b4c <__aeabi_dcmple>
    57a6:	b950      	cbnz	r0, 57be <Print::printFloat(double, unsigned char)+0x5e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    57a8:	682b      	ldr	r3, [r5, #0]
    57aa:	4954      	ldr	r1, [pc, #336]	; (58fc <Print::printFloat(double, unsigned char)+0x19c>)
    57ac:	685b      	ldr	r3, [r3, #4]
    57ae:	4628      	mov	r0, r5
    57b0:	2203      	movs	r2, #3
    57b2:	4798      	blx	r3
    57b4:	4680      	mov	r8, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    57b6:	4640      	mov	r0, r8
    57b8:	b005      	add	sp, #20
    57ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    57be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    57c2:	4b4f      	ldr	r3, [pc, #316]	; (5900 <Print::printFloat(double, unsigned char)+0x1a0>)
    57c4:	4630      	mov	r0, r6
    57c6:	4639      	mov	r1, r7
    57c8:	f001 f9d4 	bl	6b74 <__aeabi_dcmpgt>
    57cc:	2800      	cmp	r0, #0
    57ce:	d172      	bne.n	58b6 <Print::printFloat(double, unsigned char)+0x156>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    57d0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    57d4:	4b4b      	ldr	r3, [pc, #300]	; (5904 <Print::printFloat(double, unsigned char)+0x1a4>)
    57d6:	4630      	mov	r0, r6
    57d8:	4639      	mov	r1, r7
    57da:	f001 f9ad 	bl	6b38 <__aeabi_dcmplt>
    57de:	2800      	cmp	r0, #0
    57e0:	d169      	bne.n	58b6 <Print::printFloat(double, unsigned char)+0x156>
	
	// Handle negative numbers
	if (number < 0.0) {
    57e2:	2200      	movs	r2, #0
    57e4:	2300      	movs	r3, #0
    57e6:	4630      	mov	r0, r6
    57e8:	4639      	mov	r1, r7
    57ea:	f001 f9a5 	bl	6b38 <__aeabi_dcmplt>
    57ee:	2800      	cmp	r0, #0
    57f0:	d164      	bne.n	58bc <Print::printFloat(double, unsigned char)+0x15c>

#endif

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    57f2:	4681      	mov	r9, r0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    57f4:	2c00      	cmp	r4, #0
    57f6:	d067      	beq.n	58c8 <Print::printFloat(double, unsigned char)+0x168>
    57f8:	4943      	ldr	r1, [pc, #268]	; (5908 <Print::printFloat(double, unsigned char)+0x1a8>)
    57fa:	2000      	movs	r0, #0
    57fc:	f04f 0800 	mov.w	r8, #0
		rounding *= 0.1;
    5800:	a33b      	add	r3, pc, #236	; (adr r3, 58f0 <Print::printFloat(double, unsigned char)+0x190>)
    5802:	e9d3 2300 	ldrd	r2, r3, [r3]
    5806:	f108 0801 	add.w	r8, r8, #1
    580a:	f000 ff23 	bl	6654 <__aeabi_dmul>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    580e:	fa5f f388 	uxtb.w	r3, r8
    5812:	429c      	cmp	r4, r3
    5814:	d8f4      	bhi.n	5800 <Print::printFloat(double, unsigned char)+0xa0>
		rounding *= 0.1;
	}
	number += rounding;
    5816:	4602      	mov	r2, r0
    5818:	460b      	mov	r3, r1
    581a:	4630      	mov	r0, r6
    581c:	4639      	mov	r1, r7
    581e:	f000 fd67 	bl	62f0 <__adddf3>
    5822:	460f      	mov	r7, r1
    5824:	4606      	mov	r6, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    5826:	f001 f9ed 	bl	6c04 <__aeabi_d2uiz>
    582a:	4680      	mov	r8, r0
	double remainder = number - (double)int_part;
    582c:	f000 fe9c 	bl	6568 <__aeabi_ui2d>
    5830:	4602      	mov	r2, r0
    5832:	460b      	mov	r3, r1
    5834:	4630      	mov	r0, r6
    5836:	4639      	mov	r1, r7
    5838:	f000 fd58 	bl	62ec <__aeabi_dsub>
	count += printNumber(int_part, 10, sign);
    583c:	464b      	mov	r3, r9
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    583e:	4606      	mov	r6, r0
    5840:	460f      	mov	r7, r1
	count += printNumber(int_part, 10, sign);
    5842:	220a      	movs	r2, #10
    5844:	4641      	mov	r1, r8
    5846:	4628      	mov	r0, r5
    5848:	f7ff ff4a 	bl	56e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    584c:	2c0f      	cmp	r4, #15
    584e:	bf28      	it	cs
    5850:	240f      	movcs	r4, #15
    5852:	f104 0901 	add.w	r9, r4, #1

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    5856:	232e      	movs	r3, #46	; 0x2e
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    5858:	4680      	mov	r8, r0
    585a:	fa5f f989 	uxtb.w	r9, r9

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    585e:	f88d 3000 	strb.w	r3, [sp]
    5862:	2401      	movs	r4, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    5864:	2200      	movs	r2, #0
    5866:	4b29      	ldr	r3, [pc, #164]	; (590c <Print::printFloat(double, unsigned char)+0x1ac>)
    5868:	4630      	mov	r0, r6
    586a:	4639      	mov	r1, r7
    586c:	f000 fef2 	bl	6654 <__aeabi_dmul>
    5870:	460f      	mov	r7, r1
    5872:	4606      	mov	r6, r0
			n = (uint8_t)(remainder);
    5874:	f001 f9c6 	bl	6c04 <__aeabi_d2uiz>
			buf[count++] = '0' + n;
    5878:	ab04      	add	r3, sp, #16
    587a:	4423      	add	r3, r4
		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    587c:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    587e:	f100 0230 	add.w	r2, r0, #48	; 0x30
    5882:	f803 2c10 	strb.w	r2, [r3, #-16]
			remainder -= n; 
    5886:	f000 fe7f 	bl	6588 <__aeabi_i2d>
    588a:	4602      	mov	r2, r0
    588c:	460b      	mov	r3, r1
    588e:	4630      	mov	r0, r6
    5890:	4639      	mov	r1, r7
    5892:	f000 fd2b 	bl	62ec <__aeabi_dsub>
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    5896:	3401      	adds	r4, #1
    5898:	b2e4      	uxtb	r4, r4
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    589a:	454c      	cmp	r4, r9
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
    589c:	4606      	mov	r6, r0
    589e:	460f      	mov	r7, r1
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    58a0:	d1e0      	bne.n	5864 <Print::printFloat(double, unsigned char)+0x104>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    58a2:	682b      	ldr	r3, [r5, #0]
    58a4:	4622      	mov	r2, r4
    58a6:	685b      	ldr	r3, [r3, #4]
    58a8:	4628      	mov	r0, r5
    58aa:	4669      	mov	r1, sp
    58ac:	4798      	blx	r3
	}
	return count;
}
    58ae:	4640      	mov	r0, r8
    58b0:	b005      	add	sp, #20
    58b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    58b6:	682b      	ldr	r3, [r5, #0]
    58b8:	4915      	ldr	r1, [pc, #84]	; (5910 <Print::printFloat(double, unsigned char)+0x1b0>)
    58ba:	e777      	b.n	57ac <Print::printFloat(double, unsigned char)+0x4c>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    58bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    58c0:	461f      	mov	r7, r3
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    58c2:	f04f 0901 	mov.w	r9, #1
    58c6:	e795      	b.n	57f4 <Print::printFloat(double, unsigned char)+0x94>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    58c8:	2200      	movs	r2, #0
    58ca:	4b0f      	ldr	r3, [pc, #60]	; (5908 <Print::printFloat(double, unsigned char)+0x1a8>)
    58cc:	4630      	mov	r0, r6
    58ce:	4639      	mov	r1, r7
    58d0:	f000 fd0e 	bl	62f0 <__adddf3>
    58d4:	f001 f996 	bl	6c04 <__aeabi_d2uiz>
    58d8:	464b      	mov	r3, r9
    58da:	4601      	mov	r1, r0
    58dc:	220a      	movs	r2, #10
    58de:	4628      	mov	r0, r5
    58e0:	f7ff fefe 	bl	56e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    58e4:	4680      	mov	r8, r0
    58e6:	e766      	b.n	57b6 <Print::printFloat(double, unsigned char)+0x56>
    58e8:	682b      	ldr	r3, [r5, #0]
    58ea:	490a      	ldr	r1, [pc, #40]	; (5914 <Print::printFloat(double, unsigned char)+0x1b4>)
    58ec:	e75e      	b.n	57ac <Print::printFloat(double, unsigned char)+0x4c>
    58ee:	bf00      	nop
    58f0:	a0000000 	.word	0xa0000000
    58f4:	3fb99999 	.word	0x3fb99999
    58f8:	7fefffff 	.word	0x7fefffff
    58fc:	0000b748 	.word	0x0000b748
    5900:	41efffff 	.word	0x41efffff
    5904:	c1efffff 	.word	0xc1efffff
    5908:	3fe00000 	.word	0x3fe00000
    590c:	40240000 	.word	0x40240000
    5910:	0000b744 	.word	0x0000b744
    5914:	0000b740 	.word	0x0000b740

00005918 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    5918:	f7ff bc82 	b.w	5220 <usb_serial_flush_input>

0000591c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    591c:	f7ff bc5a 	b.w	51d4 <usb_serial_peekchar>

00005920 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    5920:	f7ff bc34 	b.w	518c <usb_serial_getchar>

00005924 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5924:	f7ff bc6e 	b.w	5204 <usb_serial_available>

00005928 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    5928:	f7ff bd4a 	b.w	53c0 <usb_serial_flush_output>

0000592c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    592c:	f7ff bd24 	b.w	5378 <usb_serial_write_buffer_free>

00005930 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5930:	4608      	mov	r0, r1
    5932:	4611      	mov	r1, r2
    5934:	f7ff bc90 	b.w	5258 <usb_serial_write>

00005938 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5938:	4608      	mov	r0, r1
    593a:	f7ff bd11 	b.w	5360 <usb_serial_putchar>
    593e:	bf00      	nop

00005940 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    5940:	4770      	bx	lr
    5942:	bf00      	nop

00005944 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    5944:	b510      	push	{r4, lr}
    5946:	4604      	mov	r4, r0
{
	free(buffer);
    5948:	6800      	ldr	r0, [r0, #0]
    594a:	f001 f9c5 	bl	6cd8 <free>
}
    594e:	4620      	mov	r0, r4
    5950:	bd10      	pop	{r4, pc}
    5952:	bf00      	nop

00005954 <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    5954:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    5956:	6843      	ldr	r3, [r0, #4]
    5958:	428b      	cmp	r3, r1
    595a:	d301      	bcc.n	5960 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    595c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    595e:	bd38      	pop	{r3, r4, r5, pc}
    5960:	460d      	mov	r5, r1
    5962:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5964:	3101      	adds	r1, #1
    5966:	6800      	ldr	r0, [r0, #0]
    5968:	f001 fd74 	bl	7454 <realloc>
	if (newbuffer) {
    596c:	2800      	cmp	r0, #0
    596e:	d0f6      	beq.n	595e <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    5970:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    5972:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    5976:	2b00      	cmp	r3, #0
    5978:	d1f0      	bne.n	595c <String::reserve(unsigned int)+0x8>
    597a:	7003      	strb	r3, [r0, #0]
    597c:	e7ee      	b.n	595c <String::reserve(unsigned int)+0x8>
    597e:	bf00      	nop

00005980 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    5980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5982:	4604      	mov	r4, r0
	if (length == 0) {
    5984:	4615      	mov	r5, r2
    5986:	b932      	cbnz	r2, 5996 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    5988:	6803      	ldr	r3, [r0, #0]
    598a:	b103      	cbz	r3, 598e <String::copy(char const*, unsigned int)+0xe>
    598c:	701a      	strb	r2, [r3, #0]
		len = 0;
    598e:	2300      	movs	r3, #0
    5990:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    5992:	4620      	mov	r0, r4
    5994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5996:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    5998:	4611      	mov	r1, r2
    599a:	f7ff ffdb 	bl	5954 <String::reserve(unsigned int)>
    599e:	4607      	mov	r7, r0
    59a0:	b948      	cbnz	r0, 59b6 <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    59a2:	6820      	ldr	r0, [r4, #0]
    59a4:	b110      	cbz	r0, 59ac <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    59a6:	f001 f997 	bl	6cd8 <free>
			buffer = NULL;
    59aa:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    59ac:	2300      	movs	r3, #0
    59ae:	6063      	str	r3, [r4, #4]
    59b0:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    59b2:	4620      	mov	r0, r4
    59b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    59b6:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    59b8:	4631      	mov	r1, r6
    59ba:	6820      	ldr	r0, [r4, #0]
    59bc:	f001 ffe2 	bl	7984 <strcpy>
	return *this;
    59c0:	e7e7      	b.n	5992 <String::copy(char const*, unsigned int)+0x12>
    59c2:	bf00      	nop

000059c4 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    59c4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    59c6:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    59c8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    59ca:	6003      	str	r3, [r0, #0]
	capacity = 0;
    59cc:	6043      	str	r3, [r0, #4]
	len = 0;
    59ce:	6083      	str	r3, [r0, #8]
	flags = 0;
    59d0:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    59d2:	b141      	cbz	r1, 59e6 <String::String(char const*)+0x22>
    59d4:	4608      	mov	r0, r1
    59d6:	460d      	mov	r5, r1
    59d8:	f002 f832 	bl	7a40 <strlen>
    59dc:	4629      	mov	r1, r5
    59de:	4602      	mov	r2, r0
    59e0:	4620      	mov	r0, r4
    59e2:	f7ff ffcd 	bl	5980 <String::copy(char const*, unsigned int)>
}
    59e6:	4620      	mov	r0, r4
    59e8:	bd38      	pop	{r3, r4, r5, pc}
    59ea:	bf00      	nop

000059ec <String::String(String const&)>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    59ec:	2300      	movs	r3, #0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    59ee:	4288      	cmp	r0, r1
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    59f0:	b510      	push	{r4, lr}
    59f2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    59f4:	6003      	str	r3, [r0, #0]
	capacity = 0;
    59f6:	6043      	str	r3, [r0, #4]
	len = 0;
    59f8:	6083      	str	r3, [r0, #8]
	flags = 0;
    59fa:	7303      	strb	r3, [r0, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    59fc:	d003      	beq.n	5a06 <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    59fe:	688a      	ldr	r2, [r1, #8]
    5a00:	6809      	ldr	r1, [r1, #0]
    5a02:	f7ff ffbd 	bl	5980 <String::copy(char const*, unsigned int)>

String::String(const String &value)
{
	init();
	*this = value;
}
    5a06:	4620      	mov	r0, r4
    5a08:	bd10      	pop	{r4, pc}
    5a0a:	bf00      	nop

00005a0c <String::operator=(String const&)>:
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    5a0c:	4281      	cmp	r1, r0
    5a0e:	d003      	beq.n	5a18 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    5a10:	688a      	ldr	r2, [r1, #8]
    5a12:	6809      	ldr	r1, [r1, #0]
    5a14:	f7ff bfb4 	b.w	5980 <String::copy(char const*, unsigned int)>
}
    5a18:	4770      	bx	lr
    5a1a:	bf00      	nop

00005a1c <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    5a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    5a20:	6803      	ldr	r3, [r0, #0]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    5a22:	460f      	mov	r7, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    5a24:	42bb      	cmp	r3, r7
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    5a26:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
    5a28:	6881      	ldr	r1, [r0, #8]
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    5a2a:	4615      	mov	r5, r2
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    5a2c:	d80a      	bhi.n	5a44 <String::append(char const*, unsigned int)+0x28>
    5a2e:	185a      	adds	r2, r3, r1
    5a30:	4297      	cmp	r7, r2
    5a32:	d207      	bcs.n	5a44 <String::append(char const*, unsigned int)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    5a34:	ebc3 0907 	rsb	r9, r3, r7
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    5a38:	f04f 0801 	mov.w	r8, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    5a3c:	b935      	cbnz	r5, 5a4c <String::append(char const*, unsigned int)+0x30>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    5a3e:	4620      	mov	r0, r4
    5a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    5a44:	f04f 0800 	mov.w	r8, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    5a48:	2d00      	cmp	r5, #0
    5a4a:	d0f8      	beq.n	5a3e <String::append(char const*, unsigned int)+0x22>
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    5a4c:	194e      	adds	r6, r1, r5
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    5a4e:	4631      	mov	r1, r6
    5a50:	4620      	mov	r0, r4
    5a52:	f7ff ff7f 	bl	5954 <String::reserve(unsigned int)>
    5a56:	2800      	cmp	r0, #0
    5a58:	d0f1      	beq.n	5a3e <String::append(char const*, unsigned int)+0x22>
	if ( self ) {
    5a5a:	f1b8 0f00 	cmp.w	r8, #0
    5a5e:	d00e      	beq.n	5a7e <String::append(char const*, unsigned int)+0x62>
		memcpy(buffer + len, buffer+buffer_offset, length);
    5a60:	6823      	ldr	r3, [r4, #0]
    5a62:	68a0      	ldr	r0, [r4, #8]
    5a64:	462a      	mov	r2, r5
    5a66:	eb03 0109 	add.w	r1, r3, r9
    5a6a:	4418      	add	r0, r3
    5a6c:	f000 f892 	bl	5b94 <memcpy>
		buffer[newlen] = 0;
    5a70:	6823      	ldr	r3, [r4, #0]
    5a72:	2200      	movs	r2, #0
    5a74:	559a      	strb	r2, [r3, r6]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    5a76:	60a6      	str	r6, [r4, #8]
	return *this;
}
    5a78:	4620      	mov	r0, r4
    5a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    5a7e:	6820      	ldr	r0, [r4, #0]
    5a80:	68a3      	ldr	r3, [r4, #8]
    5a82:	4639      	mov	r1, r7
    5a84:	4418      	add	r0, r3
    5a86:	f001 ff7d 	bl	7984 <strcpy>
    5a8a:	e7f4      	b.n	5a76 <String::append(char const*, unsigned int)+0x5a>

00005a8c <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    5a8c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    5a8e:	688a      	ldr	r2, [r1, #8]
    5a90:	6809      	ldr	r1, [r1, #0]
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    5a92:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    5a94:	f7ff ffc2 	bl	5a1c <String::append(char const*, unsigned int)>
	return a;
}
    5a98:	4620      	mov	r0, r4
    5a9a:	bd10      	pop	{r4, pc}

00005a9c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    5a9c:	b1b2      	cbz	r2, 5acc <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
    5a9e:	b1a9      	cbz	r1, 5acc <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    5aa0:	b538      	push	{r3, r4, r5, lr}
	if (!bufsize || !buf) return;
	if (index >= len) {
    5aa2:	6884      	ldr	r4, [r0, #8]
    5aa4:	429c      	cmp	r4, r3
    5aa6:	d90e      	bls.n	5ac6 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2a>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    5aa8:	1ae4      	subs	r4, r4, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    5aaa:	3a01      	subs	r2, #1
    5aac:	460d      	mov	r5, r1
    5aae:	4294      	cmp	r4, r2
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    5ab0:	6801      	ldr	r1, [r0, #0]
    5ab2:	bf28      	it	cs
    5ab4:	4614      	movcs	r4, r2
    5ab6:	4419      	add	r1, r3
    5ab8:	4622      	mov	r2, r4
    5aba:	4628      	mov	r0, r5
    5abc:	f002 f82e 	bl	7b1c <strncpy>
	buf[n] = 0;
    5ac0:	2300      	movs	r3, #0
    5ac2:	552b      	strb	r3, [r5, r4]
    5ac4:	bd38      	pop	{r3, r4, r5, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    5ac6:	2300      	movs	r3, #0
    5ac8:	700b      	strb	r3, [r1, #0]
		return;
    5aca:	bd38      	pop	{r3, r4, r5, pc}
    5acc:	4770      	bx	lr
    5ace:	bf00      	nop

00005ad0 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5ad0:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    5ad2:	4c2c      	ldr	r4, [pc, #176]	; (5b84 <yield+0xb4>)
    5ad4:	7823      	ldrb	r3, [r4, #0]
    5ad6:	b103      	cbz	r3, 5ada <yield+0xa>
    5ad8:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    5ada:	2301      	movs	r3, #1
    5adc:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5ade:	f7ff fb91 	bl	5204 <usb_serial_available>
	if (Serial.available()) serialEvent();
    5ae2:	2800      	cmp	r0, #0
    5ae4:	d142      	bne.n	5b6c <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    5ae6:	f000 f985 	bl	5df4 <serial_available>
	if (Serial1.available()) serialEvent1();
    5aea:	2800      	cmp	r0, #0
    5aec:	d13b      	bne.n	5b66 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    5aee:	f000 fa17 	bl	5f20 <serial2_available>
	if (Serial2.available()) serialEvent2();
    5af2:	2800      	cmp	r0, #0
    5af4:	d134      	bne.n	5b60 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    5af6:	f7fe fac7 	bl	4088 <serial3_available>
	if (Serial3.available()) serialEvent3();
    5afa:	bb70      	cbnz	r0, 5b5a <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    5afc:	f000 faa6 	bl	604c <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    5b00:	bb40      	cbnz	r0, 5b54 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    5b02:	f7fe fb8b 	bl	421c <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    5b06:	bb10      	cbnz	r0, 5b4e <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    5b08:	f000 fb1c 	bl	6144 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    5b0c:	b9e0      	cbnz	r0, 5b48 <yield+0x78>
#endif
	running = 0;
    5b0e:	2300      	movs	r3, #0
    5b10:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5b12:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    5b16:	2b00      	cmp	r3, #0
    5b18:	d1de      	bne.n	5ad8 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5b1a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    5b1e:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    5b20:	4b19      	ldr	r3, [pc, #100]	; (5b88 <yield+0xb8>)
    5b22:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    5b24:	b328      	cbz	r0, 5b72 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    5b26:	4c19      	ldr	r4, [pc, #100]	; (5b8c <yield+0xbc>)
    5b28:	7822      	ldrb	r2, [r4, #0]
    5b2a:	bb12      	cbnz	r2, 5b72 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    5b2c:	6945      	ldr	r5, [r0, #20]
    5b2e:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    5b30:	2301      	movs	r3, #1
    5b32:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    5b34:	b30d      	cbz	r5, 5b7a <yield+0xaa>
			firstYield->_prev = nullptr;
    5b36:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5b38:	b901      	cbnz	r1, 5b3c <yield+0x6c>
    5b3a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    5b3c:	2500      	movs	r5, #0
    5b3e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    5b40:	6883      	ldr	r3, [r0, #8]
    5b42:	4798      	blx	r3
		runningFromYield = false;
    5b44:	7025      	strb	r5, [r4, #0]
    5b46:	e7c7      	b.n	5ad8 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    5b48:	f000 fbca 	bl	62e0 <serialEvent6()>
    5b4c:	e7df      	b.n	5b0e <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    5b4e:	f000 fbc5 	bl	62dc <serialEvent5()>
    5b52:	e7d9      	b.n	5b08 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    5b54:	f000 fbc0 	bl	62d8 <serialEvent4()>
    5b58:	e7d3      	b.n	5b02 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    5b5a:	f000 fbbb 	bl	62d4 <serialEvent3()>
    5b5e:	e7cd      	b.n	5afc <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    5b60:	f000 fbb6 	bl	62d0 <serialEvent2()>
    5b64:	e7c7      	b.n	5af6 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    5b66:	f000 fbb1 	bl	62cc <serialEvent1()>
    5b6a:	e7c0      	b.n	5aee <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    5b6c:	f7ff fee8 	bl	5940 <serialEvent()>
    5b70:	e7b9      	b.n	5ae6 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5b72:	2900      	cmp	r1, #0
    5b74:	d1b0      	bne.n	5ad8 <yield+0x8>
    5b76:	b662      	cpsie	i
    5b78:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    5b7a:	4b05      	ldr	r3, [pc, #20]	; (5b90 <yield+0xc0>)
    5b7c:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5b7e:	2900      	cmp	r1, #0
    5b80:	d1dc      	bne.n	5b3c <yield+0x6c>
    5b82:	e7da      	b.n	5b3a <yield+0x6a>
    5b84:	1fff1824 	.word	0x1fff1824
    5b88:	1fff1818 	.word	0x1fff1818
    5b8c:	1fff181c 	.word	0x1fff181c
    5b90:	1fff1814 	.word	0x1fff1814

00005b94 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    5b94:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    5b96:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    5b9a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    5b9e:	d16d      	bne.n	5c7c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    5ba0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    5ba2:	d341      	bcc.n	5c28 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    5ba4:	f851 3b04 	ldr.w	r3, [r1], #4
    5ba8:	f840 3b04 	str.w	r3, [r0], #4
    5bac:	f851 3b04 	ldr.w	r3, [r1], #4
    5bb0:	f840 3b04 	str.w	r3, [r0], #4
    5bb4:	f851 3b04 	ldr.w	r3, [r1], #4
    5bb8:	f840 3b04 	str.w	r3, [r0], #4
    5bbc:	f851 3b04 	ldr.w	r3, [r1], #4
    5bc0:	f840 3b04 	str.w	r3, [r0], #4
    5bc4:	f851 3b04 	ldr.w	r3, [r1], #4
    5bc8:	f840 3b04 	str.w	r3, [r0], #4
    5bcc:	f851 3b04 	ldr.w	r3, [r1], #4
    5bd0:	f840 3b04 	str.w	r3, [r0], #4
    5bd4:	f851 3b04 	ldr.w	r3, [r1], #4
    5bd8:	f840 3b04 	str.w	r3, [r0], #4
    5bdc:	f851 3b04 	ldr.w	r3, [r1], #4
    5be0:	f840 3b04 	str.w	r3, [r0], #4
    5be4:	f851 3b04 	ldr.w	r3, [r1], #4
    5be8:	f840 3b04 	str.w	r3, [r0], #4
    5bec:	f851 3b04 	ldr.w	r3, [r1], #4
    5bf0:	f840 3b04 	str.w	r3, [r0], #4
    5bf4:	f851 3b04 	ldr.w	r3, [r1], #4
    5bf8:	f840 3b04 	str.w	r3, [r0], #4
    5bfc:	f851 3b04 	ldr.w	r3, [r1], #4
    5c00:	f840 3b04 	str.w	r3, [r0], #4
    5c04:	f851 3b04 	ldr.w	r3, [r1], #4
    5c08:	f840 3b04 	str.w	r3, [r0], #4
    5c0c:	f851 3b04 	ldr.w	r3, [r1], #4
    5c10:	f840 3b04 	str.w	r3, [r0], #4
    5c14:	f851 3b04 	ldr.w	r3, [r1], #4
    5c18:	f840 3b04 	str.w	r3, [r0], #4
    5c1c:	f851 3b04 	ldr.w	r3, [r1], #4
    5c20:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    5c24:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    5c26:	d2bd      	bcs.n	5ba4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    5c28:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    5c2a:	d311      	bcc.n	5c50 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    5c2c:	f851 3b04 	ldr.w	r3, [r1], #4
    5c30:	f840 3b04 	str.w	r3, [r0], #4
    5c34:	f851 3b04 	ldr.w	r3, [r1], #4
    5c38:	f840 3b04 	str.w	r3, [r0], #4
    5c3c:	f851 3b04 	ldr.w	r3, [r1], #4
    5c40:	f840 3b04 	str.w	r3, [r0], #4
    5c44:	f851 3b04 	ldr.w	r3, [r1], #4
    5c48:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    5c4c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    5c4e:	d2ed      	bcs.n	5c2c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    5c50:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    5c52:	d305      	bcc.n	5c60 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    5c54:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    5c58:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    5c5c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    5c5e:	d2f9      	bcs.n	5c54 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    5c60:	3204      	adds	r2, #4
	beq	.Ldone
    5c62:	d008      	beq.n	5c76 <memcpy+0xe2>

	lsls	r2, r2, #31
    5c64:	07d2      	lsls	r2, r2, #31
	itt ne
    5c66:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    5c68:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    5c6c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    5c70:	d301      	bcc.n	5c76 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    5c72:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    5c74:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    5c76:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    5c78:	4770      	bx	lr
    5c7a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    5c7c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    5c7e:	d313      	bcc.n	5ca8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    5c80:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    5c82:	d08d      	beq.n	5ba0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    5c84:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    5c88:	d08a      	beq.n	5ba0 <memcpy+0xc>

	rsb	r3, #4
    5c8a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    5c8e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    5c90:	07db      	lsls	r3, r3, #31
	itt ne
    5c92:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    5c94:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    5c98:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    5c9c:	d380      	bcc.n	5ba0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    5c9e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    5ca2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    5ca6:	e77b      	b.n	5ba0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    5ca8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    5caa:	d3d9      	bcc.n	5c60 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    5cac:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    5cae:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    5cb2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    5cb6:	d2f9      	bcs.n	5cac <memcpy+0x118>

	ldrb	r3, [r1]
    5cb8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    5cba:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    5cbc:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    5cbe:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    5cc0:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    5cc2:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    5cc4:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    5cc6:	4770      	bx	lr

00005cc8 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    5cc8:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5cca:	4829      	ldr	r0, [pc, #164]	; (5d70 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5ccc:	4a29      	ldr	r2, [pc, #164]	; (5d74 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    5cce:	4b2a      	ldr	r3, [pc, #168]	; (5d78 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5cd0:	4d2a      	ldr	r5, [pc, #168]	; (5d7c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5cd2:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5cd4:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    5cd6:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    5cd8:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    5cda:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5cdc:	4c28      	ldr	r4, [pc, #160]	; (5d80 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    5cde:	2b08      	cmp	r3, #8
    5ce0:	d030      	beq.n	5d44 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    5ce2:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5ce4:	4827      	ldr	r0, [pc, #156]	; (5d84 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5ce6:	4928      	ldr	r1, [pc, #160]	; (5d88 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    5ce8:	d037      	beq.n	5d5a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    5cea:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    5cec:	bf0c      	ite	eq
    5cee:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    5cf0:	225d      	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    5cf2:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    5cf4:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    5cf6:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    5cf8:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    5cfa:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    5cfc:	4b23      	ldr	r3, [pc, #140]	; (5d8c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5cfe:	4924      	ldr	r1, [pc, #144]	; (5d90 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    5d00:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5d02:	4a24      	ldr	r2, [pc, #144]	; (5d94 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    5d04:	b1bb      	cbz	r3, 5d36 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5d06:	2301      	movs	r3, #1
    5d08:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    5d0a:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    5d0c:	4b22      	ldr	r3, [pc, #136]	; (5d98 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    5d0e:	4923      	ldr	r1, [pc, #140]	; (5d9c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    5d10:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    5d12:	4a23      	ldr	r2, [pc, #140]	; (5da0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    5d14:	2b01      	cmp	r3, #1
    5d16:	d926      	bls.n	5d66 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    5d18:	2b04      	cmp	r3, #4
    5d1a:	d90f      	bls.n	5d3c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    5d1c:	2b08      	cmp	r3, #8
    5d1e:	d91e      	bls.n	5d5e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    5d20:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    5d22:	bf94      	ite	ls
    5d24:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    5d26:	2387      	movhi	r3, #135	; 0x87
    5d28:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    5d2a:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    5d2c:	4b1d      	ldr	r3, [pc, #116]	; (5da4 <analog_init+0xdc>)
    5d2e:	2201      	movs	r2, #1
    5d30:	701a      	strb	r2, [r3, #0]
}
    5d32:	bc30      	pop	{r4, r5}
    5d34:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    5d36:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    5d38:	6013      	str	r3, [r2, #0]
    5d3a:	e7e7      	b.n	5d0c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    5d3c:	2384      	movs	r3, #132	; 0x84
    5d3e:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    5d40:	6013      	str	r3, [r2, #0]
    5d42:	e7f3      	b.n	5d2c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5d44:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5d48:	490f      	ldr	r1, [pc, #60]	; (5d88 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5d4a:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    5d4c:	2221      	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5d4e:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5d50:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5d52:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5d54:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    5d56:	600b      	str	r3, [r1, #0]
    5d58:	e7d0      	b.n	5cfc <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    5d5a:	2239      	movs	r2, #57	; 0x39
    5d5c:	e7f7      	b.n	5d4e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    5d5e:	2385      	movs	r3, #133	; 0x85
    5d60:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    5d62:	6013      	str	r3, [r2, #0]
    5d64:	e7e2      	b.n	5d2c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    5d66:	2380      	movs	r3, #128	; 0x80
    5d68:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    5d6a:	6013      	str	r3, [r2, #0]
    5d6c:	e7de      	b.n	5d2c <analog_init+0x64>
    5d6e:	bf00      	nop
    5d70:	40074000 	.word	0x40074000
    5d74:	40074001 	.word	0x40074001
    5d78:	1fff0794 	.word	0x1fff0794
    5d7c:	4003b008 	.word	0x4003b008
    5d80:	4003b00c 	.word	0x4003b00c
    5d84:	400bb008 	.word	0x400bb008
    5d88:	400bb00c 	.word	0x400bb00c
    5d8c:	1fff1826 	.word	0x1fff1826
    5d90:	4003b020 	.word	0x4003b020
    5d94:	400bb020 	.word	0x400bb020
    5d98:	1fff0795 	.word	0x1fff0795
    5d9c:	4003b024 	.word	0x4003b024
    5da0:	400bb024 	.word	0x400bb024
    5da4:	1fff1825 	.word	0x1fff1825

00005da8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    5da8:	b4f0      	push	{r4, r5, r6, r7}
    5daa:	1e4d      	subs	r5, r1, #1
    5dac:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    5dae:	2400      	movs	r4, #0
    5db0:	e000      	b.n	5db4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    5db2:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    5db4:	fbb0 f3f2 	udiv	r3, r0, r2
    5db8:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5dbc:	2809      	cmp	r0, #9
    5dbe:	f100 0730 	add.w	r7, r0, #48	; 0x30
    5dc2:	bf8a      	itet	hi
    5dc4:	3037      	addhi	r0, #55	; 0x37
    5dc6:	b2f8      	uxtbls	r0, r7
    5dc8:	b2c0      	uxtbhi	r0, r0
    5dca:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    5dce:	4618      	mov	r0, r3
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	d1ee      	bne.n	5db2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    5dd4:	190a      	adds	r2, r1, r4
    5dd6:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    5dd8:	b14c      	cbz	r4, 5dee <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    5dda:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    5ddc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    5de0:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5de2:	3301      	adds	r3, #1
    5de4:	1ae0      	subs	r0, r4, r3
    5de6:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    5de8:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5dec:	dbf5      	blt.n	5dda <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    5dee:	4608      	mov	r0, r1
    5df0:	bcf0      	pop	{r4, r5, r6, r7}
    5df2:	4770      	bx	lr

00005df4 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5df4:	4a05      	ldr	r2, [pc, #20]	; (5e0c <serial_available+0x18>)
	tail = rx_buffer_tail;
    5df6:	4b06      	ldr	r3, [pc, #24]	; (5e10 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5df8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    5dfa:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5dfc:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    5dfe:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    5e00:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    5e02:	bf38      	it	cc
    5e04:	3040      	addcc	r0, #64	; 0x40
    5e06:	1ac0      	subs	r0, r0, r3
}
    5e08:	4770      	bx	lr
    5e0a:	bf00      	nop
    5e0c:	1fff182c 	.word	0x1fff182c
    5e10:	1fff182d 	.word	0x1fff182d

00005e14 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    5e14:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    5e16:	4b38      	ldr	r3, [pc, #224]	; (5ef8 <uart0_status_isr+0xe4>)
    5e18:	791a      	ldrb	r2, [r3, #4]
    5e1a:	f012 0f30 	tst.w	r2, #48	; 0x30
    5e1e:	d02c      	beq.n	5e7a <uart0_status_isr+0x66>
		__disable_irq();
    5e20:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    5e22:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    5e24:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    5e28:	2900      	cmp	r1, #0
    5e2a:	d03d      	beq.n	5ea8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    5e2c:	b662      	cpsie	i
			head = rx_buffer_head;
    5e2e:	4f33      	ldr	r7, [pc, #204]	; (5efc <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    5e30:	4933      	ldr	r1, [pc, #204]	; (5f00 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5e32:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    5e34:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5e36:	4e33      	ldr	r6, [pc, #204]	; (5f04 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    5e38:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5e3a:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    5e3c:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    5e3e:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    5e40:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    5e42:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    5e44:	bf28      	it	cs
    5e46:	2300      	movcs	r3, #0
				if (newhead != tail) {
    5e48:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    5e4a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    5e4e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5e50:	bf1c      	itt	ne
    5e52:	54f1      	strbne	r1, [r6, r3]
    5e54:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    5e56:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    5e5a:	d1f0      	bne.n	5e3e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    5e5c:	4b2a      	ldr	r3, [pc, #168]	; (5f08 <uart0_status_isr+0xf4>)
    5e5e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    5e60:	b2c2      	uxtb	r2, r0
    5e62:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    5e64:	b14b      	cbz	r3, 5e7a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    5e66:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    5e68:	bf36      	itet	cc
    5e6a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    5e6e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    5e70:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    5e72:	2827      	cmp	r0, #39	; 0x27
    5e74:	bfc4      	itt	gt
    5e76:	2201      	movgt	r2, #1
    5e78:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    5e7a:	491f      	ldr	r1, [pc, #124]	; (5ef8 <uart0_status_isr+0xe4>)
    5e7c:	78ca      	ldrb	r2, [r1, #3]
    5e7e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    5e80:	0615      	lsls	r5, r2, #24
    5e82:	d416      	bmi.n	5eb2 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    5e84:	0652      	lsls	r2, r2, #25
    5e86:	d50d      	bpl.n	5ea4 <uart0_status_isr+0x90>
    5e88:	4b1b      	ldr	r3, [pc, #108]	; (5ef8 <uart0_status_isr+0xe4>)
    5e8a:	791b      	ldrb	r3, [r3, #4]
    5e8c:	065b      	lsls	r3, r3, #25
    5e8e:	d509      	bpl.n	5ea4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5e90:	4b1e      	ldr	r3, [pc, #120]	; (5f0c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    5e92:	491f      	ldr	r1, [pc, #124]	; (5f10 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    5e94:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    5e96:	2200      	movs	r2, #0
    5e98:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    5e9a:	b103      	cbz	r3, 5e9e <uart0_status_isr+0x8a>
    5e9c:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    5e9e:	4b16      	ldr	r3, [pc, #88]	; (5ef8 <uart0_status_isr+0xe4>)
    5ea0:	223c      	movs	r2, #60	; 0x3c
    5ea2:	70da      	strb	r2, [r3, #3]
	}
}
    5ea4:	bcf0      	pop	{r4, r5, r6, r7}
    5ea6:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    5ea8:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    5eaa:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    5eac:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    5eae:	b662      	cpsie	i
    5eb0:	e7e3      	b.n	5e7a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    5eb2:	790b      	ldrb	r3, [r1, #4]
    5eb4:	061c      	lsls	r4, r3, #24
    5eb6:	d5e5      	bpl.n	5e84 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    5eb8:	4b16      	ldr	r3, [pc, #88]	; (5f14 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    5eba:	4e17      	ldr	r6, [pc, #92]	; (5f18 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5ebc:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    5ebe:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5ec0:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    5ec2:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    5ec4:	429c      	cmp	r4, r3
    5ec6:	d00e      	beq.n	5ee6 <uart0_status_isr+0xd2>
    5ec8:	4d14      	ldr	r5, [pc, #80]	; (5f1c <uart0_status_isr+0x108>)
    5eca:	e001      	b.n	5ed0 <uart0_status_isr+0xbc>
    5ecc:	42a3      	cmp	r3, r4
    5ece:	d00a      	beq.n	5ee6 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    5ed0:	3301      	adds	r3, #1
    5ed2:	2b40      	cmp	r3, #64	; 0x40
    5ed4:	bf28      	it	cs
    5ed6:	2300      	movcs	r3, #0
			avail = UART0_S1;
    5ed8:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    5eda:	5ce8      	ldrb	r0, [r5, r3]
    5edc:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    5ede:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    5ee0:	7d08      	ldrb	r0, [r1, #20]
    5ee2:	2807      	cmp	r0, #7
    5ee4:	d9f2      	bls.n	5ecc <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    5ee6:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    5ee8:	4903      	ldr	r1, [pc, #12]	; (5ef8 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    5eea:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    5eec:	790b      	ldrb	r3, [r1, #4]
    5eee:	0618      	lsls	r0, r3, #24
    5ef0:	bf44      	itt	mi
    5ef2:	237c      	movmi	r3, #124	; 0x7c
    5ef4:	70cb      	strbmi	r3, [r1, #3]
    5ef6:	e7c5      	b.n	5e84 <uart0_status_isr+0x70>
    5ef8:	4006a000 	.word	0x4006a000
    5efc:	1fff182c 	.word	0x1fff182c
    5f00:	1fff182d 	.word	0x1fff182d
    5f04:	1fff1870 	.word	0x1fff1870
    5f08:	1fff1828 	.word	0x1fff1828
    5f0c:	1fff18b4 	.word	0x1fff18b4
    5f10:	1fff18b0 	.word	0x1fff18b0
    5f14:	1fff18b8 	.word	0x1fff18b8
    5f18:	1fff18b1 	.word	0x1fff18b1
    5f1c:	1fff1830 	.word	0x1fff1830

00005f20 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5f20:	4a05      	ldr	r2, [pc, #20]	; (5f38 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    5f22:	4b06      	ldr	r3, [pc, #24]	; (5f3c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5f24:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    5f26:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5f28:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    5f2a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    5f2c:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    5f2e:	bf38      	it	cc
    5f30:	3040      	addcc	r0, #64	; 0x40
    5f32:	1ac0      	subs	r0, r0, r3
}
    5f34:	4770      	bx	lr
    5f36:	bf00      	nop
    5f38:	1fff192c 	.word	0x1fff192c
    5f3c:	1fff18c1 	.word	0x1fff18c1

00005f40 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    5f40:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    5f42:	4b38      	ldr	r3, [pc, #224]	; (6024 <uart1_status_isr+0xe4>)
    5f44:	791a      	ldrb	r2, [r3, #4]
    5f46:	f012 0f30 	tst.w	r2, #48	; 0x30
    5f4a:	d02c      	beq.n	5fa6 <uart1_status_isr+0x66>
		__disable_irq();
    5f4c:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    5f4e:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    5f50:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    5f54:	2900      	cmp	r1, #0
    5f56:	d03d      	beq.n	5fd4 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    5f58:	b662      	cpsie	i
			head = rx_buffer_head;
    5f5a:	4f33      	ldr	r7, [pc, #204]	; (6028 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    5f5c:	4933      	ldr	r1, [pc, #204]	; (602c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5f5e:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    5f60:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5f62:	4e33      	ldr	r6, [pc, #204]	; (6030 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    5f64:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5f66:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    5f68:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    5f6a:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    5f6c:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    5f6e:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    5f70:	bf28      	it	cs
    5f72:	2300      	movcs	r3, #0
				if (newhead != tail) {
    5f74:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    5f76:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    5f7a:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5f7c:	bf1c      	itt	ne
    5f7e:	54f1      	strbne	r1, [r6, r3]
    5f80:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    5f82:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    5f86:	d1f0      	bne.n	5f6a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    5f88:	4b2a      	ldr	r3, [pc, #168]	; (6034 <uart1_status_isr+0xf4>)
    5f8a:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    5f8c:	b2c2      	uxtb	r2, r0
    5f8e:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    5f90:	b14b      	cbz	r3, 5fa6 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    5f92:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    5f94:	bf36      	itet	cc
    5f96:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    5f9a:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    5f9c:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    5f9e:	2827      	cmp	r0, #39	; 0x27
    5fa0:	bfc4      	itt	gt
    5fa2:	2201      	movgt	r2, #1
    5fa4:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    5fa6:	491f      	ldr	r1, [pc, #124]	; (6024 <uart1_status_isr+0xe4>)
    5fa8:	78ca      	ldrb	r2, [r1, #3]
    5faa:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    5fac:	0615      	lsls	r5, r2, #24
    5fae:	d416      	bmi.n	5fde <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    5fb0:	0652      	lsls	r2, r2, #25
    5fb2:	d50d      	bpl.n	5fd0 <uart1_status_isr+0x90>
    5fb4:	4b1b      	ldr	r3, [pc, #108]	; (6024 <uart1_status_isr+0xe4>)
    5fb6:	791b      	ldrb	r3, [r3, #4]
    5fb8:	065b      	lsls	r3, r3, #25
    5fba:	d509      	bpl.n	5fd0 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5fbc:	4b1e      	ldr	r3, [pc, #120]	; (6038 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    5fbe:	491f      	ldr	r1, [pc, #124]	; (603c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    5fc0:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    5fc2:	2200      	movs	r2, #0
    5fc4:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    5fc6:	b103      	cbz	r3, 5fca <uart1_status_isr+0x8a>
    5fc8:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    5fca:	4b16      	ldr	r3, [pc, #88]	; (6024 <uart1_status_isr+0xe4>)
    5fcc:	223c      	movs	r2, #60	; 0x3c
    5fce:	70da      	strb	r2, [r3, #3]
	}
}
    5fd0:	bcf0      	pop	{r4, r5, r6, r7}
    5fd2:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    5fd4:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    5fd6:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    5fd8:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    5fda:	b662      	cpsie	i
    5fdc:	e7e3      	b.n	5fa6 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    5fde:	790b      	ldrb	r3, [r1, #4]
    5fe0:	061c      	lsls	r4, r3, #24
    5fe2:	d5e5      	bpl.n	5fb0 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    5fe4:	4b16      	ldr	r3, [pc, #88]	; (6040 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    5fe6:	4e17      	ldr	r6, [pc, #92]	; (6044 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5fe8:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    5fea:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5fec:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    5fee:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    5ff0:	429c      	cmp	r4, r3
    5ff2:	d00e      	beq.n	6012 <uart1_status_isr+0xd2>
    5ff4:	4d14      	ldr	r5, [pc, #80]	; (6048 <uart1_status_isr+0x108>)
    5ff6:	e001      	b.n	5ffc <uart1_status_isr+0xbc>
    5ff8:	42a3      	cmp	r3, r4
    5ffa:	d00a      	beq.n	6012 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    5ffc:	3301      	adds	r3, #1
    5ffe:	2b28      	cmp	r3, #40	; 0x28
    6000:	bf28      	it	cs
    6002:	2300      	movcs	r3, #0
			avail = UART1_S1;
    6004:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    6006:	5ce8      	ldrb	r0, [r5, r3]
    6008:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    600a:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    600c:	7d08      	ldrb	r0, [r1, #20]
    600e:	2807      	cmp	r0, #7
    6010:	d9f2      	bls.n	5ff8 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    6012:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    6014:	4903      	ldr	r1, [pc, #12]	; (6024 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    6016:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    6018:	790b      	ldrb	r3, [r1, #4]
    601a:	0618      	lsls	r0, r3, #24
    601c:	bf44      	itt	mi
    601e:	237c      	movmi	r3, #124	; 0x7c
    6020:	70cb      	strbmi	r3, [r1, #3]
    6022:	e7c5      	b.n	5fb0 <uart1_status_isr+0x70>
    6024:	4006b000 	.word	0x4006b000
    6028:	1fff192c 	.word	0x1fff192c
    602c:	1fff18c1 	.word	0x1fff18c1
    6030:	1fff18ec 	.word	0x1fff18ec
    6034:	1fff18bc 	.word	0x1fff18bc
    6038:	1fff1930 	.word	0x1fff1930
    603c:	1fff18c0 	.word	0x1fff18c0
    6040:	1fff1934 	.word	0x1fff1934
    6044:	1fff192d 	.word	0x1fff192d
    6048:	1fff18c4 	.word	0x1fff18c4

0000604c <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    604c:	4a05      	ldr	r2, [pc, #20]	; (6064 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    604e:	4b06      	ldr	r3, [pc, #24]	; (6068 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6050:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    6052:	781b      	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6054:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    6056:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    6058:	4298      	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    605a:	bf38      	it	cc
    605c:	3040      	addcc	r0, #64	; 0x40
    605e:	1ac0      	subs	r0, r0, r3
}
    6060:	4770      	bx	lr
    6062:	bf00      	nop
    6064:	1fff193c 	.word	0x1fff193c
    6068:	1fff193d 	.word	0x1fff193d

0000606c <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    606c:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    606e:	4b2b      	ldr	r3, [pc, #172]	; (611c <uart3_status_isr+0xb0>)
    6070:	791a      	ldrb	r2, [r3, #4]
    6072:	0694      	lsls	r4, r2, #26
    6074:	d51f      	bpl.n	60b6 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    6076:	482a      	ldr	r0, [pc, #168]	; (6120 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    6078:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    607a:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    607c:	4929      	ldr	r1, [pc, #164]	; (6124 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    607e:	3301      	adds	r3, #1
    6080:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6082:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    6084:	bfc8      	it	gt
    6086:	2300      	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6088:	428b      	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    608a:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    608c:	d003      	beq.n	6096 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    608e:	4c26      	ldr	r4, [pc, #152]	; (6128 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    6090:	b2d9      	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    6092:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    6094:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    6096:	4a25      	ldr	r2, [pc, #148]	; (612c <uart3_status_isr+0xc0>)
    6098:	6811      	ldr	r1, [r2, #0]
    609a:	b161      	cbz	r1, 60b6 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    609c:	4a24      	ldr	r2, [pc, #144]	; (6130 <uart3_status_isr+0xc4>)
    609e:	7812      	ldrb	r2, [r2, #0]
    60a0:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    60a2:	4293      	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    60a4:	bf36      	itet	cc
    60a6:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    60aa:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    60ac:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    60ae:	2b27      	cmp	r3, #39	; 0x27
    60b0:	bfc4      	itt	gt
    60b2:	2301      	movgt	r3, #1
    60b4:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    60b6:	4a19      	ldr	r2, [pc, #100]	; (611c <uart3_status_isr+0xb0>)
    60b8:	78d3      	ldrb	r3, [r2, #3]
    60ba:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    60bc:	0618      	lsls	r0, r3, #24
    60be:	d411      	bmi.n	60e4 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    60c0:	065a      	lsls	r2, r3, #25
    60c2:	d50d      	bpl.n	60e0 <uart3_status_isr+0x74>
    60c4:	4b15      	ldr	r3, [pc, #84]	; (611c <uart3_status_isr+0xb0>)
    60c6:	791b      	ldrb	r3, [r3, #4]
    60c8:	065b      	lsls	r3, r3, #25
    60ca:	d509      	bpl.n	60e0 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    60cc:	4b19      	ldr	r3, [pc, #100]	; (6134 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    60ce:	491a      	ldr	r1, [pc, #104]	; (6138 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    60d0:	681b      	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    60d2:	2200      	movs	r2, #0
    60d4:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    60d6:	b103      	cbz	r3, 60da <uart3_status_isr+0x6e>
    60d8:	701a      	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    60da:	4b10      	ldr	r3, [pc, #64]	; (611c <uart3_status_isr+0xb0>)
    60dc:	222c      	movs	r2, #44	; 0x2c
    60de:	70da      	strb	r2, [r3, #3]
	}
}
    60e0:	bc30      	pop	{r4, r5}
    60e2:	4770      	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    60e4:	7911      	ldrb	r1, [r2, #4]
    60e6:	0609      	lsls	r1, r1, #24
    60e8:	d5ea      	bpl.n	60c0 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    60ea:	4914      	ldr	r1, [pc, #80]	; (613c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    60ec:	4810      	ldr	r0, [pc, #64]	; (6130 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    60ee:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    60f0:	7801      	ldrb	r1, [r0, #0]
    60f2:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    60f4:	428c      	cmp	r4, r1
    60f6:	d00d      	beq.n	6114 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    60f8:	1c4a      	adds	r2, r1, #1
    60fa:	2a27      	cmp	r2, #39	; 0x27
    60fc:	bf84      	itt	hi
    60fe:	2100      	movhi	r1, #0
    6100:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    6102:	4d0f      	ldr	r5, [pc, #60]	; (6140 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    6104:	4c05      	ldr	r4, [pc, #20]	; (611c <uart3_status_isr+0xb0>)
    6106:	bf98      	it	ls
    6108:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    610a:	5caa      	ldrb	r2, [r5, r2]
    610c:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    610e:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    6110:	7001      	strb	r1, [r0, #0]
    6112:	e7d5      	b.n	60c0 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    6114:	216c      	movs	r1, #108	; 0x6c
    6116:	70d1      	strb	r1, [r2, #3]
    6118:	e7d2      	b.n	60c0 <uart3_status_isr+0x54>
    611a:	bf00      	nop
    611c:	4006d000 	.word	0x4006d000
    6120:	1fff193c 	.word	0x1fff193c
    6124:	1fff193d 	.word	0x1fff193d
    6128:	1fff1968 	.word	0x1fff1968
    612c:	1fff1938 	.word	0x1fff1938
    6130:	1fff19a9 	.word	0x1fff19a9
    6134:	1fff19ac 	.word	0x1fff19ac
    6138:	1fff19a8 	.word	0x1fff19a8
    613c:	1fff19b0 	.word	0x1fff19b0
    6140:	1fff1940 	.word	0x1fff1940

00006144 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6144:	4a05      	ldr	r2, [pc, #20]	; (615c <serial6_available+0x18>)
	tail = rx_buffer_tail;
    6146:	4b06      	ldr	r3, [pc, #24]	; (6160 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6148:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    614a:	781b      	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    614c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    614e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    6150:	4298      	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    6152:	bf38      	it	cc
    6154:	3040      	addcc	r0, #64	; 0x40
    6156:	1ac0      	subs	r0, r0, r3
}
    6158:	4770      	bx	lr
    615a:	bf00      	nop
    615c:	1fff19b8 	.word	0x1fff19b8
    6160:	1fff19b9 	.word	0x1fff19b9

00006164 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    6164:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    6166:	4b2c      	ldr	r3, [pc, #176]	; (6218 <lpuart0_status_isr+0xb4>)
    6168:	685a      	ldr	r2, [r3, #4]
    616a:	0294      	lsls	r4, r2, #10
    616c:	d51f      	bpl.n	61ae <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    616e:	482b      	ldr	r0, [pc, #172]	; (621c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    6170:	68da      	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    6172:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6174:	492a      	ldr	r1, [pc, #168]	; (6220 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    6176:	3301      	adds	r3, #1
    6178:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    617a:	7809      	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    617c:	bfc8      	it	gt
    617e:	2300      	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6180:	428b      	cmp	r3, r1
    6182:	d004      	beq.n	618e <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    6184:	4c27      	ldr	r4, [pc, #156]	; (6224 <lpuart0_status_isr+0xc0>)
    6186:	b2d2      	uxtb	r2, r2
			rx_buffer_head = head;
    6188:	b2d9      	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    618a:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    618c:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    618e:	4a26      	ldr	r2, [pc, #152]	; (6228 <lpuart0_status_isr+0xc4>)
    6190:	6811      	ldr	r1, [r2, #0]
    6192:	b161      	cbz	r1, 61ae <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    6194:	4a25      	ldr	r2, [pc, #148]	; (622c <lpuart0_status_isr+0xc8>)
    6196:	7812      	ldrb	r2, [r2, #0]
    6198:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    619a:	4293      	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    619c:	bf36      	itet	cc
    619e:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    61a2:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    61a4:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    61a6:	2b27      	cmp	r3, #39	; 0x27
    61a8:	bfc4      	itt	gt
    61aa:	2301      	movgt	r3, #1
    61ac:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    61ae:	4a1a      	ldr	r2, [pc, #104]	; (6218 <lpuart0_status_isr+0xb4>)
    61b0:	6893      	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    61b2:	0218      	lsls	r0, r3, #8
    61b4:	d502      	bpl.n	61bc <lpuart0_status_isr+0x58>
    61b6:	6852      	ldr	r2, [r2, #4]
    61b8:	0211      	lsls	r1, r2, #8
    61ba:	d411      	bmi.n	61e0 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    61bc:	025a      	lsls	r2, r3, #9
    61be:	d50d      	bpl.n	61dc <lpuart0_status_isr+0x78>
    61c0:	4b15      	ldr	r3, [pc, #84]	; (6218 <lpuart0_status_isr+0xb4>)
    61c2:	685b      	ldr	r3, [r3, #4]
    61c4:	025b      	lsls	r3, r3, #9
    61c6:	d509      	bpl.n	61dc <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    61c8:	4b19      	ldr	r3, [pc, #100]	; (6230 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    61ca:	491a      	ldr	r1, [pc, #104]	; (6234 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    61cc:	681b      	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    61ce:	2200      	movs	r2, #0
    61d0:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    61d2:	b103      	cbz	r3, 61d6 <lpuart0_status_isr+0x72>
    61d4:	701a      	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    61d6:	4b18      	ldr	r3, [pc, #96]	; (6238 <lpuart0_status_isr+0xd4>)
    61d8:	2200      	movs	r2, #0
    61da:	601a      	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    61dc:	bc30      	pop	{r4, r5}
    61de:	4770      	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    61e0:	4a16      	ldr	r2, [pc, #88]	; (623c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    61e2:	4912      	ldr	r1, [pc, #72]	; (622c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    61e4:	7810      	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    61e6:	780a      	ldrb	r2, [r1, #0]
    61e8:	b2d2      	uxtb	r2, r2
		if (head == tail) {
    61ea:	4290      	cmp	r0, r2
    61ec:	d00d      	beq.n	620a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    61ee:	3201      	adds	r2, #1
    61f0:	2a27      	cmp	r2, #39	; 0x27
    61f2:	bf84      	itt	hi
    61f4:	2000      	movhi	r0, #0
    61f6:	4602      	movhi	r2, r0
			n = tx_buffer[tail];
    61f8:	4d11      	ldr	r5, [pc, #68]	; (6240 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    61fa:	4c07      	ldr	r4, [pc, #28]	; (6218 <lpuart0_status_isr+0xb4>)
    61fc:	bf98      	it	ls
    61fe:	b2d0      	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    6200:	5caa      	ldrb	r2, [r5, r2]
    6202:	b2d2      	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    6204:	60e2      	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    6206:	7008      	strb	r0, [r1, #0]
    6208:	e7d8      	b.n	61bc <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    620a:	480e      	ldr	r0, [pc, #56]	; (6244 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    620c:	4a0a      	ldr	r2, [pc, #40]	; (6238 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    620e:	2400      	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    6210:	2101      	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    6212:	6004      	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    6214:	6011      	str	r1, [r2, #0]
    6216:	e7d1      	b.n	61bc <lpuart0_status_isr+0x58>
    6218:	400c4000 	.word	0x400c4000
    621c:	1fff19b8 	.word	0x1fff19b8
    6220:	1fff19b9 	.word	0x1fff19b9
    6224:	1fff19e4 	.word	0x1fff19e4
    6228:	1fff19b4 	.word	0x1fff19b4
    622c:	1fff1a25 	.word	0x1fff1a25
    6230:	1fff1a28 	.word	0x1fff1a28
    6234:	1fff1a24 	.word	0x1fff1a24
    6238:	43880158 	.word	0x43880158
    623c:	1fff1a2c 	.word	0x1fff1a2c
    6240:	1fff19bc 	.word	0x1fff19bc
    6244:	4388015c 	.word	0x4388015c

00006248 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    6248:	b510      	push	{r4, lr}
    624a:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    624c:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    624e:	f7fd fca9 	bl	3ba4 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    6252:	4a18      	ldr	r2, [pc, #96]	; (62b4 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    6254:	4b18      	ldr	r3, [pc, #96]	; (62b8 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    6256:	4919      	ldr	r1, [pc, #100]	; (62bc <usb_init_serialnumber+0x74>)
    6258:	6011      	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    625a:	2270      	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    625c:	2180      	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    625e:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    6260:	461a      	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    6262:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    6264:	7813      	ldrb	r3, [r2, #0]
    6266:	061b      	lsls	r3, r3, #24
    6268:	d5fc      	bpl.n	6264 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    626a:	4b15      	ldr	r3, [pc, #84]	; (62c0 <usb_init_serialnumber+0x78>)
    626c:	681c      	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    626e:	f7fd fcb3 	bl	3bd8 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    6272:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    6274:	4b13      	ldr	r3, [pc, #76]	; (62c4 <usb_init_serialnumber+0x7c>)
    6276:	429c      	cmp	r4, r3
    6278:	bf9c      	itt	ls
    627a:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
    627e:	0064      	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    6280:	4620      	mov	r0, r4
    6282:	4c11      	ldr	r4, [pc, #68]	; (62c8 <usb_init_serialnumber+0x80>)
    6284:	a901      	add	r1, sp, #4
    6286:	220a      	movs	r2, #10
    6288:	f7ff fd8e 	bl	5da8 <ultoa>
    628c:	a901      	add	r1, sp, #4
    628e:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    6290:	2300      	movs	r3, #0
		char c = buf[i];
    6292:	f811 2b01 	ldrb.w	r2, [r1], #1
    6296:	3301      	adds	r3, #1
		if (!c) break;
    6298:	b13a      	cbz	r2, 62aa <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    629a:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    629c:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    62a0:	d1f7      	bne.n	6292 <usb_init_serialnumber+0x4a>
    62a2:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    62a4:	7023      	strb	r3, [r4, #0]
}
    62a6:	b004      	add	sp, #16
    62a8:	bd10      	pop	{r4, pc}
    62aa:	005b      	lsls	r3, r3, #1
    62ac:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    62ae:	7023      	strb	r3, [r4, #0]
}
    62b0:	b004      	add	sp, #16
    62b2:	bd10      	pop	{r4, pc}
    62b4:	40020004 	.word	0x40020004
    62b8:	40020000 	.word	0x40020000
    62bc:	41070000 	.word	0x41070000
    62c0:	4002000c 	.word	0x4002000c
    62c4:	0098967f 	.word	0x0098967f
    62c8:	1fff0824 	.word	0x1fff0824

000062cc <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    62cc:	4770      	bx	lr
    62ce:	bf00      	nop

000062d0 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    62d0:	4770      	bx	lr
    62d2:	bf00      	nop

000062d4 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    62d4:	4770      	bx	lr
    62d6:	bf00      	nop

000062d8 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    62d8:	4770      	bx	lr
    62da:	bf00      	nop

000062dc <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    62dc:	4770      	bx	lr
    62de:	bf00      	nop

000062e0 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    62e0:	4770      	bx	lr
    62e2:	bf00      	nop

000062e4 <__aeabi_drsub>:
    62e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    62e8:	e002      	b.n	62f0 <__adddf3>
    62ea:	bf00      	nop

000062ec <__aeabi_dsub>:
    62ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000062f0 <__adddf3>:
    62f0:	b530      	push	{r4, r5, lr}
    62f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    62f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    62fa:	ea94 0f05 	teq	r4, r5
    62fe:	bf08      	it	eq
    6300:	ea90 0f02 	teqeq	r0, r2
    6304:	bf1f      	itttt	ne
    6306:	ea54 0c00 	orrsne.w	ip, r4, r0
    630a:	ea55 0c02 	orrsne.w	ip, r5, r2
    630e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    6312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    6316:	f000 80e2 	beq.w	64de <__adddf3+0x1ee>
    631a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    631e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    6322:	bfb8      	it	lt
    6324:	426d      	neglt	r5, r5
    6326:	dd0c      	ble.n	6342 <__adddf3+0x52>
    6328:	442c      	add	r4, r5
    632a:	ea80 0202 	eor.w	r2, r0, r2
    632e:	ea81 0303 	eor.w	r3, r1, r3
    6332:	ea82 0000 	eor.w	r0, r2, r0
    6336:	ea83 0101 	eor.w	r1, r3, r1
    633a:	ea80 0202 	eor.w	r2, r0, r2
    633e:	ea81 0303 	eor.w	r3, r1, r3
    6342:	2d36      	cmp	r5, #54	; 0x36
    6344:	bf88      	it	hi
    6346:	bd30      	pophi	{r4, r5, pc}
    6348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    634c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    6350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    6354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    6358:	d002      	beq.n	6360 <__adddf3+0x70>
    635a:	4240      	negs	r0, r0
    635c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    6364:	ea4f 3303 	mov.w	r3, r3, lsl #12
    6368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    636c:	d002      	beq.n	6374 <__adddf3+0x84>
    636e:	4252      	negs	r2, r2
    6370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6374:	ea94 0f05 	teq	r4, r5
    6378:	f000 80a7 	beq.w	64ca <__adddf3+0x1da>
    637c:	f1a4 0401 	sub.w	r4, r4, #1
    6380:	f1d5 0e20 	rsbs	lr, r5, #32
    6384:	db0d      	blt.n	63a2 <__adddf3+0xb2>
    6386:	fa02 fc0e 	lsl.w	ip, r2, lr
    638a:	fa22 f205 	lsr.w	r2, r2, r5
    638e:	1880      	adds	r0, r0, r2
    6390:	f141 0100 	adc.w	r1, r1, #0
    6394:	fa03 f20e 	lsl.w	r2, r3, lr
    6398:	1880      	adds	r0, r0, r2
    639a:	fa43 f305 	asr.w	r3, r3, r5
    639e:	4159      	adcs	r1, r3
    63a0:	e00e      	b.n	63c0 <__adddf3+0xd0>
    63a2:	f1a5 0520 	sub.w	r5, r5, #32
    63a6:	f10e 0e20 	add.w	lr, lr, #32
    63aa:	2a01      	cmp	r2, #1
    63ac:	fa03 fc0e 	lsl.w	ip, r3, lr
    63b0:	bf28      	it	cs
    63b2:	f04c 0c02 	orrcs.w	ip, ip, #2
    63b6:	fa43 f305 	asr.w	r3, r3, r5
    63ba:	18c0      	adds	r0, r0, r3
    63bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    63c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    63c4:	d507      	bpl.n	63d6 <__adddf3+0xe6>
    63c6:	f04f 0e00 	mov.w	lr, #0
    63ca:	f1dc 0c00 	rsbs	ip, ip, #0
    63ce:	eb7e 0000 	sbcs.w	r0, lr, r0
    63d2:	eb6e 0101 	sbc.w	r1, lr, r1
    63d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    63da:	d31b      	bcc.n	6414 <__adddf3+0x124>
    63dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    63e0:	d30c      	bcc.n	63fc <__adddf3+0x10c>
    63e2:	0849      	lsrs	r1, r1, #1
    63e4:	ea5f 0030 	movs.w	r0, r0, rrx
    63e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    63ec:	f104 0401 	add.w	r4, r4, #1
    63f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    63f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    63f8:	f080 809a 	bcs.w	6530 <__adddf3+0x240>
    63fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6400:	bf08      	it	eq
    6402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    6406:	f150 0000 	adcs.w	r0, r0, #0
    640a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    640e:	ea41 0105 	orr.w	r1, r1, r5
    6412:	bd30      	pop	{r4, r5, pc}
    6414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    6418:	4140      	adcs	r0, r0
    641a:	eb41 0101 	adc.w	r1, r1, r1
    641e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6422:	f1a4 0401 	sub.w	r4, r4, #1
    6426:	d1e9      	bne.n	63fc <__adddf3+0x10c>
    6428:	f091 0f00 	teq	r1, #0
    642c:	bf04      	itt	eq
    642e:	4601      	moveq	r1, r0
    6430:	2000      	moveq	r0, #0
    6432:	fab1 f381 	clz	r3, r1
    6436:	bf08      	it	eq
    6438:	3320      	addeq	r3, #32
    643a:	f1a3 030b 	sub.w	r3, r3, #11
    643e:	f1b3 0220 	subs.w	r2, r3, #32
    6442:	da0c      	bge.n	645e <__adddf3+0x16e>
    6444:	320c      	adds	r2, #12
    6446:	dd08      	ble.n	645a <__adddf3+0x16a>
    6448:	f102 0c14 	add.w	ip, r2, #20
    644c:	f1c2 020c 	rsb	r2, r2, #12
    6450:	fa01 f00c 	lsl.w	r0, r1, ip
    6454:	fa21 f102 	lsr.w	r1, r1, r2
    6458:	e00c      	b.n	6474 <__adddf3+0x184>
    645a:	f102 0214 	add.w	r2, r2, #20
    645e:	bfd8      	it	le
    6460:	f1c2 0c20 	rsble	ip, r2, #32
    6464:	fa01 f102 	lsl.w	r1, r1, r2
    6468:	fa20 fc0c 	lsr.w	ip, r0, ip
    646c:	bfdc      	itt	le
    646e:	ea41 010c 	orrle.w	r1, r1, ip
    6472:	4090      	lslle	r0, r2
    6474:	1ae4      	subs	r4, r4, r3
    6476:	bfa2      	ittt	ge
    6478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    647c:	4329      	orrge	r1, r5
    647e:	bd30      	popge	{r4, r5, pc}
    6480:	ea6f 0404 	mvn.w	r4, r4
    6484:	3c1f      	subs	r4, #31
    6486:	da1c      	bge.n	64c2 <__adddf3+0x1d2>
    6488:	340c      	adds	r4, #12
    648a:	dc0e      	bgt.n	64aa <__adddf3+0x1ba>
    648c:	f104 0414 	add.w	r4, r4, #20
    6490:	f1c4 0220 	rsb	r2, r4, #32
    6494:	fa20 f004 	lsr.w	r0, r0, r4
    6498:	fa01 f302 	lsl.w	r3, r1, r2
    649c:	ea40 0003 	orr.w	r0, r0, r3
    64a0:	fa21 f304 	lsr.w	r3, r1, r4
    64a4:	ea45 0103 	orr.w	r1, r5, r3
    64a8:	bd30      	pop	{r4, r5, pc}
    64aa:	f1c4 040c 	rsb	r4, r4, #12
    64ae:	f1c4 0220 	rsb	r2, r4, #32
    64b2:	fa20 f002 	lsr.w	r0, r0, r2
    64b6:	fa01 f304 	lsl.w	r3, r1, r4
    64ba:	ea40 0003 	orr.w	r0, r0, r3
    64be:	4629      	mov	r1, r5
    64c0:	bd30      	pop	{r4, r5, pc}
    64c2:	fa21 f004 	lsr.w	r0, r1, r4
    64c6:	4629      	mov	r1, r5
    64c8:	bd30      	pop	{r4, r5, pc}
    64ca:	f094 0f00 	teq	r4, #0
    64ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    64d2:	bf06      	itte	eq
    64d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    64d8:	3401      	addeq	r4, #1
    64da:	3d01      	subne	r5, #1
    64dc:	e74e      	b.n	637c <__adddf3+0x8c>
    64de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    64e2:	bf18      	it	ne
    64e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    64e8:	d029      	beq.n	653e <__adddf3+0x24e>
    64ea:	ea94 0f05 	teq	r4, r5
    64ee:	bf08      	it	eq
    64f0:	ea90 0f02 	teqeq	r0, r2
    64f4:	d005      	beq.n	6502 <__adddf3+0x212>
    64f6:	ea54 0c00 	orrs.w	ip, r4, r0
    64fa:	bf04      	itt	eq
    64fc:	4619      	moveq	r1, r3
    64fe:	4610      	moveq	r0, r2
    6500:	bd30      	pop	{r4, r5, pc}
    6502:	ea91 0f03 	teq	r1, r3
    6506:	bf1e      	ittt	ne
    6508:	2100      	movne	r1, #0
    650a:	2000      	movne	r0, #0
    650c:	bd30      	popne	{r4, r5, pc}
    650e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    6512:	d105      	bne.n	6520 <__adddf3+0x230>
    6514:	0040      	lsls	r0, r0, #1
    6516:	4149      	adcs	r1, r1
    6518:	bf28      	it	cs
    651a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    651e:	bd30      	pop	{r4, r5, pc}
    6520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    6524:	bf3c      	itt	cc
    6526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    652a:	bd30      	popcc	{r4, r5, pc}
    652c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    6530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    6534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6538:	f04f 0000 	mov.w	r0, #0
    653c:	bd30      	pop	{r4, r5, pc}
    653e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    6542:	bf1a      	itte	ne
    6544:	4619      	movne	r1, r3
    6546:	4610      	movne	r0, r2
    6548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    654c:	bf1c      	itt	ne
    654e:	460b      	movne	r3, r1
    6550:	4602      	movne	r2, r0
    6552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6556:	bf06      	itte	eq
    6558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    655c:	ea91 0f03 	teqeq	r1, r3
    6560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    6564:	bd30      	pop	{r4, r5, pc}
    6566:	bf00      	nop

00006568 <__aeabi_ui2d>:
    6568:	f090 0f00 	teq	r0, #0
    656c:	bf04      	itt	eq
    656e:	2100      	moveq	r1, #0
    6570:	4770      	bxeq	lr
    6572:	b530      	push	{r4, r5, lr}
    6574:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6578:	f104 0432 	add.w	r4, r4, #50	; 0x32
    657c:	f04f 0500 	mov.w	r5, #0
    6580:	f04f 0100 	mov.w	r1, #0
    6584:	e750      	b.n	6428 <__adddf3+0x138>
    6586:	bf00      	nop

00006588 <__aeabi_i2d>:
    6588:	f090 0f00 	teq	r0, #0
    658c:	bf04      	itt	eq
    658e:	2100      	moveq	r1, #0
    6590:	4770      	bxeq	lr
    6592:	b530      	push	{r4, r5, lr}
    6594:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6598:	f104 0432 	add.w	r4, r4, #50	; 0x32
    659c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    65a0:	bf48      	it	mi
    65a2:	4240      	negmi	r0, r0
    65a4:	f04f 0100 	mov.w	r1, #0
    65a8:	e73e      	b.n	6428 <__adddf3+0x138>
    65aa:	bf00      	nop

000065ac <__aeabi_f2d>:
    65ac:	0042      	lsls	r2, r0, #1
    65ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
    65b2:	ea4f 0131 	mov.w	r1, r1, rrx
    65b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    65ba:	bf1f      	itttt	ne
    65bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    65c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    65c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    65c8:	4770      	bxne	lr
    65ca:	f092 0f00 	teq	r2, #0
    65ce:	bf14      	ite	ne
    65d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    65d4:	4770      	bxeq	lr
    65d6:	b530      	push	{r4, r5, lr}
    65d8:	f44f 7460 	mov.w	r4, #896	; 0x380
    65dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    65e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    65e4:	e720      	b.n	6428 <__adddf3+0x138>
    65e6:	bf00      	nop

000065e8 <__aeabi_ul2d>:
    65e8:	ea50 0201 	orrs.w	r2, r0, r1
    65ec:	bf08      	it	eq
    65ee:	4770      	bxeq	lr
    65f0:	b530      	push	{r4, r5, lr}
    65f2:	f04f 0500 	mov.w	r5, #0
    65f6:	e00a      	b.n	660e <__aeabi_l2d+0x16>

000065f8 <__aeabi_l2d>:
    65f8:	ea50 0201 	orrs.w	r2, r0, r1
    65fc:	bf08      	it	eq
    65fe:	4770      	bxeq	lr
    6600:	b530      	push	{r4, r5, lr}
    6602:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    6606:	d502      	bpl.n	660e <__aeabi_l2d+0x16>
    6608:	4240      	negs	r0, r0
    660a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    660e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    6612:	f104 0432 	add.w	r4, r4, #50	; 0x32
    6616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    661a:	f43f aedc 	beq.w	63d6 <__adddf3+0xe6>
    661e:	f04f 0203 	mov.w	r2, #3
    6622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    6626:	bf18      	it	ne
    6628:	3203      	addne	r2, #3
    662a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    662e:	bf18      	it	ne
    6630:	3203      	addne	r2, #3
    6632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    6636:	f1c2 0320 	rsb	r3, r2, #32
    663a:	fa00 fc03 	lsl.w	ip, r0, r3
    663e:	fa20 f002 	lsr.w	r0, r0, r2
    6642:	fa01 fe03 	lsl.w	lr, r1, r3
    6646:	ea40 000e 	orr.w	r0, r0, lr
    664a:	fa21 f102 	lsr.w	r1, r1, r2
    664e:	4414      	add	r4, r2
    6650:	e6c1      	b.n	63d6 <__adddf3+0xe6>
    6652:	bf00      	nop

00006654 <__aeabi_dmul>:
    6654:	b570      	push	{r4, r5, r6, lr}
    6656:	f04f 0cff 	mov.w	ip, #255	; 0xff
    665a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    665e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    6662:	bf1d      	ittte	ne
    6664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    6668:	ea94 0f0c 	teqne	r4, ip
    666c:	ea95 0f0c 	teqne	r5, ip
    6670:	f000 f8de 	bleq	6830 <__aeabi_dmul+0x1dc>
    6674:	442c      	add	r4, r5
    6676:	ea81 0603 	eor.w	r6, r1, r3
    667a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    667e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    6682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    6686:	bf18      	it	ne
    6688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    668c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6694:	d038      	beq.n	6708 <__aeabi_dmul+0xb4>
    6696:	fba0 ce02 	umull	ip, lr, r0, r2
    669a:	f04f 0500 	mov.w	r5, #0
    669e:	fbe1 e502 	umlal	lr, r5, r1, r2
    66a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    66a6:	fbe0 e503 	umlal	lr, r5, r0, r3
    66aa:	f04f 0600 	mov.w	r6, #0
    66ae:	fbe1 5603 	umlal	r5, r6, r1, r3
    66b2:	f09c 0f00 	teq	ip, #0
    66b6:	bf18      	it	ne
    66b8:	f04e 0e01 	orrne.w	lr, lr, #1
    66bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    66c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    66c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    66c8:	d204      	bcs.n	66d4 <__aeabi_dmul+0x80>
    66ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    66ce:	416d      	adcs	r5, r5
    66d0:	eb46 0606 	adc.w	r6, r6, r6
    66d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    66d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    66dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    66e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    66e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    66e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    66ec:	bf88      	it	hi
    66ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    66f2:	d81e      	bhi.n	6732 <__aeabi_dmul+0xde>
    66f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    66f8:	bf08      	it	eq
    66fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    66fe:	f150 0000 	adcs.w	r0, r0, #0
    6702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    6706:	bd70      	pop	{r4, r5, r6, pc}
    6708:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    670c:	ea46 0101 	orr.w	r1, r6, r1
    6710:	ea40 0002 	orr.w	r0, r0, r2
    6714:	ea81 0103 	eor.w	r1, r1, r3
    6718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    671c:	bfc2      	ittt	gt
    671e:	ebd4 050c 	rsbsgt	r5, r4, ip
    6722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    6726:	bd70      	popgt	{r4, r5, r6, pc}
    6728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    672c:	f04f 0e00 	mov.w	lr, #0
    6730:	3c01      	subs	r4, #1
    6732:	f300 80ab 	bgt.w	688c <__aeabi_dmul+0x238>
    6736:	f114 0f36 	cmn.w	r4, #54	; 0x36
    673a:	bfde      	ittt	le
    673c:	2000      	movle	r0, #0
    673e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    6742:	bd70      	pople	{r4, r5, r6, pc}
    6744:	f1c4 0400 	rsb	r4, r4, #0
    6748:	3c20      	subs	r4, #32
    674a:	da35      	bge.n	67b8 <__aeabi_dmul+0x164>
    674c:	340c      	adds	r4, #12
    674e:	dc1b      	bgt.n	6788 <__aeabi_dmul+0x134>
    6750:	f104 0414 	add.w	r4, r4, #20
    6754:	f1c4 0520 	rsb	r5, r4, #32
    6758:	fa00 f305 	lsl.w	r3, r0, r5
    675c:	fa20 f004 	lsr.w	r0, r0, r4
    6760:	fa01 f205 	lsl.w	r2, r1, r5
    6764:	ea40 0002 	orr.w	r0, r0, r2
    6768:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    676c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    6774:	fa21 f604 	lsr.w	r6, r1, r4
    6778:	eb42 0106 	adc.w	r1, r2, r6
    677c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    6780:	bf08      	it	eq
    6782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    6786:	bd70      	pop	{r4, r5, r6, pc}
    6788:	f1c4 040c 	rsb	r4, r4, #12
    678c:	f1c4 0520 	rsb	r5, r4, #32
    6790:	fa00 f304 	lsl.w	r3, r0, r4
    6794:	fa20 f005 	lsr.w	r0, r0, r5
    6798:	fa01 f204 	lsl.w	r2, r1, r4
    679c:	ea40 0002 	orr.w	r0, r0, r2
    67a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    67a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    67a8:	f141 0100 	adc.w	r1, r1, #0
    67ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    67b0:	bf08      	it	eq
    67b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    67b6:	bd70      	pop	{r4, r5, r6, pc}
    67b8:	f1c4 0520 	rsb	r5, r4, #32
    67bc:	fa00 f205 	lsl.w	r2, r0, r5
    67c0:	ea4e 0e02 	orr.w	lr, lr, r2
    67c4:	fa20 f304 	lsr.w	r3, r0, r4
    67c8:	fa01 f205 	lsl.w	r2, r1, r5
    67cc:	ea43 0302 	orr.w	r3, r3, r2
    67d0:	fa21 f004 	lsr.w	r0, r1, r4
    67d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    67d8:	fa21 f204 	lsr.w	r2, r1, r4
    67dc:	ea20 0002 	bic.w	r0, r0, r2
    67e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    67e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    67e8:	bf08      	it	eq
    67ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    67ee:	bd70      	pop	{r4, r5, r6, pc}
    67f0:	f094 0f00 	teq	r4, #0
    67f4:	d10f      	bne.n	6816 <__aeabi_dmul+0x1c2>
    67f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    67fa:	0040      	lsls	r0, r0, #1
    67fc:	eb41 0101 	adc.w	r1, r1, r1
    6800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    6804:	bf08      	it	eq
    6806:	3c01      	subeq	r4, #1
    6808:	d0f7      	beq.n	67fa <__aeabi_dmul+0x1a6>
    680a:	ea41 0106 	orr.w	r1, r1, r6
    680e:	f095 0f00 	teq	r5, #0
    6812:	bf18      	it	ne
    6814:	4770      	bxne	lr
    6816:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    681a:	0052      	lsls	r2, r2, #1
    681c:	eb43 0303 	adc.w	r3, r3, r3
    6820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    6824:	bf08      	it	eq
    6826:	3d01      	subeq	r5, #1
    6828:	d0f7      	beq.n	681a <__aeabi_dmul+0x1c6>
    682a:	ea43 0306 	orr.w	r3, r3, r6
    682e:	4770      	bx	lr
    6830:	ea94 0f0c 	teq	r4, ip
    6834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    6838:	bf18      	it	ne
    683a:	ea95 0f0c 	teqne	r5, ip
    683e:	d00c      	beq.n	685a <__aeabi_dmul+0x206>
    6840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6844:	bf18      	it	ne
    6846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    684a:	d1d1      	bne.n	67f0 <__aeabi_dmul+0x19c>
    684c:	ea81 0103 	eor.w	r1, r1, r3
    6850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6854:	f04f 0000 	mov.w	r0, #0
    6858:	bd70      	pop	{r4, r5, r6, pc}
    685a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    685e:	bf06      	itte	eq
    6860:	4610      	moveq	r0, r2
    6862:	4619      	moveq	r1, r3
    6864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    6868:	d019      	beq.n	689e <__aeabi_dmul+0x24a>
    686a:	ea94 0f0c 	teq	r4, ip
    686e:	d102      	bne.n	6876 <__aeabi_dmul+0x222>
    6870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    6874:	d113      	bne.n	689e <__aeabi_dmul+0x24a>
    6876:	ea95 0f0c 	teq	r5, ip
    687a:	d105      	bne.n	6888 <__aeabi_dmul+0x234>
    687c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    6880:	bf1c      	itt	ne
    6882:	4610      	movne	r0, r2
    6884:	4619      	movne	r1, r3
    6886:	d10a      	bne.n	689e <__aeabi_dmul+0x24a>
    6888:	ea81 0103 	eor.w	r1, r1, r3
    688c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    6890:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    6894:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    6898:	f04f 0000 	mov.w	r0, #0
    689c:	bd70      	pop	{r4, r5, r6, pc}
    689e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    68a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    68a6:	bd70      	pop	{r4, r5, r6, pc}

000068a8 <__aeabi_ddiv>:
    68a8:	b570      	push	{r4, r5, r6, lr}
    68aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
    68ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    68b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    68b6:	bf1d      	ittte	ne
    68b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    68bc:	ea94 0f0c 	teqne	r4, ip
    68c0:	ea95 0f0c 	teqne	r5, ip
    68c4:	f000 f8a7 	bleq	6a16 <__aeabi_ddiv+0x16e>
    68c8:	eba4 0405 	sub.w	r4, r4, r5
    68cc:	ea81 0e03 	eor.w	lr, r1, r3
    68d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    68d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    68d8:	f000 8088 	beq.w	69ec <__aeabi_ddiv+0x144>
    68dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    68e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    68e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    68e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    68ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
    68f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    68f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    68f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    68fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    6900:	429d      	cmp	r5, r3
    6902:	bf08      	it	eq
    6904:	4296      	cmpeq	r6, r2
    6906:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    690a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    690e:	d202      	bcs.n	6916 <__aeabi_ddiv+0x6e>
    6910:	085b      	lsrs	r3, r3, #1
    6912:	ea4f 0232 	mov.w	r2, r2, rrx
    6916:	1ab6      	subs	r6, r6, r2
    6918:	eb65 0503 	sbc.w	r5, r5, r3
    691c:	085b      	lsrs	r3, r3, #1
    691e:	ea4f 0232 	mov.w	r2, r2, rrx
    6922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6926:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    692a:	ebb6 0e02 	subs.w	lr, r6, r2
    692e:	eb75 0e03 	sbcs.w	lr, r5, r3
    6932:	bf22      	ittt	cs
    6934:	1ab6      	subcs	r6, r6, r2
    6936:	4675      	movcs	r5, lr
    6938:	ea40 000c 	orrcs.w	r0, r0, ip
    693c:	085b      	lsrs	r3, r3, #1
    693e:	ea4f 0232 	mov.w	r2, r2, rrx
    6942:	ebb6 0e02 	subs.w	lr, r6, r2
    6946:	eb75 0e03 	sbcs.w	lr, r5, r3
    694a:	bf22      	ittt	cs
    694c:	1ab6      	subcs	r6, r6, r2
    694e:	4675      	movcs	r5, lr
    6950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    6954:	085b      	lsrs	r3, r3, #1
    6956:	ea4f 0232 	mov.w	r2, r2, rrx
    695a:	ebb6 0e02 	subs.w	lr, r6, r2
    695e:	eb75 0e03 	sbcs.w	lr, r5, r3
    6962:	bf22      	ittt	cs
    6964:	1ab6      	subcs	r6, r6, r2
    6966:	4675      	movcs	r5, lr
    6968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    696c:	085b      	lsrs	r3, r3, #1
    696e:	ea4f 0232 	mov.w	r2, r2, rrx
    6972:	ebb6 0e02 	subs.w	lr, r6, r2
    6976:	eb75 0e03 	sbcs.w	lr, r5, r3
    697a:	bf22      	ittt	cs
    697c:	1ab6      	subcs	r6, r6, r2
    697e:	4675      	movcs	r5, lr
    6980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    6984:	ea55 0e06 	orrs.w	lr, r5, r6
    6988:	d018      	beq.n	69bc <__aeabi_ddiv+0x114>
    698a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    698e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    6992:	ea4f 1606 	mov.w	r6, r6, lsl #4
    6996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    699a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    699e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    69a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    69a6:	d1c0      	bne.n	692a <__aeabi_ddiv+0x82>
    69a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    69ac:	d10b      	bne.n	69c6 <__aeabi_ddiv+0x11e>
    69ae:	ea41 0100 	orr.w	r1, r1, r0
    69b2:	f04f 0000 	mov.w	r0, #0
    69b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    69ba:	e7b6      	b.n	692a <__aeabi_ddiv+0x82>
    69bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    69c0:	bf04      	itt	eq
    69c2:	4301      	orreq	r1, r0
    69c4:	2000      	moveq	r0, #0
    69c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    69ca:	bf88      	it	hi
    69cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    69d0:	f63f aeaf 	bhi.w	6732 <__aeabi_dmul+0xde>
    69d4:	ebb5 0c03 	subs.w	ip, r5, r3
    69d8:	bf04      	itt	eq
    69da:	ebb6 0c02 	subseq.w	ip, r6, r2
    69de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    69e2:	f150 0000 	adcs.w	r0, r0, #0
    69e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    69ea:	bd70      	pop	{r4, r5, r6, pc}
    69ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    69f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    69f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    69f8:	bfc2      	ittt	gt
    69fa:	ebd4 050c 	rsbsgt	r5, r4, ip
    69fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    6a02:	bd70      	popgt	{r4, r5, r6, pc}
    6a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    6a08:	f04f 0e00 	mov.w	lr, #0
    6a0c:	3c01      	subs	r4, #1
    6a0e:	e690      	b.n	6732 <__aeabi_dmul+0xde>
    6a10:	ea45 0e06 	orr.w	lr, r5, r6
    6a14:	e68d      	b.n	6732 <__aeabi_dmul+0xde>
    6a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    6a1a:	ea94 0f0c 	teq	r4, ip
    6a1e:	bf08      	it	eq
    6a20:	ea95 0f0c 	teqeq	r5, ip
    6a24:	f43f af3b 	beq.w	689e <__aeabi_dmul+0x24a>
    6a28:	ea94 0f0c 	teq	r4, ip
    6a2c:	d10a      	bne.n	6a44 <__aeabi_ddiv+0x19c>
    6a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    6a32:	f47f af34 	bne.w	689e <__aeabi_dmul+0x24a>
    6a36:	ea95 0f0c 	teq	r5, ip
    6a3a:	f47f af25 	bne.w	6888 <__aeabi_dmul+0x234>
    6a3e:	4610      	mov	r0, r2
    6a40:	4619      	mov	r1, r3
    6a42:	e72c      	b.n	689e <__aeabi_dmul+0x24a>
    6a44:	ea95 0f0c 	teq	r5, ip
    6a48:	d106      	bne.n	6a58 <__aeabi_ddiv+0x1b0>
    6a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    6a4e:	f43f aefd 	beq.w	684c <__aeabi_dmul+0x1f8>
    6a52:	4610      	mov	r0, r2
    6a54:	4619      	mov	r1, r3
    6a56:	e722      	b.n	689e <__aeabi_dmul+0x24a>
    6a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    6a5c:	bf18      	it	ne
    6a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    6a62:	f47f aec5 	bne.w	67f0 <__aeabi_dmul+0x19c>
    6a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    6a6a:	f47f af0d 	bne.w	6888 <__aeabi_dmul+0x234>
    6a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    6a72:	f47f aeeb 	bne.w	684c <__aeabi_dmul+0x1f8>
    6a76:	e712      	b.n	689e <__aeabi_dmul+0x24a>

00006a78 <__gedf2>:
    6a78:	f04f 3cff 	mov.w	ip, #4294967295
    6a7c:	e006      	b.n	6a8c <__cmpdf2+0x4>
    6a7e:	bf00      	nop

00006a80 <__ledf2>:
    6a80:	f04f 0c01 	mov.w	ip, #1
    6a84:	e002      	b.n	6a8c <__cmpdf2+0x4>
    6a86:	bf00      	nop

00006a88 <__cmpdf2>:
    6a88:	f04f 0c01 	mov.w	ip, #1
    6a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
    6a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6a9c:	bf18      	it	ne
    6a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    6aa2:	d01b      	beq.n	6adc <__cmpdf2+0x54>
    6aa4:	b001      	add	sp, #4
    6aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    6aaa:	bf0c      	ite	eq
    6aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    6ab0:	ea91 0f03 	teqne	r1, r3
    6ab4:	bf02      	ittt	eq
    6ab6:	ea90 0f02 	teqeq	r0, r2
    6aba:	2000      	moveq	r0, #0
    6abc:	4770      	bxeq	lr
    6abe:	f110 0f00 	cmn.w	r0, #0
    6ac2:	ea91 0f03 	teq	r1, r3
    6ac6:	bf58      	it	pl
    6ac8:	4299      	cmppl	r1, r3
    6aca:	bf08      	it	eq
    6acc:	4290      	cmpeq	r0, r2
    6ace:	bf2c      	ite	cs
    6ad0:	17d8      	asrcs	r0, r3, #31
    6ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    6ad6:	f040 0001 	orr.w	r0, r0, #1
    6ada:	4770      	bx	lr
    6adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6ae4:	d102      	bne.n	6aec <__cmpdf2+0x64>
    6ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    6aea:	d107      	bne.n	6afc <__cmpdf2+0x74>
    6aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6af4:	d1d6      	bne.n	6aa4 <__cmpdf2+0x1c>
    6af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    6afa:	d0d3      	beq.n	6aa4 <__cmpdf2+0x1c>
    6afc:	f85d 0b04 	ldr.w	r0, [sp], #4
    6b00:	4770      	bx	lr
    6b02:	bf00      	nop

00006b04 <__aeabi_cdrcmple>:
    6b04:	4684      	mov	ip, r0
    6b06:	4610      	mov	r0, r2
    6b08:	4662      	mov	r2, ip
    6b0a:	468c      	mov	ip, r1
    6b0c:	4619      	mov	r1, r3
    6b0e:	4663      	mov	r3, ip
    6b10:	e000      	b.n	6b14 <__aeabi_cdcmpeq>
    6b12:	bf00      	nop

00006b14 <__aeabi_cdcmpeq>:
    6b14:	b501      	push	{r0, lr}
    6b16:	f7ff ffb7 	bl	6a88 <__cmpdf2>
    6b1a:	2800      	cmp	r0, #0
    6b1c:	bf48      	it	mi
    6b1e:	f110 0f00 	cmnmi.w	r0, #0
    6b22:	bd01      	pop	{r0, pc}

00006b24 <__aeabi_dcmpeq>:
    6b24:	f84d ed08 	str.w	lr, [sp, #-8]!
    6b28:	f7ff fff4 	bl	6b14 <__aeabi_cdcmpeq>
    6b2c:	bf0c      	ite	eq
    6b2e:	2001      	moveq	r0, #1
    6b30:	2000      	movne	r0, #0
    6b32:	f85d fb08 	ldr.w	pc, [sp], #8
    6b36:	bf00      	nop

00006b38 <__aeabi_dcmplt>:
    6b38:	f84d ed08 	str.w	lr, [sp, #-8]!
    6b3c:	f7ff ffea 	bl	6b14 <__aeabi_cdcmpeq>
    6b40:	bf34      	ite	cc
    6b42:	2001      	movcc	r0, #1
    6b44:	2000      	movcs	r0, #0
    6b46:	f85d fb08 	ldr.w	pc, [sp], #8
    6b4a:	bf00      	nop

00006b4c <__aeabi_dcmple>:
    6b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
    6b50:	f7ff ffe0 	bl	6b14 <__aeabi_cdcmpeq>
    6b54:	bf94      	ite	ls
    6b56:	2001      	movls	r0, #1
    6b58:	2000      	movhi	r0, #0
    6b5a:	f85d fb08 	ldr.w	pc, [sp], #8
    6b5e:	bf00      	nop

00006b60 <__aeabi_dcmpge>:
    6b60:	f84d ed08 	str.w	lr, [sp, #-8]!
    6b64:	f7ff ffce 	bl	6b04 <__aeabi_cdrcmple>
    6b68:	bf94      	ite	ls
    6b6a:	2001      	movls	r0, #1
    6b6c:	2000      	movhi	r0, #0
    6b6e:	f85d fb08 	ldr.w	pc, [sp], #8
    6b72:	bf00      	nop

00006b74 <__aeabi_dcmpgt>:
    6b74:	f84d ed08 	str.w	lr, [sp, #-8]!
    6b78:	f7ff ffc4 	bl	6b04 <__aeabi_cdrcmple>
    6b7c:	bf34      	ite	cc
    6b7e:	2001      	movcc	r0, #1
    6b80:	2000      	movcs	r0, #0
    6b82:	f85d fb08 	ldr.w	pc, [sp], #8
    6b86:	bf00      	nop

00006b88 <__aeabi_dcmpun>:
    6b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    6b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6b90:	d102      	bne.n	6b98 <__aeabi_dcmpun+0x10>
    6b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    6b96:	d10a      	bne.n	6bae <__aeabi_dcmpun+0x26>
    6b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    6b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    6ba0:	d102      	bne.n	6ba8 <__aeabi_dcmpun+0x20>
    6ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    6ba6:	d102      	bne.n	6bae <__aeabi_dcmpun+0x26>
    6ba8:	f04f 0000 	mov.w	r0, #0
    6bac:	4770      	bx	lr
    6bae:	f04f 0001 	mov.w	r0, #1
    6bb2:	4770      	bx	lr

00006bb4 <__aeabi_d2iz>:
    6bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    6bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    6bbc:	d215      	bcs.n	6bea <__aeabi_d2iz+0x36>
    6bbe:	d511      	bpl.n	6be4 <__aeabi_d2iz+0x30>
    6bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    6bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    6bc8:	d912      	bls.n	6bf0 <__aeabi_d2iz+0x3c>
    6bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    6bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    6bda:	fa23 f002 	lsr.w	r0, r3, r2
    6bde:	bf18      	it	ne
    6be0:	4240      	negne	r0, r0
    6be2:	4770      	bx	lr
    6be4:	f04f 0000 	mov.w	r0, #0
    6be8:	4770      	bx	lr
    6bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    6bee:	d105      	bne.n	6bfc <__aeabi_d2iz+0x48>
    6bf0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    6bf4:	bf08      	it	eq
    6bf6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    6bfa:	4770      	bx	lr
    6bfc:	f04f 0000 	mov.w	r0, #0
    6c00:	4770      	bx	lr
    6c02:	bf00      	nop

00006c04 <__aeabi_d2uiz>:
    6c04:	004a      	lsls	r2, r1, #1
    6c06:	d211      	bcs.n	6c2c <__aeabi_d2uiz+0x28>
    6c08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    6c0c:	d211      	bcs.n	6c32 <__aeabi_d2uiz+0x2e>
    6c0e:	d50d      	bpl.n	6c2c <__aeabi_d2uiz+0x28>
    6c10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    6c14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    6c18:	d40e      	bmi.n	6c38 <__aeabi_d2uiz+0x34>
    6c1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    6c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6c22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    6c26:	fa23 f002 	lsr.w	r0, r3, r2
    6c2a:	4770      	bx	lr
    6c2c:	f04f 0000 	mov.w	r0, #0
    6c30:	4770      	bx	lr
    6c32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    6c36:	d102      	bne.n	6c3e <__aeabi_d2uiz+0x3a>
    6c38:	f04f 30ff 	mov.w	r0, #4294967295
    6c3c:	4770      	bx	lr
    6c3e:	f04f 0000 	mov.w	r0, #0
    6c42:	4770      	bx	lr

00006c44 <__aeabi_atexit>:
    6c44:	460b      	mov	r3, r1
    6c46:	4601      	mov	r1, r0
    6c48:	4618      	mov	r0, r3
    6c4a:	f000 b805 	b.w	6c58 <__cxa_atexit>
    6c4e:	bf00      	nop

00006c50 <atoi>:
    6c50:	220a      	movs	r2, #10
    6c52:	2100      	movs	r1, #0
    6c54:	f001 b832 	b.w	7cbc <strtol>

00006c58 <__cxa_atexit>:
    6c58:	4613      	mov	r3, r2
    6c5a:	460a      	mov	r2, r1
    6c5c:	4601      	mov	r1, r0
    6c5e:	2002      	movs	r0, #2
    6c60:	f002 bbc2 	b.w	93e8 <__register_exitproc>

00006c64 <__errno>:
    6c64:	4b01      	ldr	r3, [pc, #4]	; (6c6c <__errno+0x8>)
    6c66:	6818      	ldr	r0, [r3, #0]
    6c68:	4770      	bx	lr
    6c6a:	bf00      	nop
    6c6c:	1fff0c68 	.word	0x1fff0c68

00006c70 <__libc_init_array>:
    6c70:	b570      	push	{r4, r5, r6, lr}
    6c72:	4e0f      	ldr	r6, [pc, #60]	; (6cb0 <__libc_init_array+0x40>)
    6c74:	4d0f      	ldr	r5, [pc, #60]	; (6cb4 <__libc_init_array+0x44>)
    6c76:	1b76      	subs	r6, r6, r5
    6c78:	10b6      	asrs	r6, r6, #2
    6c7a:	bf18      	it	ne
    6c7c:	2400      	movne	r4, #0
    6c7e:	d005      	beq.n	6c8c <__libc_init_array+0x1c>
    6c80:	3401      	adds	r4, #1
    6c82:	f855 3b04 	ldr.w	r3, [r5], #4
    6c86:	4798      	blx	r3
    6c88:	42a6      	cmp	r6, r4
    6c8a:	d1f9      	bne.n	6c80 <__libc_init_array+0x10>
    6c8c:	4e0a      	ldr	r6, [pc, #40]	; (6cb8 <__libc_init_array+0x48>)
    6c8e:	4d0b      	ldr	r5, [pc, #44]	; (6cbc <__libc_init_array+0x4c>)
    6c90:	1b76      	subs	r6, r6, r5
    6c92:	f004 fedb 	bl	ba4c <_init>
    6c96:	10b6      	asrs	r6, r6, #2
    6c98:	bf18      	it	ne
    6c9a:	2400      	movne	r4, #0
    6c9c:	d006      	beq.n	6cac <__libc_init_array+0x3c>
    6c9e:	3401      	adds	r4, #1
    6ca0:	f855 3b04 	ldr.w	r3, [r5], #4
    6ca4:	4798      	blx	r3
    6ca6:	42a6      	cmp	r6, r4
    6ca8:	d1f9      	bne.n	6c9e <__libc_init_array+0x2e>
    6caa:	bd70      	pop	{r4, r5, r6, pc}
    6cac:	bd70      	pop	{r4, r5, r6, pc}
    6cae:	bf00      	nop
    6cb0:	0000ba58 	.word	0x0000ba58
    6cb4:	0000ba58 	.word	0x0000ba58
    6cb8:	0000ba70 	.word	0x0000ba70
    6cbc:	0000ba58 	.word	0x0000ba58

00006cc0 <__locale_ctype_ptr_l>:
    6cc0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    6cc4:	4770      	bx	lr
    6cc6:	bf00      	nop

00006cc8 <malloc>:
    6cc8:	4b02      	ldr	r3, [pc, #8]	; (6cd4 <malloc+0xc>)
    6cca:	4601      	mov	r1, r0
    6ccc:	6818      	ldr	r0, [r3, #0]
    6cce:	f000 b80b 	b.w	6ce8 <_malloc_r>
    6cd2:	bf00      	nop
    6cd4:	1fff0c68 	.word	0x1fff0c68

00006cd8 <free>:
    6cd8:	4b02      	ldr	r3, [pc, #8]	; (6ce4 <free+0xc>)
    6cda:	4601      	mov	r1, r0
    6cdc:	6818      	ldr	r0, [r3, #0]
    6cde:	f003 bbf7 	b.w	a4d0 <_free_r>
    6ce2:	bf00      	nop
    6ce4:	1fff0c68 	.word	0x1fff0c68

00006ce8 <_malloc_r>:
    6ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cec:	f101 050b 	add.w	r5, r1, #11
    6cf0:	2d16      	cmp	r5, #22
    6cf2:	b083      	sub	sp, #12
    6cf4:	4606      	mov	r6, r0
    6cf6:	f240 809f 	bls.w	6e38 <_malloc_r+0x150>
    6cfa:	f035 0507 	bics.w	r5, r5, #7
    6cfe:	f100 80bf 	bmi.w	6e80 <_malloc_r+0x198>
    6d02:	42a9      	cmp	r1, r5
    6d04:	f200 80bc 	bhi.w	6e80 <_malloc_r+0x198>
    6d08:	f000 fba0 	bl	744c <__malloc_lock>
    6d0c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    6d10:	f0c0 829c 	bcc.w	724c <_malloc_r+0x564>
    6d14:	0a6b      	lsrs	r3, r5, #9
    6d16:	f000 80ba 	beq.w	6e8e <_malloc_r+0x1a6>
    6d1a:	2b04      	cmp	r3, #4
    6d1c:	f200 8183 	bhi.w	7026 <_malloc_r+0x33e>
    6d20:	09a8      	lsrs	r0, r5, #6
    6d22:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    6d26:	ea4f 034e 	mov.w	r3, lr, lsl #1
    6d2a:	3038      	adds	r0, #56	; 0x38
    6d2c:	4fc4      	ldr	r7, [pc, #784]	; (7040 <_malloc_r+0x358>)
    6d2e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6d32:	f1a3 0108 	sub.w	r1, r3, #8
    6d36:	685c      	ldr	r4, [r3, #4]
    6d38:	42a1      	cmp	r1, r4
    6d3a:	d107      	bne.n	6d4c <_malloc_r+0x64>
    6d3c:	e0ac      	b.n	6e98 <_malloc_r+0x1b0>
    6d3e:	2a00      	cmp	r2, #0
    6d40:	f280 80ac 	bge.w	6e9c <_malloc_r+0x1b4>
    6d44:	68e4      	ldr	r4, [r4, #12]
    6d46:	42a1      	cmp	r1, r4
    6d48:	f000 80a6 	beq.w	6e98 <_malloc_r+0x1b0>
    6d4c:	6863      	ldr	r3, [r4, #4]
    6d4e:	f023 0303 	bic.w	r3, r3, #3
    6d52:	1b5a      	subs	r2, r3, r5
    6d54:	2a0f      	cmp	r2, #15
    6d56:	ddf2      	ble.n	6d3e <_malloc_r+0x56>
    6d58:	49b9      	ldr	r1, [pc, #740]	; (7040 <_malloc_r+0x358>)
    6d5a:	693c      	ldr	r4, [r7, #16]
    6d5c:	f101 0e08 	add.w	lr, r1, #8
    6d60:	4574      	cmp	r4, lr
    6d62:	f000 81b3 	beq.w	70cc <_malloc_r+0x3e4>
    6d66:	6863      	ldr	r3, [r4, #4]
    6d68:	f023 0303 	bic.w	r3, r3, #3
    6d6c:	1b5a      	subs	r2, r3, r5
    6d6e:	2a0f      	cmp	r2, #15
    6d70:	f300 8199 	bgt.w	70a6 <_malloc_r+0x3be>
    6d74:	2a00      	cmp	r2, #0
    6d76:	f8c1 e014 	str.w	lr, [r1, #20]
    6d7a:	f8c1 e010 	str.w	lr, [r1, #16]
    6d7e:	f280 809e 	bge.w	6ebe <_malloc_r+0x1d6>
    6d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6d86:	f080 8167 	bcs.w	7058 <_malloc_r+0x370>
    6d8a:	08db      	lsrs	r3, r3, #3
    6d8c:	f103 0c01 	add.w	ip, r3, #1
    6d90:	2201      	movs	r2, #1
    6d92:	109b      	asrs	r3, r3, #2
    6d94:	fa02 f303 	lsl.w	r3, r2, r3
    6d98:	684a      	ldr	r2, [r1, #4]
    6d9a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    6d9e:	f8c4 8008 	str.w	r8, [r4, #8]
    6da2:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    6da6:	431a      	orrs	r2, r3
    6da8:	f1a9 0308 	sub.w	r3, r9, #8
    6dac:	60e3      	str	r3, [r4, #12]
    6dae:	604a      	str	r2, [r1, #4]
    6db0:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    6db4:	f8c8 400c 	str.w	r4, [r8, #12]
    6db8:	1083      	asrs	r3, r0, #2
    6dba:	2401      	movs	r4, #1
    6dbc:	409c      	lsls	r4, r3
    6dbe:	4294      	cmp	r4, r2
    6dc0:	f200 808a 	bhi.w	6ed8 <_malloc_r+0x1f0>
    6dc4:	4214      	tst	r4, r2
    6dc6:	d106      	bne.n	6dd6 <_malloc_r+0xee>
    6dc8:	f020 0003 	bic.w	r0, r0, #3
    6dcc:	0064      	lsls	r4, r4, #1
    6dce:	4214      	tst	r4, r2
    6dd0:	f100 0004 	add.w	r0, r0, #4
    6dd4:	d0fa      	beq.n	6dcc <_malloc_r+0xe4>
    6dd6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    6dda:	46cc      	mov	ip, r9
    6ddc:	4680      	mov	r8, r0
    6dde:	f8dc 100c 	ldr.w	r1, [ip, #12]
    6de2:	458c      	cmp	ip, r1
    6de4:	d107      	bne.n	6df6 <_malloc_r+0x10e>
    6de6:	e173      	b.n	70d0 <_malloc_r+0x3e8>
    6de8:	2a00      	cmp	r2, #0
    6dea:	f280 8181 	bge.w	70f0 <_malloc_r+0x408>
    6dee:	68c9      	ldr	r1, [r1, #12]
    6df0:	458c      	cmp	ip, r1
    6df2:	f000 816d 	beq.w	70d0 <_malloc_r+0x3e8>
    6df6:	684b      	ldr	r3, [r1, #4]
    6df8:	f023 0303 	bic.w	r3, r3, #3
    6dfc:	1b5a      	subs	r2, r3, r5
    6dfe:	2a0f      	cmp	r2, #15
    6e00:	ddf2      	ble.n	6de8 <_malloc_r+0x100>
    6e02:	460c      	mov	r4, r1
    6e04:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    6e08:	f854 8f08 	ldr.w	r8, [r4, #8]!
    6e0c:	194b      	adds	r3, r1, r5
    6e0e:	f045 0501 	orr.w	r5, r5, #1
    6e12:	604d      	str	r5, [r1, #4]
    6e14:	f042 0101 	orr.w	r1, r2, #1
    6e18:	f8c8 c00c 	str.w	ip, [r8, #12]
    6e1c:	4630      	mov	r0, r6
    6e1e:	f8cc 8008 	str.w	r8, [ip, #8]
    6e22:	617b      	str	r3, [r7, #20]
    6e24:	613b      	str	r3, [r7, #16]
    6e26:	f8c3 e00c 	str.w	lr, [r3, #12]
    6e2a:	f8c3 e008 	str.w	lr, [r3, #8]
    6e2e:	6059      	str	r1, [r3, #4]
    6e30:	509a      	str	r2, [r3, r2]
    6e32:	f000 fb0d 	bl	7450 <__malloc_unlock>
    6e36:	e01f      	b.n	6e78 <_malloc_r+0x190>
    6e38:	2910      	cmp	r1, #16
    6e3a:	d821      	bhi.n	6e80 <_malloc_r+0x198>
    6e3c:	f000 fb06 	bl	744c <__malloc_lock>
    6e40:	2510      	movs	r5, #16
    6e42:	2306      	movs	r3, #6
    6e44:	2002      	movs	r0, #2
    6e46:	4f7e      	ldr	r7, [pc, #504]	; (7040 <_malloc_r+0x358>)
    6e48:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    6e4c:	f1a3 0208 	sub.w	r2, r3, #8
    6e50:	685c      	ldr	r4, [r3, #4]
    6e52:	4294      	cmp	r4, r2
    6e54:	f000 8145 	beq.w	70e2 <_malloc_r+0x3fa>
    6e58:	6863      	ldr	r3, [r4, #4]
    6e5a:	68e1      	ldr	r1, [r4, #12]
    6e5c:	68a5      	ldr	r5, [r4, #8]
    6e5e:	f023 0303 	bic.w	r3, r3, #3
    6e62:	4423      	add	r3, r4
    6e64:	4630      	mov	r0, r6
    6e66:	685a      	ldr	r2, [r3, #4]
    6e68:	60e9      	str	r1, [r5, #12]
    6e6a:	f042 0201 	orr.w	r2, r2, #1
    6e6e:	608d      	str	r5, [r1, #8]
    6e70:	605a      	str	r2, [r3, #4]
    6e72:	f000 faed 	bl	7450 <__malloc_unlock>
    6e76:	3408      	adds	r4, #8
    6e78:	4620      	mov	r0, r4
    6e7a:	b003      	add	sp, #12
    6e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e80:	2400      	movs	r4, #0
    6e82:	230c      	movs	r3, #12
    6e84:	4620      	mov	r0, r4
    6e86:	6033      	str	r3, [r6, #0]
    6e88:	b003      	add	sp, #12
    6e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e8e:	2380      	movs	r3, #128	; 0x80
    6e90:	f04f 0e40 	mov.w	lr, #64	; 0x40
    6e94:	203f      	movs	r0, #63	; 0x3f
    6e96:	e749      	b.n	6d2c <_malloc_r+0x44>
    6e98:	4670      	mov	r0, lr
    6e9a:	e75d      	b.n	6d58 <_malloc_r+0x70>
    6e9c:	4423      	add	r3, r4
    6e9e:	68e1      	ldr	r1, [r4, #12]
    6ea0:	685a      	ldr	r2, [r3, #4]
    6ea2:	68a5      	ldr	r5, [r4, #8]
    6ea4:	f042 0201 	orr.w	r2, r2, #1
    6ea8:	60e9      	str	r1, [r5, #12]
    6eaa:	4630      	mov	r0, r6
    6eac:	608d      	str	r5, [r1, #8]
    6eae:	605a      	str	r2, [r3, #4]
    6eb0:	f000 face 	bl	7450 <__malloc_unlock>
    6eb4:	3408      	adds	r4, #8
    6eb6:	4620      	mov	r0, r4
    6eb8:	b003      	add	sp, #12
    6eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ebe:	4423      	add	r3, r4
    6ec0:	4630      	mov	r0, r6
    6ec2:	685a      	ldr	r2, [r3, #4]
    6ec4:	f042 0201 	orr.w	r2, r2, #1
    6ec8:	605a      	str	r2, [r3, #4]
    6eca:	f000 fac1 	bl	7450 <__malloc_unlock>
    6ece:	3408      	adds	r4, #8
    6ed0:	4620      	mov	r0, r4
    6ed2:	b003      	add	sp, #12
    6ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ed8:	68bc      	ldr	r4, [r7, #8]
    6eda:	6863      	ldr	r3, [r4, #4]
    6edc:	f023 0803 	bic.w	r8, r3, #3
    6ee0:	45a8      	cmp	r8, r5
    6ee2:	d304      	bcc.n	6eee <_malloc_r+0x206>
    6ee4:	ebc5 0308 	rsb	r3, r5, r8
    6ee8:	2b0f      	cmp	r3, #15
    6eea:	f300 808c 	bgt.w	7006 <_malloc_r+0x31e>
    6eee:	4b55      	ldr	r3, [pc, #340]	; (7044 <_malloc_r+0x35c>)
    6ef0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 7054 <_malloc_r+0x36c>
    6ef4:	681a      	ldr	r2, [r3, #0]
    6ef6:	f8d9 3000 	ldr.w	r3, [r9]
    6efa:	3301      	adds	r3, #1
    6efc:	442a      	add	r2, r5
    6efe:	eb04 0a08 	add.w	sl, r4, r8
    6f02:	f000 8160 	beq.w	71c6 <_malloc_r+0x4de>
    6f06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6f0a:	320f      	adds	r2, #15
    6f0c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    6f10:	f022 020f 	bic.w	r2, r2, #15
    6f14:	4611      	mov	r1, r2
    6f16:	4630      	mov	r0, r6
    6f18:	9201      	str	r2, [sp, #4]
    6f1a:	f000 fc93 	bl	7844 <_sbrk_r>
    6f1e:	f1b0 3fff 	cmp.w	r0, #4294967295
    6f22:	4683      	mov	fp, r0
    6f24:	9a01      	ldr	r2, [sp, #4]
    6f26:	f000 8158 	beq.w	71da <_malloc_r+0x4f2>
    6f2a:	4582      	cmp	sl, r0
    6f2c:	f200 80fc 	bhi.w	7128 <_malloc_r+0x440>
    6f30:	4b45      	ldr	r3, [pc, #276]	; (7048 <_malloc_r+0x360>)
    6f32:	6819      	ldr	r1, [r3, #0]
    6f34:	45da      	cmp	sl, fp
    6f36:	4411      	add	r1, r2
    6f38:	6019      	str	r1, [r3, #0]
    6f3a:	f000 8153 	beq.w	71e4 <_malloc_r+0x4fc>
    6f3e:	f8d9 0000 	ldr.w	r0, [r9]
    6f42:	f8df e110 	ldr.w	lr, [pc, #272]	; 7054 <_malloc_r+0x36c>
    6f46:	3001      	adds	r0, #1
    6f48:	bf1b      	ittet	ne
    6f4a:	ebca 0a0b 	rsbne	sl, sl, fp
    6f4e:	4451      	addne	r1, sl
    6f50:	f8ce b000 	streq.w	fp, [lr]
    6f54:	6019      	strne	r1, [r3, #0]
    6f56:	f01b 0107 	ands.w	r1, fp, #7
    6f5a:	f000 8117 	beq.w	718c <_malloc_r+0x4a4>
    6f5e:	f1c1 0008 	rsb	r0, r1, #8
    6f62:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    6f66:	4483      	add	fp, r0
    6f68:	3108      	adds	r1, #8
    6f6a:	445a      	add	r2, fp
    6f6c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    6f70:	ebc2 0901 	rsb	r9, r2, r1
    6f74:	4649      	mov	r1, r9
    6f76:	4630      	mov	r0, r6
    6f78:	9301      	str	r3, [sp, #4]
    6f7a:	f000 fc63 	bl	7844 <_sbrk_r>
    6f7e:	1c43      	adds	r3, r0, #1
    6f80:	9b01      	ldr	r3, [sp, #4]
    6f82:	f000 813f 	beq.w	7204 <_malloc_r+0x51c>
    6f86:	ebcb 0200 	rsb	r2, fp, r0
    6f8a:	444a      	add	r2, r9
    6f8c:	f042 0201 	orr.w	r2, r2, #1
    6f90:	6819      	ldr	r1, [r3, #0]
    6f92:	f8c7 b008 	str.w	fp, [r7, #8]
    6f96:	4449      	add	r1, r9
    6f98:	42bc      	cmp	r4, r7
    6f9a:	f8cb 2004 	str.w	r2, [fp, #4]
    6f9e:	6019      	str	r1, [r3, #0]
    6fa0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 7048 <_malloc_r+0x360>
    6fa4:	d016      	beq.n	6fd4 <_malloc_r+0x2ec>
    6fa6:	f1b8 0f0f 	cmp.w	r8, #15
    6faa:	f240 80fd 	bls.w	71a8 <_malloc_r+0x4c0>
    6fae:	6862      	ldr	r2, [r4, #4]
    6fb0:	f1a8 030c 	sub.w	r3, r8, #12
    6fb4:	f023 0307 	bic.w	r3, r3, #7
    6fb8:	18e0      	adds	r0, r4, r3
    6fba:	f002 0201 	and.w	r2, r2, #1
    6fbe:	f04f 0e05 	mov.w	lr, #5
    6fc2:	431a      	orrs	r2, r3
    6fc4:	2b0f      	cmp	r3, #15
    6fc6:	6062      	str	r2, [r4, #4]
    6fc8:	f8c0 e004 	str.w	lr, [r0, #4]
    6fcc:	f8c0 e008 	str.w	lr, [r0, #8]
    6fd0:	f200 811c 	bhi.w	720c <_malloc_r+0x524>
    6fd4:	4b1d      	ldr	r3, [pc, #116]	; (704c <_malloc_r+0x364>)
    6fd6:	68bc      	ldr	r4, [r7, #8]
    6fd8:	681a      	ldr	r2, [r3, #0]
    6fda:	4291      	cmp	r1, r2
    6fdc:	bf88      	it	hi
    6fde:	6019      	strhi	r1, [r3, #0]
    6fe0:	4b1b      	ldr	r3, [pc, #108]	; (7050 <_malloc_r+0x368>)
    6fe2:	681a      	ldr	r2, [r3, #0]
    6fe4:	4291      	cmp	r1, r2
    6fe6:	6862      	ldr	r2, [r4, #4]
    6fe8:	bf88      	it	hi
    6fea:	6019      	strhi	r1, [r3, #0]
    6fec:	f022 0203 	bic.w	r2, r2, #3
    6ff0:	4295      	cmp	r5, r2
    6ff2:	eba2 0305 	sub.w	r3, r2, r5
    6ff6:	d801      	bhi.n	6ffc <_malloc_r+0x314>
    6ff8:	2b0f      	cmp	r3, #15
    6ffa:	dc04      	bgt.n	7006 <_malloc_r+0x31e>
    6ffc:	4630      	mov	r0, r6
    6ffe:	f000 fa27 	bl	7450 <__malloc_unlock>
    7002:	2400      	movs	r4, #0
    7004:	e738      	b.n	6e78 <_malloc_r+0x190>
    7006:	1962      	adds	r2, r4, r5
    7008:	f043 0301 	orr.w	r3, r3, #1
    700c:	f045 0501 	orr.w	r5, r5, #1
    7010:	6065      	str	r5, [r4, #4]
    7012:	4630      	mov	r0, r6
    7014:	60ba      	str	r2, [r7, #8]
    7016:	6053      	str	r3, [r2, #4]
    7018:	f000 fa1a 	bl	7450 <__malloc_unlock>
    701c:	3408      	adds	r4, #8
    701e:	4620      	mov	r0, r4
    7020:	b003      	add	sp, #12
    7022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7026:	2b14      	cmp	r3, #20
    7028:	d971      	bls.n	710e <_malloc_r+0x426>
    702a:	2b54      	cmp	r3, #84	; 0x54
    702c:	f200 80a4 	bhi.w	7178 <_malloc_r+0x490>
    7030:	0b28      	lsrs	r0, r5, #12
    7032:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    7036:	ea4f 034e 	mov.w	r3, lr, lsl #1
    703a:	306e      	adds	r0, #110	; 0x6e
    703c:	e676      	b.n	6d2c <_malloc_r+0x44>
    703e:	bf00      	nop
    7040:	1fff0dd8 	.word	0x1fff0dd8
    7044:	1fff1a38 	.word	0x1fff1a38
    7048:	1fff1a3c 	.word	0x1fff1a3c
    704c:	1fff1a34 	.word	0x1fff1a34
    7050:	1fff1a30 	.word	0x1fff1a30
    7054:	1fff11e4 	.word	0x1fff11e4
    7058:	0a5a      	lsrs	r2, r3, #9
    705a:	2a04      	cmp	r2, #4
    705c:	d95e      	bls.n	711c <_malloc_r+0x434>
    705e:	2a14      	cmp	r2, #20
    7060:	f200 80b3 	bhi.w	71ca <_malloc_r+0x4e2>
    7064:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    7068:	0049      	lsls	r1, r1, #1
    706a:	325b      	adds	r2, #91	; 0x5b
    706c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    7070:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    7074:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 7254 <_malloc_r+0x56c>
    7078:	f1ac 0c08 	sub.w	ip, ip, #8
    707c:	458c      	cmp	ip, r1
    707e:	f000 8088 	beq.w	7192 <_malloc_r+0x4aa>
    7082:	684a      	ldr	r2, [r1, #4]
    7084:	f022 0203 	bic.w	r2, r2, #3
    7088:	4293      	cmp	r3, r2
    708a:	d202      	bcs.n	7092 <_malloc_r+0x3aa>
    708c:	6889      	ldr	r1, [r1, #8]
    708e:	458c      	cmp	ip, r1
    7090:	d1f7      	bne.n	7082 <_malloc_r+0x39a>
    7092:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    7096:	687a      	ldr	r2, [r7, #4]
    7098:	f8c4 c00c 	str.w	ip, [r4, #12]
    709c:	60a1      	str	r1, [r4, #8]
    709e:	f8cc 4008 	str.w	r4, [ip, #8]
    70a2:	60cc      	str	r4, [r1, #12]
    70a4:	e688      	b.n	6db8 <_malloc_r+0xd0>
    70a6:	1963      	adds	r3, r4, r5
    70a8:	f042 0701 	orr.w	r7, r2, #1
    70ac:	f045 0501 	orr.w	r5, r5, #1
    70b0:	6065      	str	r5, [r4, #4]
    70b2:	4630      	mov	r0, r6
    70b4:	614b      	str	r3, [r1, #20]
    70b6:	610b      	str	r3, [r1, #16]
    70b8:	f8c3 e00c 	str.w	lr, [r3, #12]
    70bc:	f8c3 e008 	str.w	lr, [r3, #8]
    70c0:	605f      	str	r7, [r3, #4]
    70c2:	509a      	str	r2, [r3, r2]
    70c4:	3408      	adds	r4, #8
    70c6:	f000 f9c3 	bl	7450 <__malloc_unlock>
    70ca:	e6d5      	b.n	6e78 <_malloc_r+0x190>
    70cc:	684a      	ldr	r2, [r1, #4]
    70ce:	e673      	b.n	6db8 <_malloc_r+0xd0>
    70d0:	f108 0801 	add.w	r8, r8, #1
    70d4:	f018 0f03 	tst.w	r8, #3
    70d8:	f10c 0c08 	add.w	ip, ip, #8
    70dc:	f47f ae7f 	bne.w	6dde <_malloc_r+0xf6>
    70e0:	e030      	b.n	7144 <_malloc_r+0x45c>
    70e2:	68dc      	ldr	r4, [r3, #12]
    70e4:	42a3      	cmp	r3, r4
    70e6:	bf08      	it	eq
    70e8:	3002      	addeq	r0, #2
    70ea:	f43f ae35 	beq.w	6d58 <_malloc_r+0x70>
    70ee:	e6b3      	b.n	6e58 <_malloc_r+0x170>
    70f0:	440b      	add	r3, r1
    70f2:	460c      	mov	r4, r1
    70f4:	685a      	ldr	r2, [r3, #4]
    70f6:	68c9      	ldr	r1, [r1, #12]
    70f8:	f854 5f08 	ldr.w	r5, [r4, #8]!
    70fc:	f042 0201 	orr.w	r2, r2, #1
    7100:	605a      	str	r2, [r3, #4]
    7102:	4630      	mov	r0, r6
    7104:	60e9      	str	r1, [r5, #12]
    7106:	608d      	str	r5, [r1, #8]
    7108:	f000 f9a2 	bl	7450 <__malloc_unlock>
    710c:	e6b4      	b.n	6e78 <_malloc_r+0x190>
    710e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    7112:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    7116:	ea4f 034e 	mov.w	r3, lr, lsl #1
    711a:	e607      	b.n	6d2c <_malloc_r+0x44>
    711c:	099a      	lsrs	r2, r3, #6
    711e:	f102 0139 	add.w	r1, r2, #57	; 0x39
    7122:	0049      	lsls	r1, r1, #1
    7124:	3238      	adds	r2, #56	; 0x38
    7126:	e7a1      	b.n	706c <_malloc_r+0x384>
    7128:	42bc      	cmp	r4, r7
    712a:	4b4a      	ldr	r3, [pc, #296]	; (7254 <_malloc_r+0x56c>)
    712c:	f43f af00 	beq.w	6f30 <_malloc_r+0x248>
    7130:	689c      	ldr	r4, [r3, #8]
    7132:	6862      	ldr	r2, [r4, #4]
    7134:	f022 0203 	bic.w	r2, r2, #3
    7138:	e75a      	b.n	6ff0 <_malloc_r+0x308>
    713a:	f859 3908 	ldr.w	r3, [r9], #-8
    713e:	4599      	cmp	r9, r3
    7140:	f040 8082 	bne.w	7248 <_malloc_r+0x560>
    7144:	f010 0f03 	tst.w	r0, #3
    7148:	f100 30ff 	add.w	r0, r0, #4294967295
    714c:	d1f5      	bne.n	713a <_malloc_r+0x452>
    714e:	687b      	ldr	r3, [r7, #4]
    7150:	ea23 0304 	bic.w	r3, r3, r4
    7154:	607b      	str	r3, [r7, #4]
    7156:	0064      	lsls	r4, r4, #1
    7158:	429c      	cmp	r4, r3
    715a:	f63f aebd 	bhi.w	6ed8 <_malloc_r+0x1f0>
    715e:	2c00      	cmp	r4, #0
    7160:	f43f aeba 	beq.w	6ed8 <_malloc_r+0x1f0>
    7164:	421c      	tst	r4, r3
    7166:	4640      	mov	r0, r8
    7168:	f47f ae35 	bne.w	6dd6 <_malloc_r+0xee>
    716c:	0064      	lsls	r4, r4, #1
    716e:	421c      	tst	r4, r3
    7170:	f100 0004 	add.w	r0, r0, #4
    7174:	d0fa      	beq.n	716c <_malloc_r+0x484>
    7176:	e62e      	b.n	6dd6 <_malloc_r+0xee>
    7178:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    717c:	d818      	bhi.n	71b0 <_malloc_r+0x4c8>
    717e:	0be8      	lsrs	r0, r5, #15
    7180:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    7184:	ea4f 034e 	mov.w	r3, lr, lsl #1
    7188:	3077      	adds	r0, #119	; 0x77
    718a:	e5cf      	b.n	6d2c <_malloc_r+0x44>
    718c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7190:	e6eb      	b.n	6f6a <_malloc_r+0x282>
    7192:	2101      	movs	r1, #1
    7194:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7198:	1092      	asrs	r2, r2, #2
    719a:	fa01 f202 	lsl.w	r2, r1, r2
    719e:	431a      	orrs	r2, r3
    71a0:	f8c8 2004 	str.w	r2, [r8, #4]
    71a4:	4661      	mov	r1, ip
    71a6:	e777      	b.n	7098 <_malloc_r+0x3b0>
    71a8:	2301      	movs	r3, #1
    71aa:	f8cb 3004 	str.w	r3, [fp, #4]
    71ae:	e725      	b.n	6ffc <_malloc_r+0x314>
    71b0:	f240 5254 	movw	r2, #1364	; 0x554
    71b4:	4293      	cmp	r3, r2
    71b6:	d820      	bhi.n	71fa <_malloc_r+0x512>
    71b8:	0ca8      	lsrs	r0, r5, #18
    71ba:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    71be:	ea4f 034e 	mov.w	r3, lr, lsl #1
    71c2:	307c      	adds	r0, #124	; 0x7c
    71c4:	e5b2      	b.n	6d2c <_malloc_r+0x44>
    71c6:	3210      	adds	r2, #16
    71c8:	e6a4      	b.n	6f14 <_malloc_r+0x22c>
    71ca:	2a54      	cmp	r2, #84	; 0x54
    71cc:	d826      	bhi.n	721c <_malloc_r+0x534>
    71ce:	0b1a      	lsrs	r2, r3, #12
    71d0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    71d4:	0049      	lsls	r1, r1, #1
    71d6:	326e      	adds	r2, #110	; 0x6e
    71d8:	e748      	b.n	706c <_malloc_r+0x384>
    71da:	68bc      	ldr	r4, [r7, #8]
    71dc:	6862      	ldr	r2, [r4, #4]
    71de:	f022 0203 	bic.w	r2, r2, #3
    71e2:	e705      	b.n	6ff0 <_malloc_r+0x308>
    71e4:	f3ca 000b 	ubfx	r0, sl, #0, #12
    71e8:	2800      	cmp	r0, #0
    71ea:	f47f aea8 	bne.w	6f3e <_malloc_r+0x256>
    71ee:	4442      	add	r2, r8
    71f0:	68bb      	ldr	r3, [r7, #8]
    71f2:	f042 0201 	orr.w	r2, r2, #1
    71f6:	605a      	str	r2, [r3, #4]
    71f8:	e6ec      	b.n	6fd4 <_malloc_r+0x2ec>
    71fa:	23fe      	movs	r3, #254	; 0xfe
    71fc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    7200:	207e      	movs	r0, #126	; 0x7e
    7202:	e593      	b.n	6d2c <_malloc_r+0x44>
    7204:	2201      	movs	r2, #1
    7206:	f04f 0900 	mov.w	r9, #0
    720a:	e6c1      	b.n	6f90 <_malloc_r+0x2a8>
    720c:	f104 0108 	add.w	r1, r4, #8
    7210:	4630      	mov	r0, r6
    7212:	f003 f95d 	bl	a4d0 <_free_r>
    7216:	f8d9 1000 	ldr.w	r1, [r9]
    721a:	e6db      	b.n	6fd4 <_malloc_r+0x2ec>
    721c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    7220:	d805      	bhi.n	722e <_malloc_r+0x546>
    7222:	0bda      	lsrs	r2, r3, #15
    7224:	f102 0178 	add.w	r1, r2, #120	; 0x78
    7228:	0049      	lsls	r1, r1, #1
    722a:	3277      	adds	r2, #119	; 0x77
    722c:	e71e      	b.n	706c <_malloc_r+0x384>
    722e:	f240 5154 	movw	r1, #1364	; 0x554
    7232:	428a      	cmp	r2, r1
    7234:	d805      	bhi.n	7242 <_malloc_r+0x55a>
    7236:	0c9a      	lsrs	r2, r3, #18
    7238:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    723c:	0049      	lsls	r1, r1, #1
    723e:	327c      	adds	r2, #124	; 0x7c
    7240:	e714      	b.n	706c <_malloc_r+0x384>
    7242:	21fe      	movs	r1, #254	; 0xfe
    7244:	227e      	movs	r2, #126	; 0x7e
    7246:	e711      	b.n	706c <_malloc_r+0x384>
    7248:	687b      	ldr	r3, [r7, #4]
    724a:	e784      	b.n	7156 <_malloc_r+0x46e>
    724c:	08e8      	lsrs	r0, r5, #3
    724e:	1c43      	adds	r3, r0, #1
    7250:	005b      	lsls	r3, r3, #1
    7252:	e5f8      	b.n	6e46 <_malloc_r+0x15e>
    7254:	1fff0dd8 	.word	0x1fff0dd8

00007258 <__ascii_mbtowc>:
    7258:	b082      	sub	sp, #8
    725a:	b149      	cbz	r1, 7270 <__ascii_mbtowc+0x18>
    725c:	b15a      	cbz	r2, 7276 <__ascii_mbtowc+0x1e>
    725e:	b16b      	cbz	r3, 727c <__ascii_mbtowc+0x24>
    7260:	7813      	ldrb	r3, [r2, #0]
    7262:	600b      	str	r3, [r1, #0]
    7264:	7812      	ldrb	r2, [r2, #0]
    7266:	1c10      	adds	r0, r2, #0
    7268:	bf18      	it	ne
    726a:	2001      	movne	r0, #1
    726c:	b002      	add	sp, #8
    726e:	4770      	bx	lr
    7270:	a901      	add	r1, sp, #4
    7272:	2a00      	cmp	r2, #0
    7274:	d1f3      	bne.n	725e <__ascii_mbtowc+0x6>
    7276:	4610      	mov	r0, r2
    7278:	b002      	add	sp, #8
    727a:	4770      	bx	lr
    727c:	f06f 0001 	mvn.w	r0, #1
    7280:	e7f4      	b.n	726c <__ascii_mbtowc+0x14>
    7282:	bf00      	nop

00007284 <memcmp>:
    7284:	2a03      	cmp	r2, #3
    7286:	b470      	push	{r4, r5, r6}
    7288:	d926      	bls.n	72d8 <memcmp+0x54>
    728a:	ea40 0301 	orr.w	r3, r0, r1
    728e:	079b      	lsls	r3, r3, #30
    7290:	d011      	beq.n	72b6 <memcmp+0x32>
    7292:	7804      	ldrb	r4, [r0, #0]
    7294:	780d      	ldrb	r5, [r1, #0]
    7296:	42ac      	cmp	r4, r5
    7298:	d122      	bne.n	72e0 <memcmp+0x5c>
    729a:	4402      	add	r2, r0
    729c:	1c43      	adds	r3, r0, #1
    729e:	e005      	b.n	72ac <memcmp+0x28>
    72a0:	f813 4b01 	ldrb.w	r4, [r3], #1
    72a4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    72a8:	42ac      	cmp	r4, r5
    72aa:	d119      	bne.n	72e0 <memcmp+0x5c>
    72ac:	4293      	cmp	r3, r2
    72ae:	d1f7      	bne.n	72a0 <memcmp+0x1c>
    72b0:	2000      	movs	r0, #0
    72b2:	bc70      	pop	{r4, r5, r6}
    72b4:	4770      	bx	lr
    72b6:	460c      	mov	r4, r1
    72b8:	4603      	mov	r3, r0
    72ba:	681e      	ldr	r6, [r3, #0]
    72bc:	6825      	ldr	r5, [r4, #0]
    72be:	42ae      	cmp	r6, r5
    72c0:	4618      	mov	r0, r3
    72c2:	4621      	mov	r1, r4
    72c4:	f103 0304 	add.w	r3, r3, #4
    72c8:	f104 0404 	add.w	r4, r4, #4
    72cc:	d1e1      	bne.n	7292 <memcmp+0xe>
    72ce:	3a04      	subs	r2, #4
    72d0:	2a03      	cmp	r2, #3
    72d2:	4618      	mov	r0, r3
    72d4:	4621      	mov	r1, r4
    72d6:	d8f0      	bhi.n	72ba <memcmp+0x36>
    72d8:	2a00      	cmp	r2, #0
    72da:	d1da      	bne.n	7292 <memcmp+0xe>
    72dc:	4610      	mov	r0, r2
    72de:	e7e8      	b.n	72b2 <memcmp+0x2e>
    72e0:	1b60      	subs	r0, r4, r5
    72e2:	bc70      	pop	{r4, r5, r6}
    72e4:	4770      	bx	lr
    72e6:	bf00      	nop

000072e8 <memmove>:
    72e8:	4288      	cmp	r0, r1
    72ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    72ec:	d90d      	bls.n	730a <memmove+0x22>
    72ee:	188b      	adds	r3, r1, r2
    72f0:	4298      	cmp	r0, r3
    72f2:	d20a      	bcs.n	730a <memmove+0x22>
    72f4:	1881      	adds	r1, r0, r2
    72f6:	2a00      	cmp	r2, #0
    72f8:	d051      	beq.n	739e <memmove+0xb6>
    72fa:	1a9a      	subs	r2, r3, r2
    72fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    7300:	f801 4d01 	strb.w	r4, [r1, #-1]!
    7304:	4293      	cmp	r3, r2
    7306:	d1f9      	bne.n	72fc <memmove+0x14>
    7308:	bdf0      	pop	{r4, r5, r6, r7, pc}
    730a:	2a0f      	cmp	r2, #15
    730c:	d948      	bls.n	73a0 <memmove+0xb8>
    730e:	ea41 0300 	orr.w	r3, r1, r0
    7312:	079b      	lsls	r3, r3, #30
    7314:	d146      	bne.n	73a4 <memmove+0xbc>
    7316:	f100 0410 	add.w	r4, r0, #16
    731a:	f101 0310 	add.w	r3, r1, #16
    731e:	4615      	mov	r5, r2
    7320:	f853 6c10 	ldr.w	r6, [r3, #-16]
    7324:	f844 6c10 	str.w	r6, [r4, #-16]
    7328:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    732c:	f844 6c0c 	str.w	r6, [r4, #-12]
    7330:	f853 6c08 	ldr.w	r6, [r3, #-8]
    7334:	f844 6c08 	str.w	r6, [r4, #-8]
    7338:	3d10      	subs	r5, #16
    733a:	f853 6c04 	ldr.w	r6, [r3, #-4]
    733e:	f844 6c04 	str.w	r6, [r4, #-4]
    7342:	2d0f      	cmp	r5, #15
    7344:	f103 0310 	add.w	r3, r3, #16
    7348:	f104 0410 	add.w	r4, r4, #16
    734c:	d8e8      	bhi.n	7320 <memmove+0x38>
    734e:	f1a2 0310 	sub.w	r3, r2, #16
    7352:	f023 030f 	bic.w	r3, r3, #15
    7356:	f002 0e0f 	and.w	lr, r2, #15
    735a:	3310      	adds	r3, #16
    735c:	f1be 0f03 	cmp.w	lr, #3
    7360:	4419      	add	r1, r3
    7362:	4403      	add	r3, r0
    7364:	d921      	bls.n	73aa <memmove+0xc2>
    7366:	1f1e      	subs	r6, r3, #4
    7368:	460d      	mov	r5, r1
    736a:	4674      	mov	r4, lr
    736c:	3c04      	subs	r4, #4
    736e:	f855 7b04 	ldr.w	r7, [r5], #4
    7372:	f846 7f04 	str.w	r7, [r6, #4]!
    7376:	2c03      	cmp	r4, #3
    7378:	d8f8      	bhi.n	736c <memmove+0x84>
    737a:	f1ae 0404 	sub.w	r4, lr, #4
    737e:	f024 0403 	bic.w	r4, r4, #3
    7382:	3404      	adds	r4, #4
    7384:	4423      	add	r3, r4
    7386:	4421      	add	r1, r4
    7388:	f002 0203 	and.w	r2, r2, #3
    738c:	b162      	cbz	r2, 73a8 <memmove+0xc0>
    738e:	3b01      	subs	r3, #1
    7390:	440a      	add	r2, r1
    7392:	f811 4b01 	ldrb.w	r4, [r1], #1
    7396:	f803 4f01 	strb.w	r4, [r3, #1]!
    739a:	428a      	cmp	r2, r1
    739c:	d1f9      	bne.n	7392 <memmove+0xaa>
    739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73a0:	4603      	mov	r3, r0
    73a2:	e7f3      	b.n	738c <memmove+0xa4>
    73a4:	4603      	mov	r3, r0
    73a6:	e7f2      	b.n	738e <memmove+0xa6>
    73a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73aa:	4672      	mov	r2, lr
    73ac:	e7ee      	b.n	738c <memmove+0xa4>
    73ae:	bf00      	nop

000073b0 <memset>:
    73b0:	b470      	push	{r4, r5, r6}
    73b2:	0784      	lsls	r4, r0, #30
    73b4:	d046      	beq.n	7444 <memset+0x94>
    73b6:	1e54      	subs	r4, r2, #1
    73b8:	2a00      	cmp	r2, #0
    73ba:	d041      	beq.n	7440 <memset+0x90>
    73bc:	b2cd      	uxtb	r5, r1
    73be:	4603      	mov	r3, r0
    73c0:	e002      	b.n	73c8 <memset+0x18>
    73c2:	1e62      	subs	r2, r4, #1
    73c4:	b3e4      	cbz	r4, 7440 <memset+0x90>
    73c6:	4614      	mov	r4, r2
    73c8:	f803 5b01 	strb.w	r5, [r3], #1
    73cc:	079a      	lsls	r2, r3, #30
    73ce:	d1f8      	bne.n	73c2 <memset+0x12>
    73d0:	2c03      	cmp	r4, #3
    73d2:	d92e      	bls.n	7432 <memset+0x82>
    73d4:	b2cd      	uxtb	r5, r1
    73d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    73da:	2c0f      	cmp	r4, #15
    73dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    73e0:	d919      	bls.n	7416 <memset+0x66>
    73e2:	f103 0210 	add.w	r2, r3, #16
    73e6:	4626      	mov	r6, r4
    73e8:	3e10      	subs	r6, #16
    73ea:	2e0f      	cmp	r6, #15
    73ec:	f842 5c10 	str.w	r5, [r2, #-16]
    73f0:	f842 5c0c 	str.w	r5, [r2, #-12]
    73f4:	f842 5c08 	str.w	r5, [r2, #-8]
    73f8:	f842 5c04 	str.w	r5, [r2, #-4]
    73fc:	f102 0210 	add.w	r2, r2, #16
    7400:	d8f2      	bhi.n	73e8 <memset+0x38>
    7402:	f1a4 0210 	sub.w	r2, r4, #16
    7406:	f022 020f 	bic.w	r2, r2, #15
    740a:	f004 040f 	and.w	r4, r4, #15
    740e:	3210      	adds	r2, #16
    7410:	2c03      	cmp	r4, #3
    7412:	4413      	add	r3, r2
    7414:	d90d      	bls.n	7432 <memset+0x82>
    7416:	461e      	mov	r6, r3
    7418:	4622      	mov	r2, r4
    741a:	3a04      	subs	r2, #4
    741c:	2a03      	cmp	r2, #3
    741e:	f846 5b04 	str.w	r5, [r6], #4
    7422:	d8fa      	bhi.n	741a <memset+0x6a>
    7424:	1f22      	subs	r2, r4, #4
    7426:	f022 0203 	bic.w	r2, r2, #3
    742a:	3204      	adds	r2, #4
    742c:	4413      	add	r3, r2
    742e:	f004 0403 	and.w	r4, r4, #3
    7432:	b12c      	cbz	r4, 7440 <memset+0x90>
    7434:	b2c9      	uxtb	r1, r1
    7436:	441c      	add	r4, r3
    7438:	f803 1b01 	strb.w	r1, [r3], #1
    743c:	42a3      	cmp	r3, r4
    743e:	d1fb      	bne.n	7438 <memset+0x88>
    7440:	bc70      	pop	{r4, r5, r6}
    7442:	4770      	bx	lr
    7444:	4614      	mov	r4, r2
    7446:	4603      	mov	r3, r0
    7448:	e7c2      	b.n	73d0 <memset+0x20>
    744a:	bf00      	nop

0000744c <__malloc_lock>:
    744c:	4770      	bx	lr
    744e:	bf00      	nop

00007450 <__malloc_unlock>:
    7450:	4770      	bx	lr
    7452:	bf00      	nop

00007454 <realloc>:
    7454:	4b02      	ldr	r3, [pc, #8]	; (7460 <realloc+0xc>)
    7456:	460a      	mov	r2, r1
    7458:	4601      	mov	r1, r0
    745a:	6818      	ldr	r0, [r3, #0]
    745c:	f000 b802 	b.w	7464 <_realloc_r>
    7460:	1fff0c68 	.word	0x1fff0c68

00007464 <_realloc_r>:
    7464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7468:	4617      	mov	r7, r2
    746a:	b083      	sub	sp, #12
    746c:	2900      	cmp	r1, #0
    746e:	f000 80c1 	beq.w	75f4 <_realloc_r+0x190>
    7472:	460e      	mov	r6, r1
    7474:	4681      	mov	r9, r0
    7476:	f107 050b 	add.w	r5, r7, #11
    747a:	f7ff ffe7 	bl	744c <__malloc_lock>
    747e:	f856 ec04 	ldr.w	lr, [r6, #-4]
    7482:	2d16      	cmp	r5, #22
    7484:	f02e 0403 	bic.w	r4, lr, #3
    7488:	f1a6 0808 	sub.w	r8, r6, #8
    748c:	d840      	bhi.n	7510 <_realloc_r+0xac>
    748e:	2210      	movs	r2, #16
    7490:	4615      	mov	r5, r2
    7492:	42af      	cmp	r7, r5
    7494:	d841      	bhi.n	751a <_realloc_r+0xb6>
    7496:	4294      	cmp	r4, r2
    7498:	da75      	bge.n	7586 <_realloc_r+0x122>
    749a:	4bc9      	ldr	r3, [pc, #804]	; (77c0 <_realloc_r+0x35c>)
    749c:	6899      	ldr	r1, [r3, #8]
    749e:	eb08 0004 	add.w	r0, r8, r4
    74a2:	4288      	cmp	r0, r1
    74a4:	6841      	ldr	r1, [r0, #4]
    74a6:	f000 80d9 	beq.w	765c <_realloc_r+0x1f8>
    74aa:	f021 0301 	bic.w	r3, r1, #1
    74ae:	4403      	add	r3, r0
    74b0:	685b      	ldr	r3, [r3, #4]
    74b2:	07db      	lsls	r3, r3, #31
    74b4:	d57d      	bpl.n	75b2 <_realloc_r+0x14e>
    74b6:	f01e 0f01 	tst.w	lr, #1
    74ba:	d035      	beq.n	7528 <_realloc_r+0xc4>
    74bc:	4639      	mov	r1, r7
    74be:	4648      	mov	r0, r9
    74c0:	f7ff fc12 	bl	6ce8 <_malloc_r>
    74c4:	4607      	mov	r7, r0
    74c6:	b1e0      	cbz	r0, 7502 <_realloc_r+0x9e>
    74c8:	f856 3c04 	ldr.w	r3, [r6, #-4]
    74cc:	f023 0301 	bic.w	r3, r3, #1
    74d0:	4443      	add	r3, r8
    74d2:	f1a0 0208 	sub.w	r2, r0, #8
    74d6:	429a      	cmp	r2, r3
    74d8:	f000 8144 	beq.w	7764 <_realloc_r+0x300>
    74dc:	1f22      	subs	r2, r4, #4
    74de:	2a24      	cmp	r2, #36	; 0x24
    74e0:	f200 8131 	bhi.w	7746 <_realloc_r+0x2e2>
    74e4:	2a13      	cmp	r2, #19
    74e6:	f200 8104 	bhi.w	76f2 <_realloc_r+0x28e>
    74ea:	4603      	mov	r3, r0
    74ec:	4632      	mov	r2, r6
    74ee:	6811      	ldr	r1, [r2, #0]
    74f0:	6019      	str	r1, [r3, #0]
    74f2:	6851      	ldr	r1, [r2, #4]
    74f4:	6059      	str	r1, [r3, #4]
    74f6:	6892      	ldr	r2, [r2, #8]
    74f8:	609a      	str	r2, [r3, #8]
    74fa:	4631      	mov	r1, r6
    74fc:	4648      	mov	r0, r9
    74fe:	f002 ffe7 	bl	a4d0 <_free_r>
    7502:	4648      	mov	r0, r9
    7504:	f7ff ffa4 	bl	7450 <__malloc_unlock>
    7508:	4638      	mov	r0, r7
    750a:	b003      	add	sp, #12
    750c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7510:	f025 0507 	bic.w	r5, r5, #7
    7514:	2d00      	cmp	r5, #0
    7516:	462a      	mov	r2, r5
    7518:	dabb      	bge.n	7492 <_realloc_r+0x2e>
    751a:	230c      	movs	r3, #12
    751c:	2000      	movs	r0, #0
    751e:	f8c9 3000 	str.w	r3, [r9]
    7522:	b003      	add	sp, #12
    7524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7528:	f856 3c08 	ldr.w	r3, [r6, #-8]
    752c:	ebc3 0a08 	rsb	sl, r3, r8
    7530:	f8da 3004 	ldr.w	r3, [sl, #4]
    7534:	f023 0c03 	bic.w	ip, r3, #3
    7538:	eb04 030c 	add.w	r3, r4, ip
    753c:	4293      	cmp	r3, r2
    753e:	dbbd      	blt.n	74bc <_realloc_r+0x58>
    7540:	4657      	mov	r7, sl
    7542:	f8da 100c 	ldr.w	r1, [sl, #12]
    7546:	f857 0f08 	ldr.w	r0, [r7, #8]!
    754a:	1f22      	subs	r2, r4, #4
    754c:	2a24      	cmp	r2, #36	; 0x24
    754e:	60c1      	str	r1, [r0, #12]
    7550:	6088      	str	r0, [r1, #8]
    7552:	f200 8117 	bhi.w	7784 <_realloc_r+0x320>
    7556:	2a13      	cmp	r2, #19
    7558:	f240 8112 	bls.w	7780 <_realloc_r+0x31c>
    755c:	6831      	ldr	r1, [r6, #0]
    755e:	f8ca 1008 	str.w	r1, [sl, #8]
    7562:	6871      	ldr	r1, [r6, #4]
    7564:	f8ca 100c 	str.w	r1, [sl, #12]
    7568:	2a1b      	cmp	r2, #27
    756a:	f200 812b 	bhi.w	77c4 <_realloc_r+0x360>
    756e:	3608      	adds	r6, #8
    7570:	f10a 0210 	add.w	r2, sl, #16
    7574:	6831      	ldr	r1, [r6, #0]
    7576:	6011      	str	r1, [r2, #0]
    7578:	6871      	ldr	r1, [r6, #4]
    757a:	6051      	str	r1, [r2, #4]
    757c:	68b1      	ldr	r1, [r6, #8]
    757e:	6091      	str	r1, [r2, #8]
    7580:	463e      	mov	r6, r7
    7582:	461c      	mov	r4, r3
    7584:	46d0      	mov	r8, sl
    7586:	1b63      	subs	r3, r4, r5
    7588:	2b0f      	cmp	r3, #15
    758a:	d81d      	bhi.n	75c8 <_realloc_r+0x164>
    758c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7590:	f003 0301 	and.w	r3, r3, #1
    7594:	4323      	orrs	r3, r4
    7596:	4444      	add	r4, r8
    7598:	f8c8 3004 	str.w	r3, [r8, #4]
    759c:	6863      	ldr	r3, [r4, #4]
    759e:	f043 0301 	orr.w	r3, r3, #1
    75a2:	6063      	str	r3, [r4, #4]
    75a4:	4648      	mov	r0, r9
    75a6:	f7ff ff53 	bl	7450 <__malloc_unlock>
    75aa:	4630      	mov	r0, r6
    75ac:	b003      	add	sp, #12
    75ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75b2:	f021 0103 	bic.w	r1, r1, #3
    75b6:	4421      	add	r1, r4
    75b8:	4291      	cmp	r1, r2
    75ba:	db21      	blt.n	7600 <_realloc_r+0x19c>
    75bc:	68c3      	ldr	r3, [r0, #12]
    75be:	6882      	ldr	r2, [r0, #8]
    75c0:	460c      	mov	r4, r1
    75c2:	60d3      	str	r3, [r2, #12]
    75c4:	609a      	str	r2, [r3, #8]
    75c6:	e7de      	b.n	7586 <_realloc_r+0x122>
    75c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    75cc:	eb08 0105 	add.w	r1, r8, r5
    75d0:	f002 0201 	and.w	r2, r2, #1
    75d4:	4315      	orrs	r5, r2
    75d6:	f043 0201 	orr.w	r2, r3, #1
    75da:	440b      	add	r3, r1
    75dc:	f8c8 5004 	str.w	r5, [r8, #4]
    75e0:	604a      	str	r2, [r1, #4]
    75e2:	685a      	ldr	r2, [r3, #4]
    75e4:	f042 0201 	orr.w	r2, r2, #1
    75e8:	3108      	adds	r1, #8
    75ea:	605a      	str	r2, [r3, #4]
    75ec:	4648      	mov	r0, r9
    75ee:	f002 ff6f 	bl	a4d0 <_free_r>
    75f2:	e7d7      	b.n	75a4 <_realloc_r+0x140>
    75f4:	4611      	mov	r1, r2
    75f6:	b003      	add	sp, #12
    75f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75fc:	f7ff bb74 	b.w	6ce8 <_malloc_r>
    7600:	f01e 0f01 	tst.w	lr, #1
    7604:	f47f af5a 	bne.w	74bc <_realloc_r+0x58>
    7608:	f856 3c08 	ldr.w	r3, [r6, #-8]
    760c:	ebc3 0a08 	rsb	sl, r3, r8
    7610:	f8da 3004 	ldr.w	r3, [sl, #4]
    7614:	f023 0c03 	bic.w	ip, r3, #3
    7618:	eb01 0e0c 	add.w	lr, r1, ip
    761c:	4596      	cmp	lr, r2
    761e:	db8b      	blt.n	7538 <_realloc_r+0xd4>
    7620:	68c3      	ldr	r3, [r0, #12]
    7622:	6882      	ldr	r2, [r0, #8]
    7624:	4657      	mov	r7, sl
    7626:	60d3      	str	r3, [r2, #12]
    7628:	609a      	str	r2, [r3, #8]
    762a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    762e:	f8da 300c 	ldr.w	r3, [sl, #12]
    7632:	60cb      	str	r3, [r1, #12]
    7634:	1f22      	subs	r2, r4, #4
    7636:	2a24      	cmp	r2, #36	; 0x24
    7638:	6099      	str	r1, [r3, #8]
    763a:	f200 8099 	bhi.w	7770 <_realloc_r+0x30c>
    763e:	2a13      	cmp	r2, #19
    7640:	d962      	bls.n	7708 <_realloc_r+0x2a4>
    7642:	6833      	ldr	r3, [r6, #0]
    7644:	f8ca 3008 	str.w	r3, [sl, #8]
    7648:	6873      	ldr	r3, [r6, #4]
    764a:	f8ca 300c 	str.w	r3, [sl, #12]
    764e:	2a1b      	cmp	r2, #27
    7650:	f200 80a0 	bhi.w	7794 <_realloc_r+0x330>
    7654:	3608      	adds	r6, #8
    7656:	f10a 0310 	add.w	r3, sl, #16
    765a:	e056      	b.n	770a <_realloc_r+0x2a6>
    765c:	f021 0b03 	bic.w	fp, r1, #3
    7660:	44a3      	add	fp, r4
    7662:	f105 0010 	add.w	r0, r5, #16
    7666:	4583      	cmp	fp, r0
    7668:	da59      	bge.n	771e <_realloc_r+0x2ba>
    766a:	f01e 0f01 	tst.w	lr, #1
    766e:	f47f af25 	bne.w	74bc <_realloc_r+0x58>
    7672:	f856 1c08 	ldr.w	r1, [r6, #-8]
    7676:	ebc1 0a08 	rsb	sl, r1, r8
    767a:	f8da 1004 	ldr.w	r1, [sl, #4]
    767e:	f021 0c03 	bic.w	ip, r1, #3
    7682:	44e3      	add	fp, ip
    7684:	4558      	cmp	r0, fp
    7686:	f73f af57 	bgt.w	7538 <_realloc_r+0xd4>
    768a:	4657      	mov	r7, sl
    768c:	f8da 100c 	ldr.w	r1, [sl, #12]
    7690:	f857 0f08 	ldr.w	r0, [r7, #8]!
    7694:	1f22      	subs	r2, r4, #4
    7696:	2a24      	cmp	r2, #36	; 0x24
    7698:	60c1      	str	r1, [r0, #12]
    769a:	6088      	str	r0, [r1, #8]
    769c:	f200 80b4 	bhi.w	7808 <_realloc_r+0x3a4>
    76a0:	2a13      	cmp	r2, #19
    76a2:	f240 80a5 	bls.w	77f0 <_realloc_r+0x38c>
    76a6:	6831      	ldr	r1, [r6, #0]
    76a8:	f8ca 1008 	str.w	r1, [sl, #8]
    76ac:	6871      	ldr	r1, [r6, #4]
    76ae:	f8ca 100c 	str.w	r1, [sl, #12]
    76b2:	2a1b      	cmp	r2, #27
    76b4:	f200 80af 	bhi.w	7816 <_realloc_r+0x3b2>
    76b8:	3608      	adds	r6, #8
    76ba:	f10a 0210 	add.w	r2, sl, #16
    76be:	6831      	ldr	r1, [r6, #0]
    76c0:	6011      	str	r1, [r2, #0]
    76c2:	6871      	ldr	r1, [r6, #4]
    76c4:	6051      	str	r1, [r2, #4]
    76c6:	68b1      	ldr	r1, [r6, #8]
    76c8:	6091      	str	r1, [r2, #8]
    76ca:	eb0a 0105 	add.w	r1, sl, r5
    76ce:	ebc5 020b 	rsb	r2, r5, fp
    76d2:	f042 0201 	orr.w	r2, r2, #1
    76d6:	6099      	str	r1, [r3, #8]
    76d8:	604a      	str	r2, [r1, #4]
    76da:	f8da 3004 	ldr.w	r3, [sl, #4]
    76de:	f003 0301 	and.w	r3, r3, #1
    76e2:	431d      	orrs	r5, r3
    76e4:	4648      	mov	r0, r9
    76e6:	f8ca 5004 	str.w	r5, [sl, #4]
    76ea:	f7ff feb1 	bl	7450 <__malloc_unlock>
    76ee:	4638      	mov	r0, r7
    76f0:	e75c      	b.n	75ac <_realloc_r+0x148>
    76f2:	6833      	ldr	r3, [r6, #0]
    76f4:	6003      	str	r3, [r0, #0]
    76f6:	6873      	ldr	r3, [r6, #4]
    76f8:	6043      	str	r3, [r0, #4]
    76fa:	2a1b      	cmp	r2, #27
    76fc:	d827      	bhi.n	774e <_realloc_r+0x2ea>
    76fe:	f100 0308 	add.w	r3, r0, #8
    7702:	f106 0208 	add.w	r2, r6, #8
    7706:	e6f2      	b.n	74ee <_realloc_r+0x8a>
    7708:	463b      	mov	r3, r7
    770a:	6832      	ldr	r2, [r6, #0]
    770c:	601a      	str	r2, [r3, #0]
    770e:	6872      	ldr	r2, [r6, #4]
    7710:	605a      	str	r2, [r3, #4]
    7712:	68b2      	ldr	r2, [r6, #8]
    7714:	609a      	str	r2, [r3, #8]
    7716:	463e      	mov	r6, r7
    7718:	4674      	mov	r4, lr
    771a:	46d0      	mov	r8, sl
    771c:	e733      	b.n	7586 <_realloc_r+0x122>
    771e:	eb08 0105 	add.w	r1, r8, r5
    7722:	ebc5 0b0b 	rsb	fp, r5, fp
    7726:	f04b 0201 	orr.w	r2, fp, #1
    772a:	6099      	str	r1, [r3, #8]
    772c:	604a      	str	r2, [r1, #4]
    772e:	f856 3c04 	ldr.w	r3, [r6, #-4]
    7732:	f003 0301 	and.w	r3, r3, #1
    7736:	431d      	orrs	r5, r3
    7738:	4648      	mov	r0, r9
    773a:	f846 5c04 	str.w	r5, [r6, #-4]
    773e:	f7ff fe87 	bl	7450 <__malloc_unlock>
    7742:	4630      	mov	r0, r6
    7744:	e732      	b.n	75ac <_realloc_r+0x148>
    7746:	4631      	mov	r1, r6
    7748:	f7ff fdce 	bl	72e8 <memmove>
    774c:	e6d5      	b.n	74fa <_realloc_r+0x96>
    774e:	68b3      	ldr	r3, [r6, #8]
    7750:	6083      	str	r3, [r0, #8]
    7752:	68f3      	ldr	r3, [r6, #12]
    7754:	60c3      	str	r3, [r0, #12]
    7756:	2a24      	cmp	r2, #36	; 0x24
    7758:	d028      	beq.n	77ac <_realloc_r+0x348>
    775a:	f100 0310 	add.w	r3, r0, #16
    775e:	f106 0210 	add.w	r2, r6, #16
    7762:	e6c4      	b.n	74ee <_realloc_r+0x8a>
    7764:	f850 3c04 	ldr.w	r3, [r0, #-4]
    7768:	f023 0303 	bic.w	r3, r3, #3
    776c:	441c      	add	r4, r3
    776e:	e70a      	b.n	7586 <_realloc_r+0x122>
    7770:	4631      	mov	r1, r6
    7772:	4638      	mov	r0, r7
    7774:	4674      	mov	r4, lr
    7776:	46d0      	mov	r8, sl
    7778:	f7ff fdb6 	bl	72e8 <memmove>
    777c:	463e      	mov	r6, r7
    777e:	e702      	b.n	7586 <_realloc_r+0x122>
    7780:	463a      	mov	r2, r7
    7782:	e6f7      	b.n	7574 <_realloc_r+0x110>
    7784:	4631      	mov	r1, r6
    7786:	4638      	mov	r0, r7
    7788:	461c      	mov	r4, r3
    778a:	46d0      	mov	r8, sl
    778c:	f7ff fdac 	bl	72e8 <memmove>
    7790:	463e      	mov	r6, r7
    7792:	e6f8      	b.n	7586 <_realloc_r+0x122>
    7794:	68b3      	ldr	r3, [r6, #8]
    7796:	f8ca 3010 	str.w	r3, [sl, #16]
    779a:	68f3      	ldr	r3, [r6, #12]
    779c:	f8ca 3014 	str.w	r3, [sl, #20]
    77a0:	2a24      	cmp	r2, #36	; 0x24
    77a2:	d01b      	beq.n	77dc <_realloc_r+0x378>
    77a4:	3610      	adds	r6, #16
    77a6:	f10a 0318 	add.w	r3, sl, #24
    77aa:	e7ae      	b.n	770a <_realloc_r+0x2a6>
    77ac:	6933      	ldr	r3, [r6, #16]
    77ae:	6103      	str	r3, [r0, #16]
    77b0:	6973      	ldr	r3, [r6, #20]
    77b2:	6143      	str	r3, [r0, #20]
    77b4:	f106 0218 	add.w	r2, r6, #24
    77b8:	f100 0318 	add.w	r3, r0, #24
    77bc:	e697      	b.n	74ee <_realloc_r+0x8a>
    77be:	bf00      	nop
    77c0:	1fff0dd8 	.word	0x1fff0dd8
    77c4:	68b1      	ldr	r1, [r6, #8]
    77c6:	f8ca 1010 	str.w	r1, [sl, #16]
    77ca:	68f1      	ldr	r1, [r6, #12]
    77cc:	f8ca 1014 	str.w	r1, [sl, #20]
    77d0:	2a24      	cmp	r2, #36	; 0x24
    77d2:	d00f      	beq.n	77f4 <_realloc_r+0x390>
    77d4:	3610      	adds	r6, #16
    77d6:	f10a 0218 	add.w	r2, sl, #24
    77da:	e6cb      	b.n	7574 <_realloc_r+0x110>
    77dc:	6933      	ldr	r3, [r6, #16]
    77de:	f8ca 3018 	str.w	r3, [sl, #24]
    77e2:	6973      	ldr	r3, [r6, #20]
    77e4:	f8ca 301c 	str.w	r3, [sl, #28]
    77e8:	3618      	adds	r6, #24
    77ea:	f10a 0320 	add.w	r3, sl, #32
    77ee:	e78c      	b.n	770a <_realloc_r+0x2a6>
    77f0:	463a      	mov	r2, r7
    77f2:	e764      	b.n	76be <_realloc_r+0x25a>
    77f4:	6932      	ldr	r2, [r6, #16]
    77f6:	f8ca 2018 	str.w	r2, [sl, #24]
    77fa:	6972      	ldr	r2, [r6, #20]
    77fc:	f8ca 201c 	str.w	r2, [sl, #28]
    7800:	3618      	adds	r6, #24
    7802:	f10a 0220 	add.w	r2, sl, #32
    7806:	e6b5      	b.n	7574 <_realloc_r+0x110>
    7808:	4631      	mov	r1, r6
    780a:	4638      	mov	r0, r7
    780c:	9301      	str	r3, [sp, #4]
    780e:	f7ff fd6b 	bl	72e8 <memmove>
    7812:	9b01      	ldr	r3, [sp, #4]
    7814:	e759      	b.n	76ca <_realloc_r+0x266>
    7816:	68b1      	ldr	r1, [r6, #8]
    7818:	f8ca 1010 	str.w	r1, [sl, #16]
    781c:	68f1      	ldr	r1, [r6, #12]
    781e:	f8ca 1014 	str.w	r1, [sl, #20]
    7822:	2a24      	cmp	r2, #36	; 0x24
    7824:	d003      	beq.n	782e <_realloc_r+0x3ca>
    7826:	3610      	adds	r6, #16
    7828:	f10a 0218 	add.w	r2, sl, #24
    782c:	e747      	b.n	76be <_realloc_r+0x25a>
    782e:	6932      	ldr	r2, [r6, #16]
    7830:	f8ca 2018 	str.w	r2, [sl, #24]
    7834:	6972      	ldr	r2, [r6, #20]
    7836:	f8ca 201c 	str.w	r2, [sl, #28]
    783a:	3618      	adds	r6, #24
    783c:	f10a 0220 	add.w	r2, sl, #32
    7840:	e73d      	b.n	76be <_realloc_r+0x25a>
    7842:	bf00      	nop

00007844 <_sbrk_r>:
    7844:	b538      	push	{r3, r4, r5, lr}
    7846:	4c07      	ldr	r4, [pc, #28]	; (7864 <_sbrk_r+0x20>)
    7848:	2300      	movs	r3, #0
    784a:	4605      	mov	r5, r0
    784c:	4608      	mov	r0, r1
    784e:	6023      	str	r3, [r4, #0]
    7850:	f7fc f974 	bl	3b3c <_sbrk>
    7854:	1c43      	adds	r3, r0, #1
    7856:	d000      	beq.n	785a <_sbrk_r+0x16>
    7858:	bd38      	pop	{r3, r4, r5, pc}
    785a:	6823      	ldr	r3, [r4, #0]
    785c:	2b00      	cmp	r3, #0
    785e:	d0fb      	beq.n	7858 <_sbrk_r+0x14>
    7860:	602b      	str	r3, [r5, #0]
    7862:	bd38      	pop	{r3, r4, r5, pc}
    7864:	1fff1a78 	.word	0x1fff1a78

00007868 <sprintf>:
    7868:	b40e      	push	{r1, r2, r3}
    786a:	b5f0      	push	{r4, r5, r6, r7, lr}
    786c:	b09c      	sub	sp, #112	; 0x70
    786e:	ab21      	add	r3, sp, #132	; 0x84
    7870:	490f      	ldr	r1, [pc, #60]	; (78b0 <sprintf+0x48>)
    7872:	f853 2b04 	ldr.w	r2, [r3], #4
    7876:	9301      	str	r3, [sp, #4]
    7878:	4605      	mov	r5, r0
    787a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    787e:	6808      	ldr	r0, [r1, #0]
    7880:	9502      	str	r5, [sp, #8]
    7882:	f44f 7702 	mov.w	r7, #520	; 0x208
    7886:	f64f 76ff 	movw	r6, #65535	; 0xffff
    788a:	a902      	add	r1, sp, #8
    788c:	9506      	str	r5, [sp, #24]
    788e:	f8ad 7014 	strh.w	r7, [sp, #20]
    7892:	9404      	str	r4, [sp, #16]
    7894:	9407      	str	r4, [sp, #28]
    7896:	f8ad 6016 	strh.w	r6, [sp, #22]
    789a:	f000 fa25 	bl	7ce8 <_svfprintf_r>
    789e:	9b02      	ldr	r3, [sp, #8]
    78a0:	2200      	movs	r2, #0
    78a2:	701a      	strb	r2, [r3, #0]
    78a4:	b01c      	add	sp, #112	; 0x70
    78a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    78aa:	b003      	add	sp, #12
    78ac:	4770      	bx	lr
    78ae:	bf00      	nop
    78b0:	1fff0c68 	.word	0x1fff0c68

000078b4 <strchr>:
    78b4:	b470      	push	{r4, r5, r6}
    78b6:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    78ba:	d034      	beq.n	7926 <strchr+0x72>
    78bc:	0785      	lsls	r5, r0, #30
    78be:	d00f      	beq.n	78e0 <strchr+0x2c>
    78c0:	7803      	ldrb	r3, [r0, #0]
    78c2:	2b00      	cmp	r3, #0
    78c4:	d05a      	beq.n	797c <strchr+0xc8>
    78c6:	429c      	cmp	r4, r3
    78c8:	d02b      	beq.n	7922 <strchr+0x6e>
    78ca:	1c43      	adds	r3, r0, #1
    78cc:	e005      	b.n	78da <strchr+0x26>
    78ce:	f813 2b01 	ldrb.w	r2, [r3], #1
    78d2:	2a00      	cmp	r2, #0
    78d4:	d04f      	beq.n	7976 <strchr+0xc2>
    78d6:	4294      	cmp	r4, r2
    78d8:	d023      	beq.n	7922 <strchr+0x6e>
    78da:	079a      	lsls	r2, r3, #30
    78dc:	4618      	mov	r0, r3
    78de:	d1f6      	bne.n	78ce <strchr+0x1a>
    78e0:	020e      	lsls	r6, r1, #8
    78e2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    78e6:	4326      	orrs	r6, r4
    78e8:	6803      	ldr	r3, [r0, #0]
    78ea:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    78ee:	e001      	b.n	78f4 <strchr+0x40>
    78f0:	f850 3f04 	ldr.w	r3, [r0, #4]!
    78f4:	ea86 0503 	eor.w	r5, r6, r3
    78f8:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
    78fc:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
    7900:	ea22 0205 	bic.w	r2, r2, r5
    7904:	ea21 0303 	bic.w	r3, r1, r3
    7908:	4313      	orrs	r3, r2
    790a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    790e:	d0ef      	beq.n	78f0 <strchr+0x3c>
    7910:	7803      	ldrb	r3, [r0, #0]
    7912:	b923      	cbnz	r3, 791e <strchr+0x6a>
    7914:	e032      	b.n	797c <strchr+0xc8>
    7916:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    791a:	2b00      	cmp	r3, #0
    791c:	d02e      	beq.n	797c <strchr+0xc8>
    791e:	429c      	cmp	r4, r3
    7920:	d1f9      	bne.n	7916 <strchr+0x62>
    7922:	bc70      	pop	{r4, r5, r6}
    7924:	4770      	bx	lr
    7926:	0784      	lsls	r4, r0, #30
    7928:	d00b      	beq.n	7942 <strchr+0x8e>
    792a:	7803      	ldrb	r3, [r0, #0]
    792c:	2b00      	cmp	r3, #0
    792e:	d0f8      	beq.n	7922 <strchr+0x6e>
    7930:	1c43      	adds	r3, r0, #1
    7932:	e003      	b.n	793c <strchr+0x88>
    7934:	7802      	ldrb	r2, [r0, #0]
    7936:	3301      	adds	r3, #1
    7938:	2a00      	cmp	r2, #0
    793a:	d0f2      	beq.n	7922 <strchr+0x6e>
    793c:	0799      	lsls	r1, r3, #30
    793e:	4618      	mov	r0, r3
    7940:	d1f8      	bne.n	7934 <strchr+0x80>
    7942:	6802      	ldr	r2, [r0, #0]
    7944:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7948:	ea23 0302 	bic.w	r3, r3, r2
    794c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7950:	d108      	bne.n	7964 <strchr+0xb0>
    7952:	f850 2f04 	ldr.w	r2, [r0, #4]!
    7956:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    795a:	ea23 0302 	bic.w	r3, r3, r2
    795e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7962:	d0f6      	beq.n	7952 <strchr+0x9e>
    7964:	7803      	ldrb	r3, [r0, #0]
    7966:	2b00      	cmp	r3, #0
    7968:	d0db      	beq.n	7922 <strchr+0x6e>
    796a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    796e:	2b00      	cmp	r3, #0
    7970:	d1fb      	bne.n	796a <strchr+0xb6>
    7972:	bc70      	pop	{r4, r5, r6}
    7974:	4770      	bx	lr
    7976:	4610      	mov	r0, r2
    7978:	bc70      	pop	{r4, r5, r6}
    797a:	4770      	bx	lr
    797c:	4618      	mov	r0, r3
    797e:	bc70      	pop	{r4, r5, r6}
    7980:	4770      	bx	lr
    7982:	bf00      	nop

00007984 <strcpy>:
    7984:	ea80 0201 	eor.w	r2, r0, r1
    7988:	4684      	mov	ip, r0
    798a:	f012 0f03 	tst.w	r2, #3
    798e:	d14f      	bne.n	7a30 <strcpy+0xac>
    7990:	f011 0f03 	tst.w	r1, #3
    7994:	d132      	bne.n	79fc <strcpy+0x78>
    7996:	f84d 4d04 	str.w	r4, [sp, #-4]!
    799a:	f011 0f04 	tst.w	r1, #4
    799e:	f851 3b04 	ldr.w	r3, [r1], #4
    79a2:	d00b      	beq.n	79bc <strcpy+0x38>
    79a4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    79a8:	439a      	bics	r2, r3
    79aa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    79ae:	bf04      	itt	eq
    79b0:	f84c 3b04 	streq.w	r3, [ip], #4
    79b4:	f851 3b04 	ldreq.w	r3, [r1], #4
    79b8:	d116      	bne.n	79e8 <strcpy+0x64>
    79ba:	bf00      	nop
    79bc:	f851 4b04 	ldr.w	r4, [r1], #4
    79c0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    79c4:	439a      	bics	r2, r3
    79c6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    79ca:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    79ce:	d10b      	bne.n	79e8 <strcpy+0x64>
    79d0:	f84c 3b04 	str.w	r3, [ip], #4
    79d4:	43a2      	bics	r2, r4
    79d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    79da:	bf04      	itt	eq
    79dc:	f851 3b04 	ldreq.w	r3, [r1], #4
    79e0:	f84c 4b04 	streq.w	r4, [ip], #4
    79e4:	d0ea      	beq.n	79bc <strcpy+0x38>
    79e6:	4623      	mov	r3, r4
    79e8:	f80c 3b01 	strb.w	r3, [ip], #1
    79ec:	f013 0fff 	tst.w	r3, #255	; 0xff
    79f0:	ea4f 2333 	mov.w	r3, r3, ror #8
    79f4:	d1f8      	bne.n	79e8 <strcpy+0x64>
    79f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    79fa:	4770      	bx	lr
    79fc:	f011 0f01 	tst.w	r1, #1
    7a00:	d006      	beq.n	7a10 <strcpy+0x8c>
    7a02:	f811 2b01 	ldrb.w	r2, [r1], #1
    7a06:	f80c 2b01 	strb.w	r2, [ip], #1
    7a0a:	2a00      	cmp	r2, #0
    7a0c:	bf08      	it	eq
    7a0e:	4770      	bxeq	lr
    7a10:	f011 0f02 	tst.w	r1, #2
    7a14:	d0bf      	beq.n	7996 <strcpy+0x12>
    7a16:	f831 2b02 	ldrh.w	r2, [r1], #2
    7a1a:	f012 0fff 	tst.w	r2, #255	; 0xff
    7a1e:	bf16      	itet	ne
    7a20:	f82c 2b02 	strhne.w	r2, [ip], #2
    7a24:	f88c 2000 	strbeq.w	r2, [ip]
    7a28:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    7a2c:	d1b3      	bne.n	7996 <strcpy+0x12>
    7a2e:	4770      	bx	lr
    7a30:	f811 2b01 	ldrb.w	r2, [r1], #1
    7a34:	f80c 2b01 	strb.w	r2, [ip], #1
    7a38:	2a00      	cmp	r2, #0
    7a3a:	d1f9      	bne.n	7a30 <strcpy+0xac>
    7a3c:	4770      	bx	lr
    7a3e:	bf00      	nop

00007a40 <strlen>:
    7a40:	f890 f000 	pld	[r0]
    7a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    7a48:	f020 0107 	bic.w	r1, r0, #7
    7a4c:	f06f 0c00 	mvn.w	ip, #0
    7a50:	f010 0407 	ands.w	r4, r0, #7
    7a54:	f891 f020 	pld	[r1, #32]
    7a58:	f040 8049 	bne.w	7aee <strlen+0xae>
    7a5c:	f04f 0400 	mov.w	r4, #0
    7a60:	f06f 0007 	mvn.w	r0, #7
    7a64:	e9d1 2300 	ldrd	r2, r3, [r1]
    7a68:	f891 f040 	pld	[r1, #64]	; 0x40
    7a6c:	f100 0008 	add.w	r0, r0, #8
    7a70:	fa82 f24c 	uadd8	r2, r2, ip
    7a74:	faa4 f28c 	sel	r2, r4, ip
    7a78:	fa83 f34c 	uadd8	r3, r3, ip
    7a7c:	faa2 f38c 	sel	r3, r2, ip
    7a80:	bb4b      	cbnz	r3, 7ad6 <strlen+0x96>
    7a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    7a86:	fa82 f24c 	uadd8	r2, r2, ip
    7a8a:	f100 0008 	add.w	r0, r0, #8
    7a8e:	faa4 f28c 	sel	r2, r4, ip
    7a92:	fa83 f34c 	uadd8	r3, r3, ip
    7a96:	faa2 f38c 	sel	r3, r2, ip
    7a9a:	b9e3      	cbnz	r3, 7ad6 <strlen+0x96>
    7a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    7aa0:	fa82 f24c 	uadd8	r2, r2, ip
    7aa4:	f100 0008 	add.w	r0, r0, #8
    7aa8:	faa4 f28c 	sel	r2, r4, ip
    7aac:	fa83 f34c 	uadd8	r3, r3, ip
    7ab0:	faa2 f38c 	sel	r3, r2, ip
    7ab4:	b97b      	cbnz	r3, 7ad6 <strlen+0x96>
    7ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    7aba:	f101 0120 	add.w	r1, r1, #32
    7abe:	fa82 f24c 	uadd8	r2, r2, ip
    7ac2:	f100 0008 	add.w	r0, r0, #8
    7ac6:	faa4 f28c 	sel	r2, r4, ip
    7aca:	fa83 f34c 	uadd8	r3, r3, ip
    7ace:	faa2 f38c 	sel	r3, r2, ip
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d0c6      	beq.n	7a64 <strlen+0x24>
    7ad6:	2a00      	cmp	r2, #0
    7ad8:	bf04      	itt	eq
    7ada:	3004      	addeq	r0, #4
    7adc:	461a      	moveq	r2, r3
    7ade:	ba12      	rev	r2, r2
    7ae0:	fab2 f282 	clz	r2, r2
    7ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    7ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    7aec:	4770      	bx	lr
    7aee:	e9d1 2300 	ldrd	r2, r3, [r1]
    7af2:	f004 0503 	and.w	r5, r4, #3
    7af6:	f1c4 0000 	rsb	r0, r4, #0
    7afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    7afe:	f014 0f04 	tst.w	r4, #4
    7b02:	f891 f040 	pld	[r1, #64]	; 0x40
    7b06:	fa0c f505 	lsl.w	r5, ip, r5
    7b0a:	ea62 0205 	orn	r2, r2, r5
    7b0e:	bf1c      	itt	ne
    7b10:	ea63 0305 	ornne	r3, r3, r5
    7b14:	4662      	movne	r2, ip
    7b16:	f04f 0400 	mov.w	r4, #0
    7b1a:	e7a9      	b.n	7a70 <strlen+0x30>

00007b1c <strncpy>:
    7b1c:	ea40 0301 	orr.w	r3, r0, r1
    7b20:	079b      	lsls	r3, r3, #30
    7b22:	b470      	push	{r4, r5, r6}
    7b24:	d12b      	bne.n	7b7e <strncpy+0x62>
    7b26:	2a03      	cmp	r2, #3
    7b28:	d929      	bls.n	7b7e <strncpy+0x62>
    7b2a:	460c      	mov	r4, r1
    7b2c:	4603      	mov	r3, r0
    7b2e:	4621      	mov	r1, r4
    7b30:	f854 6b04 	ldr.w	r6, [r4], #4
    7b34:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    7b38:	ea25 0506 	bic.w	r5, r5, r6
    7b3c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    7b40:	d106      	bne.n	7b50 <strncpy+0x34>
    7b42:	3a04      	subs	r2, #4
    7b44:	2a03      	cmp	r2, #3
    7b46:	f843 6b04 	str.w	r6, [r3], #4
    7b4a:	4621      	mov	r1, r4
    7b4c:	d8ef      	bhi.n	7b2e <strncpy+0x12>
    7b4e:	b1a2      	cbz	r2, 7b7a <strncpy+0x5e>
    7b50:	780c      	ldrb	r4, [r1, #0]
    7b52:	701c      	strb	r4, [r3, #0]
    7b54:	3a01      	subs	r2, #1
    7b56:	3301      	adds	r3, #1
    7b58:	3101      	adds	r1, #1
    7b5a:	b13c      	cbz	r4, 7b6c <strncpy+0x50>
    7b5c:	b16a      	cbz	r2, 7b7a <strncpy+0x5e>
    7b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7b62:	f803 4b01 	strb.w	r4, [r3], #1
    7b66:	3a01      	subs	r2, #1
    7b68:	2c00      	cmp	r4, #0
    7b6a:	d1f7      	bne.n	7b5c <strncpy+0x40>
    7b6c:	b12a      	cbz	r2, 7b7a <strncpy+0x5e>
    7b6e:	441a      	add	r2, r3
    7b70:	2100      	movs	r1, #0
    7b72:	f803 1b01 	strb.w	r1, [r3], #1
    7b76:	429a      	cmp	r2, r3
    7b78:	d1fb      	bne.n	7b72 <strncpy+0x56>
    7b7a:	bc70      	pop	{r4, r5, r6}
    7b7c:	4770      	bx	lr
    7b7e:	4603      	mov	r3, r0
    7b80:	e7e5      	b.n	7b4e <strncpy+0x32>
    7b82:	bf00      	nop

00007b84 <_strtol_l.isra.0>:
    7b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b88:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    7b8c:	460f      	mov	r7, r1
    7b8e:	4680      	mov	r8, r0
    7b90:	4616      	mov	r6, r2
    7b92:	461d      	mov	r5, r3
    7b94:	468b      	mov	fp, r1
    7b96:	e000      	b.n	7b9a <_strtol_l.isra.0+0x16>
    7b98:	46a3      	mov	fp, r4
    7b9a:	465c      	mov	r4, fp
    7b9c:	4648      	mov	r0, r9
    7b9e:	f814 ab01 	ldrb.w	sl, [r4], #1
    7ba2:	f7ff f88d 	bl	6cc0 <__locale_ctype_ptr_l>
    7ba6:	4450      	add	r0, sl
    7ba8:	7841      	ldrb	r1, [r0, #1]
    7baa:	f001 0108 	and.w	r1, r1, #8
    7bae:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    7bb2:	2900      	cmp	r1, #0
    7bb4:	d1f0      	bne.n	7b98 <_strtol_l.isra.0+0x14>
    7bb6:	4652      	mov	r2, sl
    7bb8:	2a2d      	cmp	r2, #45	; 0x2d
    7bba:	d061      	beq.n	7c80 <_strtol_l.isra.0+0xfc>
    7bbc:	2a2b      	cmp	r2, #43	; 0x2b
    7bbe:	bf04      	itt	eq
    7bc0:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    7bc4:	f10b 0402 	addeq.w	r4, fp, #2
    7bc8:	2d00      	cmp	r5, #0
    7bca:	d043      	beq.n	7c54 <_strtol_l.isra.0+0xd0>
    7bcc:	2d10      	cmp	r5, #16
    7bce:	d065      	beq.n	7c9c <_strtol_l.isra.0+0x118>
    7bd0:	46a9      	mov	r9, r5
    7bd2:	f1bc 0f00 	cmp.w	ip, #0
    7bd6:	bf0c      	ite	eq
    7bd8:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
    7bdc:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
    7be0:	2100      	movs	r1, #0
    7be2:	fbba fef9 	udiv	lr, sl, r9
    7be6:	4608      	mov	r0, r1
    7be8:	fb09 aa1e 	mls	sl, r9, lr, sl
    7bec:	e005      	b.n	7bfa <_strtol_l.isra.0+0x76>
    7bee:	d029      	beq.n	7c44 <_strtol_l.isra.0+0xc0>
    7bf0:	fb09 3000 	mla	r0, r9, r0, r3
    7bf4:	2101      	movs	r1, #1
    7bf6:	f814 2b01 	ldrb.w	r2, [r4], #1
    7bfa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    7bfe:	2b09      	cmp	r3, #9
    7c00:	d905      	bls.n	7c0e <_strtol_l.isra.0+0x8a>
    7c02:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    7c06:	2b19      	cmp	r3, #25
    7c08:	d80a      	bhi.n	7c20 <_strtol_l.isra.0+0x9c>
    7c0a:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
    7c0e:	429d      	cmp	r5, r3
    7c10:	dd0e      	ble.n	7c30 <_strtol_l.isra.0+0xac>
    7c12:	1c4a      	adds	r2, r1, #1
    7c14:	d0ef      	beq.n	7bf6 <_strtol_l.isra.0+0x72>
    7c16:	4586      	cmp	lr, r0
    7c18:	d2e9      	bcs.n	7bee <_strtol_l.isra.0+0x6a>
    7c1a:	f04f 31ff 	mov.w	r1, #4294967295
    7c1e:	e7ea      	b.n	7bf6 <_strtol_l.isra.0+0x72>
    7c20:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    7c24:	2b19      	cmp	r3, #25
    7c26:	d803      	bhi.n	7c30 <_strtol_l.isra.0+0xac>
    7c28:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
    7c2c:	429d      	cmp	r5, r3
    7c2e:	dcf0      	bgt.n	7c12 <_strtol_l.isra.0+0x8e>
    7c30:	1c4b      	adds	r3, r1, #1
    7c32:	d015      	beq.n	7c60 <_strtol_l.isra.0+0xdc>
    7c34:	f1bc 0f00 	cmp.w	ip, #0
    7c38:	d110      	bne.n	7c5c <_strtol_l.isra.0+0xd8>
    7c3a:	b14e      	cbz	r6, 7c50 <_strtol_l.isra.0+0xcc>
    7c3c:	b9e1      	cbnz	r1, 7c78 <_strtol_l.isra.0+0xf4>
    7c3e:	6037      	str	r7, [r6, #0]
    7c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c44:	459a      	cmp	sl, r3
    7c46:	dad3      	bge.n	7bf0 <_strtol_l.isra.0+0x6c>
    7c48:	4670      	mov	r0, lr
    7c4a:	f04f 31ff 	mov.w	r1, #4294967295
    7c4e:	e7d2      	b.n	7bf6 <_strtol_l.isra.0+0x72>
    7c50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c54:	2a30      	cmp	r2, #48	; 0x30
    7c56:	d01a      	beq.n	7c8e <_strtol_l.isra.0+0x10a>
    7c58:	250a      	movs	r5, #10
    7c5a:	e7b9      	b.n	7bd0 <_strtol_l.isra.0+0x4c>
    7c5c:	4240      	negs	r0, r0
    7c5e:	e7ec      	b.n	7c3a <_strtol_l.isra.0+0xb6>
    7c60:	f1bc 0f00 	cmp.w	ip, #0
    7c64:	f04f 0322 	mov.w	r3, #34	; 0x22
    7c68:	bf0c      	ite	eq
    7c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    7c6e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
    7c72:	f8c8 3000 	str.w	r3, [r8]
    7c76:	b1f6      	cbz	r6, 7cb6 <_strtol_l.isra.0+0x132>
    7c78:	1e67      	subs	r7, r4, #1
    7c7a:	6037      	str	r7, [r6, #0]
    7c7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c80:	f10b 0402 	add.w	r4, fp, #2
    7c84:	f89b 2001 	ldrb.w	r2, [fp, #1]
    7c88:	f04f 0c01 	mov.w	ip, #1
    7c8c:	e79c      	b.n	7bc8 <_strtol_l.isra.0+0x44>
    7c8e:	7823      	ldrb	r3, [r4, #0]
    7c90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7c94:	2b58      	cmp	r3, #88	; 0x58
    7c96:	d008      	beq.n	7caa <_strtol_l.isra.0+0x126>
    7c98:	2508      	movs	r5, #8
    7c9a:	e799      	b.n	7bd0 <_strtol_l.isra.0+0x4c>
    7c9c:	2a30      	cmp	r2, #48	; 0x30
    7c9e:	d197      	bne.n	7bd0 <_strtol_l.isra.0+0x4c>
    7ca0:	7823      	ldrb	r3, [r4, #0]
    7ca2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7ca6:	2b58      	cmp	r3, #88	; 0x58
    7ca8:	d192      	bne.n	7bd0 <_strtol_l.isra.0+0x4c>
    7caa:	f04f 0910 	mov.w	r9, #16
    7cae:	7862      	ldrb	r2, [r4, #1]
    7cb0:	464d      	mov	r5, r9
    7cb2:	3402      	adds	r4, #2
    7cb4:	e78d      	b.n	7bd2 <_strtol_l.isra.0+0x4e>
    7cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cba:	bf00      	nop

00007cbc <strtol>:
    7cbc:	b530      	push	{r4, r5, lr}
    7cbe:	4c08      	ldr	r4, [pc, #32]	; (7ce0 <strtol+0x24>)
    7cc0:	4b08      	ldr	r3, [pc, #32]	; (7ce4 <strtol+0x28>)
    7cc2:	6825      	ldr	r5, [r4, #0]
    7cc4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    7cc6:	b083      	sub	sp, #12
    7cc8:	2c00      	cmp	r4, #0
    7cca:	bf08      	it	eq
    7ccc:	461c      	moveq	r4, r3
    7cce:	9400      	str	r4, [sp, #0]
    7cd0:	4613      	mov	r3, r2
    7cd2:	460a      	mov	r2, r1
    7cd4:	4601      	mov	r1, r0
    7cd6:	4628      	mov	r0, r5
    7cd8:	f7ff ff54 	bl	7b84 <_strtol_l.isra.0>
    7cdc:	b003      	add	sp, #12
    7cde:	bd30      	pop	{r4, r5, pc}
    7ce0:	1fff0c68 	.word	0x1fff0c68
    7ce4:	1fff0c6c 	.word	0x1fff0c6c

00007ce8 <_svfprintf_r>:
    7ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cec:	b0c1      	sub	sp, #260	; 0x104
    7cee:	460c      	mov	r4, r1
    7cf0:	9105      	str	r1, [sp, #20]
    7cf2:	4615      	mov	r5, r2
    7cf4:	930a      	str	r3, [sp, #40]	; 0x28
    7cf6:	9006      	str	r0, [sp, #24]
    7cf8:	f002 fcd2 	bl	a6a0 <_localeconv_r>
    7cfc:	6803      	ldr	r3, [r0, #0]
    7cfe:	9313      	str	r3, [sp, #76]	; 0x4c
    7d00:	4618      	mov	r0, r3
    7d02:	f7ff fe9d 	bl	7a40 <strlen>
    7d06:	89a3      	ldrh	r3, [r4, #12]
    7d08:	9012      	str	r0, [sp, #72]	; 0x48
    7d0a:	061e      	lsls	r6, r3, #24
    7d0c:	d503      	bpl.n	7d16 <_svfprintf_r+0x2e>
    7d0e:	6923      	ldr	r3, [r4, #16]
    7d10:	2b00      	cmp	r3, #0
    7d12:	f001 8131 	beq.w	8f78 <_svfprintf_r+0x1290>
    7d16:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 7fb0 <_svfprintf_r+0x2c8>
    7d1a:	2300      	movs	r3, #0
    7d1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
    7d20:	930e      	str	r3, [sp, #56]	; 0x38
    7d22:	9325      	str	r3, [sp, #148]	; 0x94
    7d24:	9324      	str	r3, [sp, #144]	; 0x90
    7d26:	9315      	str	r3, [sp, #84]	; 0x54
    7d28:	9307      	str	r3, [sp, #28]
    7d2a:	f8df a290 	ldr.w	sl, [pc, #656]	; 7fbc <_svfprintf_r+0x2d4>
    7d2e:	ab30      	add	r3, sp, #192	; 0xc0
    7d30:	9323      	str	r3, [sp, #140]	; 0x8c
    7d32:	4699      	mov	r9, r3
    7d34:	46a8      	mov	r8, r5
    7d36:	f898 3000 	ldrb.w	r3, [r8]
    7d3a:	4644      	mov	r4, r8
    7d3c:	b1eb      	cbz	r3, 7d7a <_svfprintf_r+0x92>
    7d3e:	2b25      	cmp	r3, #37	; 0x25
    7d40:	d102      	bne.n	7d48 <_svfprintf_r+0x60>
    7d42:	e01a      	b.n	7d7a <_svfprintf_r+0x92>
    7d44:	2b25      	cmp	r3, #37	; 0x25
    7d46:	d003      	beq.n	7d50 <_svfprintf_r+0x68>
    7d48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    7d4c:	2b00      	cmp	r3, #0
    7d4e:	d1f9      	bne.n	7d44 <_svfprintf_r+0x5c>
    7d50:	ebc8 0504 	rsb	r5, r8, r4
    7d54:	b18d      	cbz	r5, 7d7a <_svfprintf_r+0x92>
    7d56:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7d58:	9a25      	ldr	r2, [sp, #148]	; 0x94
    7d5a:	f8c9 8000 	str.w	r8, [r9]
    7d5e:	3301      	adds	r3, #1
    7d60:	442a      	add	r2, r5
    7d62:	2b07      	cmp	r3, #7
    7d64:	f8c9 5004 	str.w	r5, [r9, #4]
    7d68:	9225      	str	r2, [sp, #148]	; 0x94
    7d6a:	9324      	str	r3, [sp, #144]	; 0x90
    7d6c:	f300 80a6 	bgt.w	7ebc <_svfprintf_r+0x1d4>
    7d70:	f109 0908 	add.w	r9, r9, #8
    7d74:	9b07      	ldr	r3, [sp, #28]
    7d76:	442b      	add	r3, r5
    7d78:	9307      	str	r3, [sp, #28]
    7d7a:	7823      	ldrb	r3, [r4, #0]
    7d7c:	2b00      	cmp	r3, #0
    7d7e:	f000 80a6 	beq.w	7ece <_svfprintf_r+0x1e6>
    7d82:	2300      	movs	r3, #0
    7d84:	461a      	mov	r2, r3
    7d86:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    7d8a:	4619      	mov	r1, r3
    7d8c:	9308      	str	r3, [sp, #32]
    7d8e:	9303      	str	r3, [sp, #12]
    7d90:	f04f 3bff 	mov.w	fp, #4294967295
    7d94:	7863      	ldrb	r3, [r4, #1]
    7d96:	f104 0801 	add.w	r8, r4, #1
    7d9a:	465d      	mov	r5, fp
    7d9c:	f108 0801 	add.w	r8, r8, #1
    7da0:	f1a3 0020 	sub.w	r0, r3, #32
    7da4:	2858      	cmp	r0, #88	; 0x58
    7da6:	f200 8434 	bhi.w	8612 <_svfprintf_r+0x92a>
    7daa:	e8df f010 	tbh	[pc, r0, lsl #1]
    7dae:	03a0      	.short	0x03a0
    7db0:	04320432 	.word	0x04320432
    7db4:	043203a8 	.word	0x043203a8
    7db8:	04320432 	.word	0x04320432
    7dbc:	04320432 	.word	0x04320432
    7dc0:	03af0432 	.word	0x03af0432
    7dc4:	043203bd 	.word	0x043203bd
    7dc8:	00e2005d 	.word	0x00e2005d
    7dcc:	01090432 	.word	0x01090432
    7dd0:	01100110 	.word	0x01100110
    7dd4:	01100110 	.word	0x01100110
    7dd8:	01100110 	.word	0x01100110
    7ddc:	01100110 	.word	0x01100110
    7de0:	04320110 	.word	0x04320110
    7de4:	04320432 	.word	0x04320432
    7de8:	04320432 	.word	0x04320432
    7dec:	04320432 	.word	0x04320432
    7df0:	04320432 	.word	0x04320432
    7df4:	01200432 	.word	0x01200432
    7df8:	04320286 	.word	0x04320286
    7dfc:	04320286 	.word	0x04320286
    7e00:	04320432 	.word	0x04320432
    7e04:	02d40432 	.word	0x02d40432
    7e08:	04320432 	.word	0x04320432
    7e0c:	043202e5 	.word	0x043202e5
    7e10:	04320432 	.word	0x04320432
    7e14:	04320432 	.word	0x04320432
    7e18:	0432030f 	.word	0x0432030f
    7e1c:	033d0432 	.word	0x033d0432
    7e20:	04320432 	.word	0x04320432
    7e24:	04320432 	.word	0x04320432
    7e28:	04320432 	.word	0x04320432
    7e2c:	04320432 	.word	0x04320432
    7e30:	04320432 	.word	0x04320432
    7e34:	0391037e 	.word	0x0391037e
    7e38:	02860286 	.word	0x02860286
    7e3c:	03990286 	.word	0x03990286
    7e40:	04320391 	.word	0x04320391
    7e44:	04070432 	.word	0x04070432
    7e48:	04120432 	.word	0x04120432
    7e4c:	006400a3 	.word	0x006400a3
    7e50:	043203c2 	.word	0x043203c2
    7e54:	043203c9 	.word	0x043203c9
    7e58:	043203ea 	.word	0x043203ea
    7e5c:	03f20432 	.word	0x03f20432
    7e60:	9808      	ldr	r0, [sp, #32]
    7e62:	930a      	str	r3, [sp, #40]	; 0x28
    7e64:	4240      	negs	r0, r0
    7e66:	9008      	str	r0, [sp, #32]
    7e68:	9b03      	ldr	r3, [sp, #12]
    7e6a:	f043 0304 	orr.w	r3, r3, #4
    7e6e:	9303      	str	r3, [sp, #12]
    7e70:	f898 3000 	ldrb.w	r3, [r8]
    7e74:	e792      	b.n	7d9c <_svfprintf_r+0xb4>
    7e76:	980a      	ldr	r0, [sp, #40]	; 0x28
    7e78:	46ab      	mov	fp, r5
    7e7a:	2100      	movs	r1, #0
    7e7c:	6804      	ldr	r4, [r0, #0]
    7e7e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    7e82:	1d07      	adds	r7, r0, #4
    7e84:	9803      	ldr	r0, [sp, #12]
    7e86:	2330      	movs	r3, #48	; 0x30
    7e88:	2278      	movs	r2, #120	; 0x78
    7e8a:	458b      	cmp	fp, r1
    7e8c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    7e90:	f04f 0500 	mov.w	r5, #0
    7e94:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    7e98:	f040 0302 	orr.w	r3, r0, #2
    7e9c:	f2c0 83d6 	blt.w	864c <_svfprintf_r+0x964>
    7ea0:	f020 0380 	bic.w	r3, r0, #128	; 0x80
    7ea4:	f043 0302 	orr.w	r3, r3, #2
    7ea8:	9303      	str	r3, [sp, #12]
    7eaa:	ea54 0305 	orrs.w	r3, r4, r5
    7eae:	970a      	str	r7, [sp, #40]	; 0x28
    7eb0:	f000 83a2 	beq.w	85f8 <_svfprintf_r+0x910>
    7eb4:	460f      	mov	r7, r1
    7eb6:	920d      	str	r2, [sp, #52]	; 0x34
    7eb8:	483f      	ldr	r0, [pc, #252]	; (7fb8 <_svfprintf_r+0x2d0>)
    7eba:	e2e6      	b.n	848a <_svfprintf_r+0x7a2>
    7ebc:	aa23      	add	r2, sp, #140	; 0x8c
    7ebe:	9905      	ldr	r1, [sp, #20]
    7ec0:	9806      	ldr	r0, [sp, #24]
    7ec2:	f002 ff5f 	bl	ad84 <__ssprint_r>
    7ec6:	b948      	cbnz	r0, 7edc <_svfprintf_r+0x1f4>
    7ec8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7ecc:	e752      	b.n	7d74 <_svfprintf_r+0x8c>
    7ece:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7ed0:	b123      	cbz	r3, 7edc <_svfprintf_r+0x1f4>
    7ed2:	9806      	ldr	r0, [sp, #24]
    7ed4:	9905      	ldr	r1, [sp, #20]
    7ed6:	aa23      	add	r2, sp, #140	; 0x8c
    7ed8:	f002 ff54 	bl	ad84 <__ssprint_r>
    7edc:	9b05      	ldr	r3, [sp, #20]
    7ede:	899b      	ldrh	r3, [r3, #12]
    7ee0:	f013 0f40 	tst.w	r3, #64	; 0x40
    7ee4:	9b07      	ldr	r3, [sp, #28]
    7ee6:	bf18      	it	ne
    7ee8:	f04f 33ff 	movne.w	r3, #4294967295
    7eec:	4618      	mov	r0, r3
    7eee:	b041      	add	sp, #260	; 0x104
    7ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ef4:	930d      	str	r3, [sp, #52]	; 0x34
    7ef6:	46ab      	mov	fp, r5
    7ef8:	2a00      	cmp	r2, #0
    7efa:	f041 8233 	bne.w	9364 <_svfprintf_r+0x167c>
    7efe:	9a03      	ldr	r2, [sp, #12]
    7f00:	f012 0320 	ands.w	r3, r2, #32
    7f04:	f000 8246 	beq.w	8394 <_svfprintf_r+0x6ac>
    7f08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    7f0a:	3707      	adds	r7, #7
    7f0c:	f027 0307 	bic.w	r3, r7, #7
    7f10:	2700      	movs	r7, #0
    7f12:	f103 0108 	add.w	r1, r3, #8
    7f16:	45bb      	cmp	fp, r7
    7f18:	910a      	str	r1, [sp, #40]	; 0x28
    7f1a:	e9d3 4500 	ldrd	r4, r5, [r3]
    7f1e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    7f22:	f2c0 8762 	blt.w	8dea <_svfprintf_r+0x1102>
    7f26:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    7f2a:	9303      	str	r3, [sp, #12]
    7f2c:	ea54 0305 	orrs.w	r3, r4, r5
    7f30:	f000 8384 	beq.w	863c <_svfprintf_r+0x954>
    7f34:	ae30      	add	r6, sp, #192	; 0xc0
    7f36:	08e2      	lsrs	r2, r4, #3
    7f38:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    7f3c:	08e9      	lsrs	r1, r5, #3
    7f3e:	f004 0307 	and.w	r3, r4, #7
    7f42:	460d      	mov	r5, r1
    7f44:	4614      	mov	r4, r2
    7f46:	3330      	adds	r3, #48	; 0x30
    7f48:	ea54 0205 	orrs.w	r2, r4, r5
    7f4c:	f806 3d01 	strb.w	r3, [r6, #-1]!
    7f50:	d1f1      	bne.n	7f36 <_svfprintf_r+0x24e>
    7f52:	9a03      	ldr	r2, [sp, #12]
    7f54:	07d1      	lsls	r1, r2, #31
    7f56:	f140 808f 	bpl.w	8078 <_svfprintf_r+0x390>
    7f5a:	2b30      	cmp	r3, #48	; 0x30
    7f5c:	f000 808c 	beq.w	8078 <_svfprintf_r+0x390>
    7f60:	2230      	movs	r2, #48	; 0x30
    7f62:	1e73      	subs	r3, r6, #1
    7f64:	f806 2c01 	strb.w	r2, [r6, #-1]
    7f68:	aa30      	add	r2, sp, #192	; 0xc0
    7f6a:	1ad2      	subs	r2, r2, r3
    7f6c:	9209      	str	r2, [sp, #36]	; 0x24
    7f6e:	461e      	mov	r6, r3
    7f70:	e085      	b.n	807e <_svfprintf_r+0x396>
    7f72:	f898 3000 	ldrb.w	r3, [r8]
    7f76:	2b2a      	cmp	r3, #42	; 0x2a
    7f78:	f108 0401 	add.w	r4, r8, #1
    7f7c:	f001 81e4 	beq.w	9348 <_svfprintf_r+0x1660>
    7f80:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    7f84:	2809      	cmp	r0, #9
    7f86:	bf98      	it	ls
    7f88:	2500      	movls	r5, #0
    7f8a:	f201 8186 	bhi.w	929a <_svfprintf_r+0x15b2>
    7f8e:	f814 3b01 	ldrb.w	r3, [r4], #1
    7f92:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    7f96:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    7f9a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    7f9e:	2809      	cmp	r0, #9
    7fa0:	d9f5      	bls.n	7f8e <_svfprintf_r+0x2a6>
    7fa2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    7fa6:	46a0      	mov	r8, r4
    7fa8:	e6fa      	b.n	7da0 <_svfprintf_r+0xb8>
    7faa:	bf00      	nop
    7fac:	f3af 8000 	nop.w
	...
    7fb8:	0000b808 	.word	0x0000b808
    7fbc:	0000b7dc 	.word	0x0000b7dc
    7fc0:	9b03      	ldr	r3, [sp, #12]
    7fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7fc6:	9303      	str	r3, [sp, #12]
    7fc8:	f898 3000 	ldrb.w	r3, [r8]
    7fcc:	e6e6      	b.n	7d9c <_svfprintf_r+0xb4>
    7fce:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    7fd2:	2300      	movs	r3, #0
    7fd4:	461c      	mov	r4, r3
    7fd6:	f818 3b01 	ldrb.w	r3, [r8], #1
    7fda:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7fde:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    7fe2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    7fe6:	2809      	cmp	r0, #9
    7fe8:	d9f5      	bls.n	7fd6 <_svfprintf_r+0x2ee>
    7fea:	9408      	str	r4, [sp, #32]
    7fec:	e6d8      	b.n	7da0 <_svfprintf_r+0xb8>
    7fee:	930d      	str	r3, [sp, #52]	; 0x34
    7ff0:	46ab      	mov	fp, r5
    7ff2:	2a00      	cmp	r2, #0
    7ff4:	f041 81c4 	bne.w	9380 <_svfprintf_r+0x1698>
    7ff8:	9b03      	ldr	r3, [sp, #12]
    7ffa:	f043 0310 	orr.w	r3, r3, #16
    7ffe:	9303      	str	r3, [sp, #12]
    8000:	9b03      	ldr	r3, [sp, #12]
    8002:	069c      	lsls	r4, r3, #26
    8004:	f140 8537 	bpl.w	8a76 <_svfprintf_r+0xd8e>
    8008:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    800a:	3707      	adds	r7, #7
    800c:	f027 0707 	bic.w	r7, r7, #7
    8010:	e9d7 2300 	ldrd	r2, r3, [r7]
    8014:	f107 0108 	add.w	r1, r7, #8
    8018:	910a      	str	r1, [sp, #40]	; 0x28
    801a:	4614      	mov	r4, r2
    801c:	461d      	mov	r5, r3
    801e:	2a00      	cmp	r2, #0
    8020:	f173 0300 	sbcs.w	r3, r3, #0
    8024:	f2c0 8562 	blt.w	8aec <_svfprintf_r+0xe04>
    8028:	f1bb 0f00 	cmp.w	fp, #0
    802c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    8030:	f2c0 853f 	blt.w	8ab2 <_svfprintf_r+0xdca>
    8034:	9b03      	ldr	r3, [sp, #12]
    8036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    803a:	9303      	str	r3, [sp, #12]
    803c:	ea54 0305 	orrs.w	r3, r4, r5
    8040:	f000 81e8 	beq.w	8414 <_svfprintf_r+0x72c>
    8044:	2d00      	cmp	r5, #0
    8046:	bf08      	it	eq
    8048:	2c0a      	cmpeq	r4, #10
    804a:	f0c0 81e8 	bcc.w	841e <_svfprintf_r+0x736>
    804e:	ae30      	add	r6, sp, #192	; 0xc0
    8050:	4620      	mov	r0, r4
    8052:	4629      	mov	r1, r5
    8054:	220a      	movs	r2, #10
    8056:	2300      	movs	r3, #0
    8058:	f002 ff44 	bl	aee4 <__aeabi_uldivmod>
    805c:	3230      	adds	r2, #48	; 0x30
    805e:	f806 2d01 	strb.w	r2, [r6, #-1]!
    8062:	4620      	mov	r0, r4
    8064:	4629      	mov	r1, r5
    8066:	2300      	movs	r3, #0
    8068:	220a      	movs	r2, #10
    806a:	f002 ff3b 	bl	aee4 <__aeabi_uldivmod>
    806e:	4604      	mov	r4, r0
    8070:	460d      	mov	r5, r1
    8072:	ea54 0305 	orrs.w	r3, r4, r5
    8076:	d1eb      	bne.n	8050 <_svfprintf_r+0x368>
    8078:	ab30      	add	r3, sp, #192	; 0xc0
    807a:	1b9b      	subs	r3, r3, r6
    807c:	9309      	str	r3, [sp, #36]	; 0x24
    807e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8080:	455b      	cmp	r3, fp
    8082:	bfb8      	it	lt
    8084:	465b      	movlt	r3, fp
    8086:	9304      	str	r3, [sp, #16]
    8088:	2300      	movs	r3, #0
    808a:	930f      	str	r3, [sp, #60]	; 0x3c
    808c:	b117      	cbz	r7, 8094 <_svfprintf_r+0x3ac>
    808e:	9b04      	ldr	r3, [sp, #16]
    8090:	3301      	adds	r3, #1
    8092:	9304      	str	r3, [sp, #16]
    8094:	9b03      	ldr	r3, [sp, #12]
    8096:	f013 0302 	ands.w	r3, r3, #2
    809a:	930b      	str	r3, [sp, #44]	; 0x2c
    809c:	d002      	beq.n	80a4 <_svfprintf_r+0x3bc>
    809e:	9b04      	ldr	r3, [sp, #16]
    80a0:	3302      	adds	r3, #2
    80a2:	9304      	str	r3, [sp, #16]
    80a4:	9b03      	ldr	r3, [sp, #12]
    80a6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
    80aa:	930c      	str	r3, [sp, #48]	; 0x30
    80ac:	f040 82db 	bne.w	8666 <_svfprintf_r+0x97e>
    80b0:	9b08      	ldr	r3, [sp, #32]
    80b2:	9a04      	ldr	r2, [sp, #16]
    80b4:	1a9d      	subs	r5, r3, r2
    80b6:	2d00      	cmp	r5, #0
    80b8:	f340 82d5 	ble.w	8666 <_svfprintf_r+0x97e>
    80bc:	2d10      	cmp	r5, #16
    80be:	9925      	ldr	r1, [sp, #148]	; 0x94
    80c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    80c2:	4fa8      	ldr	r7, [pc, #672]	; (8364 <_svfprintf_r+0x67c>)
    80c4:	dd27      	ble.n	8116 <_svfprintf_r+0x42e>
    80c6:	9614      	str	r6, [sp, #80]	; 0x50
    80c8:	4648      	mov	r0, r9
    80ca:	2410      	movs	r4, #16
    80cc:	46b9      	mov	r9, r7
    80ce:	9e05      	ldr	r6, [sp, #20]
    80d0:	462f      	mov	r7, r5
    80d2:	9d06      	ldr	r5, [sp, #24]
    80d4:	e004      	b.n	80e0 <_svfprintf_r+0x3f8>
    80d6:	3f10      	subs	r7, #16
    80d8:	2f10      	cmp	r7, #16
    80da:	f100 0008 	add.w	r0, r0, #8
    80de:	dd16      	ble.n	810e <_svfprintf_r+0x426>
    80e0:	3201      	adds	r2, #1
    80e2:	4ba0      	ldr	r3, [pc, #640]	; (8364 <_svfprintf_r+0x67c>)
    80e4:	9224      	str	r2, [sp, #144]	; 0x90
    80e6:	3110      	adds	r1, #16
    80e8:	2a07      	cmp	r2, #7
    80ea:	9125      	str	r1, [sp, #148]	; 0x94
    80ec:	e880 0018 	stmia.w	r0, {r3, r4}
    80f0:	ddf1      	ble.n	80d6 <_svfprintf_r+0x3ee>
    80f2:	aa23      	add	r2, sp, #140	; 0x8c
    80f4:	4631      	mov	r1, r6
    80f6:	4628      	mov	r0, r5
    80f8:	f002 fe44 	bl	ad84 <__ssprint_r>
    80fc:	2800      	cmp	r0, #0
    80fe:	f47f aeed 	bne.w	7edc <_svfprintf_r+0x1f4>
    8102:	3f10      	subs	r7, #16
    8104:	2f10      	cmp	r7, #16
    8106:	9925      	ldr	r1, [sp, #148]	; 0x94
    8108:	9a24      	ldr	r2, [sp, #144]	; 0x90
    810a:	a830      	add	r0, sp, #192	; 0xc0
    810c:	dce8      	bgt.n	80e0 <_svfprintf_r+0x3f8>
    810e:	9e14      	ldr	r6, [sp, #80]	; 0x50
    8110:	463d      	mov	r5, r7
    8112:	464f      	mov	r7, r9
    8114:	4681      	mov	r9, r0
    8116:	3201      	adds	r2, #1
    8118:	186c      	adds	r4, r5, r1
    811a:	2a07      	cmp	r2, #7
    811c:	9425      	str	r4, [sp, #148]	; 0x94
    811e:	9224      	str	r2, [sp, #144]	; 0x90
    8120:	f8c9 7000 	str.w	r7, [r9]
    8124:	f8c9 5004 	str.w	r5, [r9, #4]
    8128:	f300 842d 	bgt.w	8986 <_svfprintf_r+0xc9e>
    812c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    8130:	f109 0908 	add.w	r9, r9, #8
    8134:	b177      	cbz	r7, 8154 <_svfprintf_r+0x46c>
    8136:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8138:	3301      	adds	r3, #1
    813a:	3401      	adds	r4, #1
    813c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
    8140:	2201      	movs	r2, #1
    8142:	2b07      	cmp	r3, #7
    8144:	9425      	str	r4, [sp, #148]	; 0x94
    8146:	9324      	str	r3, [sp, #144]	; 0x90
    8148:	e889 0006 	stmia.w	r9, {r1, r2}
    814c:	f300 83a5 	bgt.w	889a <_svfprintf_r+0xbb2>
    8150:	f109 0908 	add.w	r9, r9, #8
    8154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8156:	b16b      	cbz	r3, 8174 <_svfprintf_r+0x48c>
    8158:	9b24      	ldr	r3, [sp, #144]	; 0x90
    815a:	3301      	adds	r3, #1
    815c:	3402      	adds	r4, #2
    815e:	a91c      	add	r1, sp, #112	; 0x70
    8160:	2202      	movs	r2, #2
    8162:	2b07      	cmp	r3, #7
    8164:	9425      	str	r4, [sp, #148]	; 0x94
    8166:	9324      	str	r3, [sp, #144]	; 0x90
    8168:	e889 0006 	stmia.w	r9, {r1, r2}
    816c:	f300 83a1 	bgt.w	88b2 <_svfprintf_r+0xbca>
    8170:	f109 0908 	add.w	r9, r9, #8
    8174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8176:	2b80      	cmp	r3, #128	; 0x80
    8178:	f000 82e1 	beq.w	873e <_svfprintf_r+0xa56>
    817c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    817e:	ebc3 070b 	rsb	r7, r3, fp
    8182:	2f00      	cmp	r7, #0
    8184:	dd33      	ble.n	81ee <_svfprintf_r+0x506>
    8186:	4a78      	ldr	r2, [pc, #480]	; (8368 <_svfprintf_r+0x680>)
    8188:	9b24      	ldr	r3, [sp, #144]	; 0x90
    818a:	920b      	str	r2, [sp, #44]	; 0x2c
    818c:	2f10      	cmp	r7, #16
    818e:	dd22      	ble.n	81d6 <_svfprintf_r+0x4ee>
    8190:	4622      	mov	r2, r4
    8192:	f04f 0b10 	mov.w	fp, #16
    8196:	9d06      	ldr	r5, [sp, #24]
    8198:	9c05      	ldr	r4, [sp, #20]
    819a:	e004      	b.n	81a6 <_svfprintf_r+0x4be>
    819c:	3f10      	subs	r7, #16
    819e:	2f10      	cmp	r7, #16
    81a0:	f109 0908 	add.w	r9, r9, #8
    81a4:	dd16      	ble.n	81d4 <_svfprintf_r+0x4ec>
    81a6:	3301      	adds	r3, #1
    81a8:	3210      	adds	r2, #16
    81aa:	2b07      	cmp	r3, #7
    81ac:	9225      	str	r2, [sp, #148]	; 0x94
    81ae:	9324      	str	r3, [sp, #144]	; 0x90
    81b0:	e889 0c00 	stmia.w	r9, {sl, fp}
    81b4:	ddf2      	ble.n	819c <_svfprintf_r+0x4b4>
    81b6:	aa23      	add	r2, sp, #140	; 0x8c
    81b8:	4621      	mov	r1, r4
    81ba:	4628      	mov	r0, r5
    81bc:	f002 fde2 	bl	ad84 <__ssprint_r>
    81c0:	2800      	cmp	r0, #0
    81c2:	f47f ae8b 	bne.w	7edc <_svfprintf_r+0x1f4>
    81c6:	3f10      	subs	r7, #16
    81c8:	2f10      	cmp	r7, #16
    81ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
    81cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
    81ce:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    81d2:	dce8      	bgt.n	81a6 <_svfprintf_r+0x4be>
    81d4:	4614      	mov	r4, r2
    81d6:	3301      	adds	r3, #1
    81d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    81da:	9324      	str	r3, [sp, #144]	; 0x90
    81dc:	443c      	add	r4, r7
    81de:	2b07      	cmp	r3, #7
    81e0:	9425      	str	r4, [sp, #148]	; 0x94
    81e2:	e889 0084 	stmia.w	r9, {r2, r7}
    81e6:	f300 834c 	bgt.w	8882 <_svfprintf_r+0xb9a>
    81ea:	f109 0908 	add.w	r9, r9, #8
    81ee:	9b03      	ldr	r3, [sp, #12]
    81f0:	05da      	lsls	r2, r3, #23
    81f2:	f100 823a 	bmi.w	866a <_svfprintf_r+0x982>
    81f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    81f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    81fa:	f8c9 6000 	str.w	r6, [r9]
    81fe:	3301      	adds	r3, #1
    8200:	440c      	add	r4, r1
    8202:	2b07      	cmp	r3, #7
    8204:	9425      	str	r4, [sp, #148]	; 0x94
    8206:	f8c9 1004 	str.w	r1, [r9, #4]
    820a:	9324      	str	r3, [sp, #144]	; 0x90
    820c:	f300 8323 	bgt.w	8856 <_svfprintf_r+0xb6e>
    8210:	f109 0908 	add.w	r9, r9, #8
    8214:	9b03      	ldr	r3, [sp, #12]
    8216:	0759      	lsls	r1, r3, #29
    8218:	d53f      	bpl.n	829a <_svfprintf_r+0x5b2>
    821a:	9b08      	ldr	r3, [sp, #32]
    821c:	9a04      	ldr	r2, [sp, #16]
    821e:	1a9d      	subs	r5, r3, r2
    8220:	2d00      	cmp	r5, #0
    8222:	dd3a      	ble.n	829a <_svfprintf_r+0x5b2>
    8224:	2d10      	cmp	r5, #16
    8226:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8228:	4f4e      	ldr	r7, [pc, #312]	; (8364 <_svfprintf_r+0x67c>)
    822a:	dd23      	ble.n	8274 <_svfprintf_r+0x58c>
    822c:	4622      	mov	r2, r4
    822e:	2610      	movs	r6, #16
    8230:	f8dd b018 	ldr.w	fp, [sp, #24]
    8234:	9c05      	ldr	r4, [sp, #20]
    8236:	e004      	b.n	8242 <_svfprintf_r+0x55a>
    8238:	3d10      	subs	r5, #16
    823a:	2d10      	cmp	r5, #16
    823c:	f109 0908 	add.w	r9, r9, #8
    8240:	dd17      	ble.n	8272 <_svfprintf_r+0x58a>
    8242:	3301      	adds	r3, #1
    8244:	4947      	ldr	r1, [pc, #284]	; (8364 <_svfprintf_r+0x67c>)
    8246:	9324      	str	r3, [sp, #144]	; 0x90
    8248:	3210      	adds	r2, #16
    824a:	2b07      	cmp	r3, #7
    824c:	9225      	str	r2, [sp, #148]	; 0x94
    824e:	e889 0042 	stmia.w	r9, {r1, r6}
    8252:	ddf1      	ble.n	8238 <_svfprintf_r+0x550>
    8254:	aa23      	add	r2, sp, #140	; 0x8c
    8256:	4621      	mov	r1, r4
    8258:	4658      	mov	r0, fp
    825a:	f002 fd93 	bl	ad84 <__ssprint_r>
    825e:	2800      	cmp	r0, #0
    8260:	f47f ae3c 	bne.w	7edc <_svfprintf_r+0x1f4>
    8264:	3d10      	subs	r5, #16
    8266:	2d10      	cmp	r5, #16
    8268:	9a25      	ldr	r2, [sp, #148]	; 0x94
    826a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    826c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8270:	dce7      	bgt.n	8242 <_svfprintf_r+0x55a>
    8272:	4614      	mov	r4, r2
    8274:	3301      	adds	r3, #1
    8276:	442c      	add	r4, r5
    8278:	2b07      	cmp	r3, #7
    827a:	9425      	str	r4, [sp, #148]	; 0x94
    827c:	9324      	str	r3, [sp, #144]	; 0x90
    827e:	f8c9 7000 	str.w	r7, [r9]
    8282:	f8c9 5004 	str.w	r5, [r9, #4]
    8286:	dd08      	ble.n	829a <_svfprintf_r+0x5b2>
    8288:	aa23      	add	r2, sp, #140	; 0x8c
    828a:	9905      	ldr	r1, [sp, #20]
    828c:	9806      	ldr	r0, [sp, #24]
    828e:	f002 fd79 	bl	ad84 <__ssprint_r>
    8292:	2800      	cmp	r0, #0
    8294:	f47f ae22 	bne.w	7edc <_svfprintf_r+0x1f4>
    8298:	9c25      	ldr	r4, [sp, #148]	; 0x94
    829a:	9b07      	ldr	r3, [sp, #28]
    829c:	9a08      	ldr	r2, [sp, #32]
    829e:	9904      	ldr	r1, [sp, #16]
    82a0:	428a      	cmp	r2, r1
    82a2:	bfac      	ite	ge
    82a4:	189b      	addge	r3, r3, r2
    82a6:	185b      	addlt	r3, r3, r1
    82a8:	9307      	str	r3, [sp, #28]
    82aa:	2c00      	cmp	r4, #0
    82ac:	f040 82df 	bne.w	886e <_svfprintf_r+0xb86>
    82b0:	2300      	movs	r3, #0
    82b2:	9324      	str	r3, [sp, #144]	; 0x90
    82b4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    82b8:	e53d      	b.n	7d36 <_svfprintf_r+0x4e>
    82ba:	930d      	str	r3, [sp, #52]	; 0x34
    82bc:	46ab      	mov	fp, r5
    82be:	2a00      	cmp	r2, #0
    82c0:	f041 8062 	bne.w	9388 <_svfprintf_r+0x16a0>
    82c4:	9b03      	ldr	r3, [sp, #12]
    82c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    82c8:	071a      	lsls	r2, r3, #28
    82ca:	f107 0707 	add.w	r7, r7, #7
    82ce:	f140 8574 	bpl.w	8dba <_svfprintf_r+0x10d2>
    82d2:	f027 0307 	bic.w	r3, r7, #7
    82d6:	ed93 7b00 	vldr	d7, [r3]
    82da:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
    82de:	f103 0208 	add.w	r2, r3, #8
    82e2:	920a      	str	r2, [sp, #40]	; 0x28
    82e4:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    82e8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    82ec:	9116      	str	r1, [sp, #88]	; 0x58
    82ee:	9317      	str	r3, [sp, #92]	; 0x5c
    82f0:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
    82f4:	f04f 32ff 	mov.w	r2, #4294967295
    82f8:	4620      	mov	r0, r4
    82fa:	4629      	mov	r1, r5
    82fc:	4b1b      	ldr	r3, [pc, #108]	; (836c <_svfprintf_r+0x684>)
    82fe:	f7fe fc43 	bl	6b88 <__aeabi_dcmpun>
    8302:	2800      	cmp	r0, #0
    8304:	f040 84da 	bne.w	8cbc <_svfprintf_r+0xfd4>
    8308:	f04f 32ff 	mov.w	r2, #4294967295
    830c:	4b17      	ldr	r3, [pc, #92]	; (836c <_svfprintf_r+0x684>)
    830e:	4620      	mov	r0, r4
    8310:	4629      	mov	r1, r5
    8312:	f7fe fc1b 	bl	6b4c <__aeabi_dcmple>
    8316:	2800      	cmp	r0, #0
    8318:	f040 84d0 	bne.w	8cbc <_svfprintf_r+0xfd4>
    831c:	2200      	movs	r2, #0
    831e:	2300      	movs	r3, #0
    8320:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    8324:	f7fe fc08 	bl	6b38 <__aeabi_dcmplt>
    8328:	2800      	cmp	r0, #0
    832a:	f040 8752 	bne.w	91d2 <_svfprintf_r+0x14ea>
    832e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    8332:	4e0f      	ldr	r6, [pc, #60]	; (8370 <_svfprintf_r+0x688>)
    8334:	4b0f      	ldr	r3, [pc, #60]	; (8374 <_svfprintf_r+0x68c>)
    8336:	9903      	ldr	r1, [sp, #12]
    8338:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    833c:	9103      	str	r1, [sp, #12]
    833e:	990d      	ldr	r1, [sp, #52]	; 0x34
    8340:	2203      	movs	r2, #3
    8342:	f04f 0b00 	mov.w	fp, #0
    8346:	9204      	str	r2, [sp, #16]
    8348:	2947      	cmp	r1, #71	; 0x47
    834a:	bfd8      	it	le
    834c:	461e      	movle	r6, r3
    834e:	9209      	str	r2, [sp, #36]	; 0x24
    8350:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    8354:	e69a      	b.n	808c <_svfprintf_r+0x3a4>
    8356:	9b03      	ldr	r3, [sp, #12]
    8358:	f043 0308 	orr.w	r3, r3, #8
    835c:	9303      	str	r3, [sp, #12]
    835e:	f898 3000 	ldrb.w	r3, [r8]
    8362:	e51b      	b.n	7d9c <_svfprintf_r+0xb4>
    8364:	0000b828 	.word	0x0000b828
    8368:	0000b7dc 	.word	0x0000b7dc
    836c:	7fefffff 	.word	0x7fefffff
    8370:	0000b748 	.word	0x0000b748
    8374:	0000b7ec 	.word	0x0000b7ec
    8378:	930d      	str	r3, [sp, #52]	; 0x34
    837a:	46ab      	mov	fp, r5
    837c:	2a00      	cmp	r2, #0
    837e:	f041 800f 	bne.w	93a0 <_svfprintf_r+0x16b8>
    8382:	9b03      	ldr	r3, [sp, #12]
    8384:	f043 0310 	orr.w	r3, r3, #16
    8388:	9303      	str	r3, [sp, #12]
    838a:	9a03      	ldr	r2, [sp, #12]
    838c:	f012 0320 	ands.w	r3, r2, #32
    8390:	f47f adba 	bne.w	7f08 <_svfprintf_r+0x220>
    8394:	9903      	ldr	r1, [sp, #12]
    8396:	f011 0210 	ands.w	r2, r1, #16
    839a:	f000 845b 	beq.w	8c54 <_svfprintf_r+0xf6c>
    839e:	980a      	ldr	r0, [sp, #40]	; 0x28
    83a0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    83a4:	f1bb 0f00 	cmp.w	fp, #0
    83a8:	6804      	ldr	r4, [r0, #0]
    83aa:	f100 0704 	add.w	r7, r0, #4
    83ae:	f04f 0500 	mov.w	r5, #0
    83b2:	f2c0 8519 	blt.w	8de8 <_svfprintf_r+0x1100>
    83b6:	460a      	mov	r2, r1
    83b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    83bc:	9203      	str	r2, [sp, #12]
    83be:	ea54 0205 	orrs.w	r2, r4, r5
    83c2:	970a      	str	r7, [sp, #40]	; 0x28
    83c4:	f000 813a 	beq.w	863c <_svfprintf_r+0x954>
    83c8:	461f      	mov	r7, r3
    83ca:	e5b3      	b.n	7f34 <_svfprintf_r+0x24c>
    83cc:	930d      	str	r3, [sp, #52]	; 0x34
    83ce:	46ab      	mov	fp, r5
    83d0:	2a00      	cmp	r2, #0
    83d2:	f040 87e1 	bne.w	9398 <_svfprintf_r+0x16b0>
    83d6:	9b03      	ldr	r3, [sp, #12]
    83d8:	f043 0310 	orr.w	r3, r3, #16
    83dc:	9303      	str	r3, [sp, #12]
    83de:	9a03      	ldr	r2, [sp, #12]
    83e0:	f012 0320 	ands.w	r3, r2, #32
    83e4:	f000 832c 	beq.w	8a40 <_svfprintf_r+0xd58>
    83e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    83ea:	3707      	adds	r7, #7
    83ec:	f027 0307 	bic.w	r3, r7, #7
    83f0:	2700      	movs	r7, #0
    83f2:	f103 0108 	add.w	r1, r3, #8
    83f6:	45bb      	cmp	fp, r7
    83f8:	910a      	str	r1, [sp, #40]	; 0x28
    83fa:	e9d3 4500 	ldrd	r4, r5, [r3]
    83fe:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    8402:	f2c0 8356 	blt.w	8ab2 <_svfprintf_r+0xdca>
    8406:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    840a:	9303      	str	r3, [sp, #12]
    840c:	ea54 0305 	orrs.w	r3, r4, r5
    8410:	f47f ae18 	bne.w	8044 <_svfprintf_r+0x35c>
    8414:	f1bb 0f00 	cmp.w	fp, #0
    8418:	f000 80f5 	beq.w	8606 <_svfprintf_r+0x91e>
    841c:	2400      	movs	r4, #0
    841e:	ae40      	add	r6, sp, #256	; 0x100
    8420:	3430      	adds	r4, #48	; 0x30
    8422:	f806 4d41 	strb.w	r4, [r6, #-65]!
    8426:	e627      	b.n	8078 <_svfprintf_r+0x390>
    8428:	930d      	str	r3, [sp, #52]	; 0x34
    842a:	46ab      	mov	fp, r5
    842c:	2a00      	cmp	r2, #0
    842e:	f040 87af 	bne.w	9390 <_svfprintf_r+0x16a8>
    8432:	9b03      	ldr	r3, [sp, #12]
    8434:	48af      	ldr	r0, [pc, #700]	; (86f4 <_svfprintf_r+0xa0c>)
    8436:	069d      	lsls	r5, r3, #26
    8438:	f140 80b5 	bpl.w	85a6 <_svfprintf_r+0x8be>
    843c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    843e:	3707      	adds	r7, #7
    8440:	f027 0307 	bic.w	r3, r7, #7
    8444:	e9d3 4500 	ldrd	r4, r5, [r3]
    8448:	f103 0208 	add.w	r2, r3, #8
    844c:	920a      	str	r2, [sp, #40]	; 0x28
    844e:	9a03      	ldr	r2, [sp, #12]
    8450:	f012 0701 	ands.w	r7, r2, #1
    8454:	f000 8239 	beq.w	88ca <_svfprintf_r+0xbe2>
    8458:	ea54 0305 	orrs.w	r3, r4, r5
    845c:	f000 8502 	beq.w	8e64 <_svfprintf_r+0x117c>
    8460:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    8464:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    8468:	2700      	movs	r7, #0
    846a:	9a03      	ldr	r2, [sp, #12]
    846c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    8470:	2330      	movs	r3, #48	; 0x30
    8472:	45bb      	cmp	fp, r7
    8474:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    8478:	f042 0302 	orr.w	r3, r2, #2
    847c:	f2c0 86ae 	blt.w	91dc <_svfprintf_r+0x14f4>
    8480:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    8484:	f043 0302 	orr.w	r3, r3, #2
    8488:	9303      	str	r3, [sp, #12]
    848a:	ae30      	add	r6, sp, #192	; 0xc0
    848c:	0923      	lsrs	r3, r4, #4
    848e:	f004 010f 	and.w	r1, r4, #15
    8492:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    8496:	092a      	lsrs	r2, r5, #4
    8498:	461c      	mov	r4, r3
    849a:	4615      	mov	r5, r2
    849c:	5c43      	ldrb	r3, [r0, r1]
    849e:	f806 3d01 	strb.w	r3, [r6, #-1]!
    84a2:	ea54 0305 	orrs.w	r3, r4, r5
    84a6:	d1f1      	bne.n	848c <_svfprintf_r+0x7a4>
    84a8:	e5e6      	b.n	8078 <_svfprintf_r+0x390>
    84aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    84ac:	930d      	str	r3, [sp, #52]	; 0x34
    84ae:	680a      	ldr	r2, [r1, #0]
    84b0:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    84b4:	2300      	movs	r3, #0
    84b6:	460a      	mov	r2, r1
    84b8:	461f      	mov	r7, r3
    84ba:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    84be:	3204      	adds	r2, #4
    84c0:	2301      	movs	r3, #1
    84c2:	9304      	str	r3, [sp, #16]
    84c4:	46bb      	mov	fp, r7
    84c6:	970f      	str	r7, [sp, #60]	; 0x3c
    84c8:	920a      	str	r2, [sp, #40]	; 0x28
    84ca:	9309      	str	r3, [sp, #36]	; 0x24
    84cc:	ae26      	add	r6, sp, #152	; 0x98
    84ce:	e5e1      	b.n	8094 <_svfprintf_r+0x3ac>
    84d0:	930d      	str	r3, [sp, #52]	; 0x34
    84d2:	46ab      	mov	fp, r5
    84d4:	2a00      	cmp	r2, #0
    84d6:	f43f ad93 	beq.w	8000 <_svfprintf_r+0x318>
    84da:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    84de:	e58f      	b.n	8000 <_svfprintf_r+0x318>
    84e0:	9b03      	ldr	r3, [sp, #12]
    84e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    84e6:	9303      	str	r3, [sp, #12]
    84e8:	f898 3000 	ldrb.w	r3, [r8]
    84ec:	e456      	b.n	7d9c <_svfprintf_r+0xb4>
    84ee:	f898 3000 	ldrb.w	r3, [r8]
    84f2:	2900      	cmp	r1, #0
    84f4:	f47f ac52 	bne.w	7d9c <_svfprintf_r+0xb4>
    84f8:	2201      	movs	r2, #1
    84fa:	2120      	movs	r1, #32
    84fc:	e44e      	b.n	7d9c <_svfprintf_r+0xb4>
    84fe:	9b03      	ldr	r3, [sp, #12]
    8500:	f043 0301 	orr.w	r3, r3, #1
    8504:	9303      	str	r3, [sp, #12]
    8506:	f898 3000 	ldrb.w	r3, [r8]
    850a:	e447      	b.n	7d9c <_svfprintf_r+0xb4>
    850c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    850e:	6823      	ldr	r3, [r4, #0]
    8510:	9308      	str	r3, [sp, #32]
    8512:	4618      	mov	r0, r3
    8514:	2800      	cmp	r0, #0
    8516:	4623      	mov	r3, r4
    8518:	f103 0304 	add.w	r3, r3, #4
    851c:	f6ff aca0 	blt.w	7e60 <_svfprintf_r+0x178>
    8520:	930a      	str	r3, [sp, #40]	; 0x28
    8522:	f898 3000 	ldrb.w	r3, [r8]
    8526:	e439      	b.n	7d9c <_svfprintf_r+0xb4>
    8528:	f898 3000 	ldrb.w	r3, [r8]
    852c:	2201      	movs	r2, #1
    852e:	212b      	movs	r1, #43	; 0x2b
    8530:	e434      	b.n	7d9c <_svfprintf_r+0xb4>
    8532:	9b03      	ldr	r3, [sp, #12]
    8534:	f043 0320 	orr.w	r3, r3, #32
    8538:	9303      	str	r3, [sp, #12]
    853a:	f898 3000 	ldrb.w	r3, [r8]
    853e:	e42d      	b.n	7d9c <_svfprintf_r+0xb4>
    8540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8542:	930d      	str	r3, [sp, #52]	; 0x34
    8544:	6816      	ldr	r6, [r2, #0]
    8546:	2400      	movs	r4, #0
    8548:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
    854c:	1d17      	adds	r7, r2, #4
    854e:	2e00      	cmp	r6, #0
    8550:	f000 861c 	beq.w	918c <_svfprintf_r+0x14a4>
    8554:	2d00      	cmp	r5, #0
    8556:	f2c0 8561 	blt.w	901c <_svfprintf_r+0x1334>
    855a:	462a      	mov	r2, r5
    855c:	4621      	mov	r1, r4
    855e:	4630      	mov	r0, r6
    8560:	f002 f8ae 	bl	a6c0 <memchr>
    8564:	2800      	cmp	r0, #0
    8566:	f000 8663 	beq.w	9230 <_svfprintf_r+0x1548>
    856a:	1b83      	subs	r3, r0, r6
    856c:	9309      	str	r3, [sp, #36]	; 0x24
    856e:	46a3      	mov	fp, r4
    8570:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8574:	970a      	str	r7, [sp, #40]	; 0x28
    8576:	9304      	str	r3, [sp, #16]
    8578:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    857c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    8580:	e584      	b.n	808c <_svfprintf_r+0x3a4>
    8582:	930d      	str	r3, [sp, #52]	; 0x34
    8584:	46ab      	mov	fp, r5
    8586:	2a00      	cmp	r2, #0
    8588:	f43f af29 	beq.w	83de <_svfprintf_r+0x6f6>
    858c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    8590:	e725      	b.n	83de <_svfprintf_r+0x6f6>
    8592:	930d      	str	r3, [sp, #52]	; 0x34
    8594:	46ab      	mov	fp, r5
    8596:	2a00      	cmp	r2, #0
    8598:	f040 870e 	bne.w	93b8 <_svfprintf_r+0x16d0>
    859c:	9b03      	ldr	r3, [sp, #12]
    859e:	4856      	ldr	r0, [pc, #344]	; (86f8 <_svfprintf_r+0xa10>)
    85a0:	069d      	lsls	r5, r3, #26
    85a2:	f53f af4b 	bmi.w	843c <_svfprintf_r+0x754>
    85a6:	9b03      	ldr	r3, [sp, #12]
    85a8:	06dc      	lsls	r4, r3, #27
    85aa:	f140 843e 	bpl.w	8e2a <_svfprintf_r+0x1142>
    85ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    85b0:	4613      	mov	r3, r2
    85b2:	3304      	adds	r3, #4
    85b4:	6814      	ldr	r4, [r2, #0]
    85b6:	930a      	str	r3, [sp, #40]	; 0x28
    85b8:	2500      	movs	r5, #0
    85ba:	e748      	b.n	844e <_svfprintf_r+0x766>
    85bc:	f898 3000 	ldrb.w	r3, [r8]
    85c0:	2b6c      	cmp	r3, #108	; 0x6c
    85c2:	f000 84c2 	beq.w	8f4a <_svfprintf_r+0x1262>
    85c6:	9803      	ldr	r0, [sp, #12]
    85c8:	f040 0010 	orr.w	r0, r0, #16
    85cc:	9003      	str	r0, [sp, #12]
    85ce:	f7ff bbe5 	b.w	7d9c <_svfprintf_r+0xb4>
    85d2:	2a00      	cmp	r2, #0
    85d4:	f040 86ec 	bne.w	93b0 <_svfprintf_r+0x16c8>
    85d8:	9b03      	ldr	r3, [sp, #12]
    85da:	069b      	lsls	r3, r3, #26
    85dc:	f140 8357 	bpl.w	8c8e <_svfprintf_r+0xfa6>
    85e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    85e2:	9907      	ldr	r1, [sp, #28]
    85e4:	6813      	ldr	r3, [r2, #0]
    85e6:	17cd      	asrs	r5, r1, #31
    85e8:	4608      	mov	r0, r1
    85ea:	3204      	adds	r2, #4
    85ec:	4629      	mov	r1, r5
    85ee:	920a      	str	r2, [sp, #40]	; 0x28
    85f0:	e9c3 0100 	strd	r0, r1, [r3]
    85f4:	f7ff bb9f 	b.w	7d36 <_svfprintf_r+0x4e>
    85f8:	483f      	ldr	r0, [pc, #252]	; (86f8 <_svfprintf_r+0xa10>)
    85fa:	920d      	str	r2, [sp, #52]	; 0x34
    85fc:	f1bb 0f00 	cmp.w	fp, #0
    8600:	f040 8174 	bne.w	88ec <_svfprintf_r+0xc04>
    8604:	465f      	mov	r7, fp
    8606:	f04f 0b00 	mov.w	fp, #0
    860a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    860e:	ae30      	add	r6, sp, #192	; 0xc0
    8610:	e535      	b.n	807e <_svfprintf_r+0x396>
    8612:	930d      	str	r3, [sp, #52]	; 0x34
    8614:	2a00      	cmp	r2, #0
    8616:	f040 86c7 	bne.w	93a8 <_svfprintf_r+0x16c0>
    861a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    861c:	2a00      	cmp	r2, #0
    861e:	f43f ac56 	beq.w	7ece <_svfprintf_r+0x1e6>
    8622:	2300      	movs	r3, #0
    8624:	2101      	movs	r1, #1
    8626:	461f      	mov	r7, r3
    8628:	9104      	str	r1, [sp, #16]
    862a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    862e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    8632:	469b      	mov	fp, r3
    8634:	930f      	str	r3, [sp, #60]	; 0x3c
    8636:	9109      	str	r1, [sp, #36]	; 0x24
    8638:	ae26      	add	r6, sp, #152	; 0x98
    863a:	e52b      	b.n	8094 <_svfprintf_r+0x3ac>
    863c:	f1bb 0f00 	cmp.w	fp, #0
    8640:	f000 860e 	beq.w	9260 <_svfprintf_r+0x1578>
    8644:	2700      	movs	r7, #0
    8646:	2400      	movs	r4, #0
    8648:	2500      	movs	r5, #0
    864a:	e473      	b.n	7f34 <_svfprintf_r+0x24c>
    864c:	482a      	ldr	r0, [pc, #168]	; (86f8 <_svfprintf_r+0xa10>)
    864e:	9303      	str	r3, [sp, #12]
    8650:	920d      	str	r2, [sp, #52]	; 0x34
    8652:	ea54 0305 	orrs.w	r3, r4, r5
    8656:	970a      	str	r7, [sp, #40]	; 0x28
    8658:	f04f 0700 	mov.w	r7, #0
    865c:	f47f af15 	bne.w	848a <_svfprintf_r+0x7a2>
    8660:	2400      	movs	r4, #0
    8662:	2500      	movs	r5, #0
    8664:	e711      	b.n	848a <_svfprintf_r+0x7a2>
    8666:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8668:	e564      	b.n	8134 <_svfprintf_r+0x44c>
    866a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    866c:	2b65      	cmp	r3, #101	; 0x65
    866e:	f340 80aa 	ble.w	87c6 <_svfprintf_r+0xade>
    8672:	2200      	movs	r2, #0
    8674:	2300      	movs	r3, #0
    8676:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    867a:	f7fe fa53 	bl	6b24 <__aeabi_dcmpeq>
    867e:	2800      	cmp	r0, #0
    8680:	f000 8136 	beq.w	88f0 <_svfprintf_r+0xc08>
    8684:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8686:	4a1d      	ldr	r2, [pc, #116]	; (86fc <_svfprintf_r+0xa14>)
    8688:	f8c9 2000 	str.w	r2, [r9]
    868c:	3301      	adds	r3, #1
    868e:	3401      	adds	r4, #1
    8690:	2201      	movs	r2, #1
    8692:	2b07      	cmp	r3, #7
    8694:	9425      	str	r4, [sp, #148]	; 0x94
    8696:	9324      	str	r3, [sp, #144]	; 0x90
    8698:	f8c9 2004 	str.w	r2, [r9, #4]
    869c:	f300 83ee 	bgt.w	8e7c <_svfprintf_r+0x1194>
    86a0:	f109 0908 	add.w	r9, r9, #8
    86a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    86a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    86a8:	4293      	cmp	r3, r2
    86aa:	db03      	blt.n	86b4 <_svfprintf_r+0x9cc>
    86ac:	9b03      	ldr	r3, [sp, #12]
    86ae:	07db      	lsls	r3, r3, #31
    86b0:	f57f adb0 	bpl.w	8214 <_svfprintf_r+0x52c>
    86b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    86b6:	9912      	ldr	r1, [sp, #72]	; 0x48
    86b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    86ba:	f8c9 2000 	str.w	r2, [r9]
    86be:	3301      	adds	r3, #1
    86c0:	440c      	add	r4, r1
    86c2:	2b07      	cmp	r3, #7
    86c4:	9425      	str	r4, [sp, #148]	; 0x94
    86c6:	f8c9 1004 	str.w	r1, [r9, #4]
    86ca:	9324      	str	r3, [sp, #144]	; 0x90
    86cc:	f300 8447 	bgt.w	8f5e <_svfprintf_r+0x1276>
    86d0:	f109 0908 	add.w	r9, r9, #8
    86d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    86d6:	1e5d      	subs	r5, r3, #1
    86d8:	2d00      	cmp	r5, #0
    86da:	f77f ad9b 	ble.w	8214 <_svfprintf_r+0x52c>
    86de:	4a08      	ldr	r2, [pc, #32]	; (8700 <_svfprintf_r+0xa18>)
    86e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    86e2:	920b      	str	r2, [sp, #44]	; 0x2c
    86e4:	2d10      	cmp	r5, #16
    86e6:	f340 81e9 	ble.w	8abc <_svfprintf_r+0xdd4>
    86ea:	2610      	movs	r6, #16
    86ec:	9f06      	ldr	r7, [sp, #24]
    86ee:	f8dd b014 	ldr.w	fp, [sp, #20]
    86f2:	e00d      	b.n	8710 <_svfprintf_r+0xa28>
    86f4:	0000b7f4 	.word	0x0000b7f4
    86f8:	0000b808 	.word	0x0000b808
    86fc:	0000b824 	.word	0x0000b824
    8700:	0000b7dc 	.word	0x0000b7dc
    8704:	f109 0908 	add.w	r9, r9, #8
    8708:	3d10      	subs	r5, #16
    870a:	2d10      	cmp	r5, #16
    870c:	f340 81d6 	ble.w	8abc <_svfprintf_r+0xdd4>
    8710:	3301      	adds	r3, #1
    8712:	3410      	adds	r4, #16
    8714:	2b07      	cmp	r3, #7
    8716:	9425      	str	r4, [sp, #148]	; 0x94
    8718:	9324      	str	r3, [sp, #144]	; 0x90
    871a:	f8c9 a000 	str.w	sl, [r9]
    871e:	f8c9 6004 	str.w	r6, [r9, #4]
    8722:	ddef      	ble.n	8704 <_svfprintf_r+0xa1c>
    8724:	aa23      	add	r2, sp, #140	; 0x8c
    8726:	4659      	mov	r1, fp
    8728:	4638      	mov	r0, r7
    872a:	f002 fb2b 	bl	ad84 <__ssprint_r>
    872e:	2800      	cmp	r0, #0
    8730:	f47f abd4 	bne.w	7edc <_svfprintf_r+0x1f4>
    8734:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8736:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8738:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    873c:	e7e4      	b.n	8708 <_svfprintf_r+0xa20>
    873e:	9b08      	ldr	r3, [sp, #32]
    8740:	9a04      	ldr	r2, [sp, #16]
    8742:	1a9f      	subs	r7, r3, r2
    8744:	2f00      	cmp	r7, #0
    8746:	f77f ad19 	ble.w	817c <_svfprintf_r+0x494>
    874a:	4abc      	ldr	r2, [pc, #752]	; (8a3c <_svfprintf_r+0xd54>)
    874c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    874e:	920b      	str	r2, [sp, #44]	; 0x2c
    8750:	2f10      	cmp	r7, #16
    8752:	dd2b      	ble.n	87ac <_svfprintf_r+0xac4>
    8754:	464a      	mov	r2, r9
    8756:	4621      	mov	r1, r4
    8758:	46b9      	mov	r9, r7
    875a:	2510      	movs	r5, #16
    875c:	4637      	mov	r7, r6
    875e:	9c06      	ldr	r4, [sp, #24]
    8760:	9e05      	ldr	r6, [sp, #20]
    8762:	e006      	b.n	8772 <_svfprintf_r+0xa8a>
    8764:	f1a9 0910 	sub.w	r9, r9, #16
    8768:	f1b9 0f10 	cmp.w	r9, #16
    876c:	f102 0208 	add.w	r2, r2, #8
    8770:	dd18      	ble.n	87a4 <_svfprintf_r+0xabc>
    8772:	3301      	adds	r3, #1
    8774:	3110      	adds	r1, #16
    8776:	2b07      	cmp	r3, #7
    8778:	9125      	str	r1, [sp, #148]	; 0x94
    877a:	9324      	str	r3, [sp, #144]	; 0x90
    877c:	f8c2 a000 	str.w	sl, [r2]
    8780:	6055      	str	r5, [r2, #4]
    8782:	ddef      	ble.n	8764 <_svfprintf_r+0xa7c>
    8784:	aa23      	add	r2, sp, #140	; 0x8c
    8786:	4631      	mov	r1, r6
    8788:	4620      	mov	r0, r4
    878a:	f002 fafb 	bl	ad84 <__ssprint_r>
    878e:	2800      	cmp	r0, #0
    8790:	f47f aba4 	bne.w	7edc <_svfprintf_r+0x1f4>
    8794:	f1a9 0910 	sub.w	r9, r9, #16
    8798:	f1b9 0f10 	cmp.w	r9, #16
    879c:	9925      	ldr	r1, [sp, #148]	; 0x94
    879e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    87a0:	aa30      	add	r2, sp, #192	; 0xc0
    87a2:	dce6      	bgt.n	8772 <_svfprintf_r+0xa8a>
    87a4:	463e      	mov	r6, r7
    87a6:	460c      	mov	r4, r1
    87a8:	464f      	mov	r7, r9
    87aa:	4691      	mov	r9, r2
    87ac:	3301      	adds	r3, #1
    87ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    87b0:	9324      	str	r3, [sp, #144]	; 0x90
    87b2:	443c      	add	r4, r7
    87b4:	2b07      	cmp	r3, #7
    87b6:	9425      	str	r4, [sp, #148]	; 0x94
    87b8:	e889 0084 	stmia.w	r9, {r2, r7}
    87bc:	f300 823d 	bgt.w	8c3a <_svfprintf_r+0xf52>
    87c0:	f109 0908 	add.w	r9, r9, #8
    87c4:	e4da      	b.n	817c <_svfprintf_r+0x494>
    87c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    87c8:	9d24      	ldr	r5, [sp, #144]	; 0x90
    87ca:	2b01      	cmp	r3, #1
    87cc:	f340 820a 	ble.w	8be4 <_svfprintf_r+0xefc>
    87d0:	3501      	adds	r5, #1
    87d2:	3401      	adds	r4, #1
    87d4:	2301      	movs	r3, #1
    87d6:	2d07      	cmp	r5, #7
    87d8:	9425      	str	r4, [sp, #148]	; 0x94
    87da:	9524      	str	r5, [sp, #144]	; 0x90
    87dc:	f8c9 6000 	str.w	r6, [r9]
    87e0:	f8c9 3004 	str.w	r3, [r9, #4]
    87e4:	f300 820f 	bgt.w	8c06 <_svfprintf_r+0xf1e>
    87e8:	f109 0908 	add.w	r9, r9, #8
    87ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
    87ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    87f0:	f8c9 3000 	str.w	r3, [r9]
    87f4:	3501      	adds	r5, #1
    87f6:	4414      	add	r4, r2
    87f8:	2d07      	cmp	r5, #7
    87fa:	9425      	str	r4, [sp, #148]	; 0x94
    87fc:	9524      	str	r5, [sp, #144]	; 0x90
    87fe:	f8c9 2004 	str.w	r2, [r9, #4]
    8802:	f300 820d 	bgt.w	8c20 <_svfprintf_r+0xf38>
    8806:	f109 0908 	add.w	r9, r9, #8
    880a:	2300      	movs	r3, #0
    880c:	2200      	movs	r2, #0
    880e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    8812:	f7fe f987 	bl	6b24 <__aeabi_dcmpeq>
    8816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8818:	2800      	cmp	r0, #0
    881a:	f040 80c3 	bne.w	89a4 <_svfprintf_r+0xcbc>
    881e:	3b01      	subs	r3, #1
    8820:	3501      	adds	r5, #1
    8822:	3601      	adds	r6, #1
    8824:	441c      	add	r4, r3
    8826:	2d07      	cmp	r5, #7
    8828:	9524      	str	r5, [sp, #144]	; 0x90
    882a:	9425      	str	r4, [sp, #148]	; 0x94
    882c:	f8c9 6000 	str.w	r6, [r9]
    8830:	f8c9 3004 	str.w	r3, [r9, #4]
    8834:	f300 80f5 	bgt.w	8a22 <_svfprintf_r+0xd3a>
    8838:	f109 0908 	add.w	r9, r9, #8
    883c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    883e:	f8c9 2004 	str.w	r2, [r9, #4]
    8842:	3501      	adds	r5, #1
    8844:	4414      	add	r4, r2
    8846:	ab1f      	add	r3, sp, #124	; 0x7c
    8848:	2d07      	cmp	r5, #7
    884a:	9425      	str	r4, [sp, #148]	; 0x94
    884c:	9524      	str	r5, [sp, #144]	; 0x90
    884e:	f8c9 3000 	str.w	r3, [r9]
    8852:	f77f acdd 	ble.w	8210 <_svfprintf_r+0x528>
    8856:	aa23      	add	r2, sp, #140	; 0x8c
    8858:	9905      	ldr	r1, [sp, #20]
    885a:	9806      	ldr	r0, [sp, #24]
    885c:	f002 fa92 	bl	ad84 <__ssprint_r>
    8860:	2800      	cmp	r0, #0
    8862:	f47f ab3b 	bne.w	7edc <_svfprintf_r+0x1f4>
    8866:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8868:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    886c:	e4d2      	b.n	8214 <_svfprintf_r+0x52c>
    886e:	aa23      	add	r2, sp, #140	; 0x8c
    8870:	9905      	ldr	r1, [sp, #20]
    8872:	9806      	ldr	r0, [sp, #24]
    8874:	f002 fa86 	bl	ad84 <__ssprint_r>
    8878:	2800      	cmp	r0, #0
    887a:	f43f ad19 	beq.w	82b0 <_svfprintf_r+0x5c8>
    887e:	f7ff bb2d 	b.w	7edc <_svfprintf_r+0x1f4>
    8882:	aa23      	add	r2, sp, #140	; 0x8c
    8884:	9905      	ldr	r1, [sp, #20]
    8886:	9806      	ldr	r0, [sp, #24]
    8888:	f002 fa7c 	bl	ad84 <__ssprint_r>
    888c:	2800      	cmp	r0, #0
    888e:	f47f ab25 	bne.w	7edc <_svfprintf_r+0x1f4>
    8892:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8894:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8898:	e4a9      	b.n	81ee <_svfprintf_r+0x506>
    889a:	aa23      	add	r2, sp, #140	; 0x8c
    889c:	9905      	ldr	r1, [sp, #20]
    889e:	9806      	ldr	r0, [sp, #24]
    88a0:	f002 fa70 	bl	ad84 <__ssprint_r>
    88a4:	2800      	cmp	r0, #0
    88a6:	f47f ab19 	bne.w	7edc <_svfprintf_r+0x1f4>
    88aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
    88ac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    88b0:	e450      	b.n	8154 <_svfprintf_r+0x46c>
    88b2:	aa23      	add	r2, sp, #140	; 0x8c
    88b4:	9905      	ldr	r1, [sp, #20]
    88b6:	9806      	ldr	r0, [sp, #24]
    88b8:	f002 fa64 	bl	ad84 <__ssprint_r>
    88bc:	2800      	cmp	r0, #0
    88be:	f47f ab0d 	bne.w	7edc <_svfprintf_r+0x1f4>
    88c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
    88c4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    88c8:	e454      	b.n	8174 <_svfprintf_r+0x48c>
    88ca:	f1bb 0f00 	cmp.w	fp, #0
    88ce:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    88d2:	f2c0 82df 	blt.w	8e94 <_svfprintf_r+0x11ac>
    88d6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    88da:	9303      	str	r3, [sp, #12]
    88dc:	ea54 0305 	orrs.w	r3, r4, r5
    88e0:	f47f add3 	bne.w	848a <_svfprintf_r+0x7a2>
    88e4:	f1bb 0f00 	cmp.w	fp, #0
    88e8:	f43f ae8c 	beq.w	8604 <_svfprintf_r+0x91c>
    88ec:	2700      	movs	r7, #0
    88ee:	e6b7      	b.n	8660 <_svfprintf_r+0x978>
    88f0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    88f2:	2d00      	cmp	r5, #0
    88f4:	f340 82d1 	ble.w	8e9a <_svfprintf_r+0x11b2>
    88f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    88fc:	4293      	cmp	r3, r2
    88fe:	bfa8      	it	ge
    8900:	4613      	movge	r3, r2
    8902:	2b00      	cmp	r3, #0
    8904:	461d      	mov	r5, r3
    8906:	dd0d      	ble.n	8924 <_svfprintf_r+0xc3c>
    8908:	9b24      	ldr	r3, [sp, #144]	; 0x90
    890a:	f8c9 6000 	str.w	r6, [r9]
    890e:	3301      	adds	r3, #1
    8910:	442c      	add	r4, r5
    8912:	2b07      	cmp	r3, #7
    8914:	9425      	str	r4, [sp, #148]	; 0x94
    8916:	f8c9 5004 	str.w	r5, [r9, #4]
    891a:	9324      	str	r3, [sp, #144]	; 0x90
    891c:	f300 83a9 	bgt.w	9072 <_svfprintf_r+0x138a>
    8920:	f109 0908 	add.w	r9, r9, #8
    8924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8926:	2d00      	cmp	r5, #0
    8928:	bfa8      	it	ge
    892a:	1b5b      	subge	r3, r3, r5
    892c:	2b00      	cmp	r3, #0
    892e:	461d      	mov	r5, r3
    8930:	f340 80f8 	ble.w	8b24 <_svfprintf_r+0xe3c>
    8934:	4a41      	ldr	r2, [pc, #260]	; (8a3c <_svfprintf_r+0xd54>)
    8936:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8938:	920b      	str	r2, [sp, #44]	; 0x2c
    893a:	2d10      	cmp	r5, #16
    893c:	f340 8283 	ble.w	8e46 <_svfprintf_r+0x115e>
    8940:	4622      	mov	r2, r4
    8942:	2710      	movs	r7, #16
    8944:	f8dd b018 	ldr.w	fp, [sp, #24]
    8948:	9c05      	ldr	r4, [sp, #20]
    894a:	e005      	b.n	8958 <_svfprintf_r+0xc70>
    894c:	f109 0908 	add.w	r9, r9, #8
    8950:	3d10      	subs	r5, #16
    8952:	2d10      	cmp	r5, #16
    8954:	f340 8276 	ble.w	8e44 <_svfprintf_r+0x115c>
    8958:	3301      	adds	r3, #1
    895a:	3210      	adds	r2, #16
    895c:	2b07      	cmp	r3, #7
    895e:	9225      	str	r2, [sp, #148]	; 0x94
    8960:	9324      	str	r3, [sp, #144]	; 0x90
    8962:	f8c9 a000 	str.w	sl, [r9]
    8966:	f8c9 7004 	str.w	r7, [r9, #4]
    896a:	ddef      	ble.n	894c <_svfprintf_r+0xc64>
    896c:	aa23      	add	r2, sp, #140	; 0x8c
    896e:	4621      	mov	r1, r4
    8970:	4658      	mov	r0, fp
    8972:	f002 fa07 	bl	ad84 <__ssprint_r>
    8976:	2800      	cmp	r0, #0
    8978:	f47f aab0 	bne.w	7edc <_svfprintf_r+0x1f4>
    897c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    897e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8980:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8984:	e7e4      	b.n	8950 <_svfprintf_r+0xc68>
    8986:	aa23      	add	r2, sp, #140	; 0x8c
    8988:	9905      	ldr	r1, [sp, #20]
    898a:	9806      	ldr	r0, [sp, #24]
    898c:	f002 f9fa 	bl	ad84 <__ssprint_r>
    8990:	2800      	cmp	r0, #0
    8992:	f47f aaa3 	bne.w	7edc <_svfprintf_r+0x1f4>
    8996:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    899a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    899c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    89a0:	f7ff bbc8 	b.w	8134 <_svfprintf_r+0x44c>
    89a4:	1e5e      	subs	r6, r3, #1
    89a6:	2e00      	cmp	r6, #0
    89a8:	f77f af48 	ble.w	883c <_svfprintf_r+0xb54>
    89ac:	4b23      	ldr	r3, [pc, #140]	; (8a3c <_svfprintf_r+0xd54>)
    89ae:	930b      	str	r3, [sp, #44]	; 0x2c
    89b0:	2e10      	cmp	r6, #16
    89b2:	dd2c      	ble.n	8a0e <_svfprintf_r+0xd26>
    89b4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    89b8:	2710      	movs	r7, #16
    89ba:	46b0      	mov	r8, r6
    89bc:	f8dd b018 	ldr.w	fp, [sp, #24]
    89c0:	9e05      	ldr	r6, [sp, #20]
    89c2:	e006      	b.n	89d2 <_svfprintf_r+0xcea>
    89c4:	f1a8 0810 	sub.w	r8, r8, #16
    89c8:	f1b8 0f10 	cmp.w	r8, #16
    89cc:	f109 0908 	add.w	r9, r9, #8
    89d0:	dd1a      	ble.n	8a08 <_svfprintf_r+0xd20>
    89d2:	3501      	adds	r5, #1
    89d4:	3410      	adds	r4, #16
    89d6:	2d07      	cmp	r5, #7
    89d8:	9425      	str	r4, [sp, #148]	; 0x94
    89da:	9524      	str	r5, [sp, #144]	; 0x90
    89dc:	f8c9 a000 	str.w	sl, [r9]
    89e0:	f8c9 7004 	str.w	r7, [r9, #4]
    89e4:	ddee      	ble.n	89c4 <_svfprintf_r+0xcdc>
    89e6:	aa23      	add	r2, sp, #140	; 0x8c
    89e8:	4631      	mov	r1, r6
    89ea:	4658      	mov	r0, fp
    89ec:	f002 f9ca 	bl	ad84 <__ssprint_r>
    89f0:	2800      	cmp	r0, #0
    89f2:	f47f aa73 	bne.w	7edc <_svfprintf_r+0x1f4>
    89f6:	f1a8 0810 	sub.w	r8, r8, #16
    89fa:	f1b8 0f10 	cmp.w	r8, #16
    89fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8a00:	9d24      	ldr	r5, [sp, #144]	; 0x90
    8a02:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8a06:	dce4      	bgt.n	89d2 <_svfprintf_r+0xcea>
    8a08:	4646      	mov	r6, r8
    8a0a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    8a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8a10:	3501      	adds	r5, #1
    8a12:	4434      	add	r4, r6
    8a14:	2d07      	cmp	r5, #7
    8a16:	9425      	str	r4, [sp, #148]	; 0x94
    8a18:	9524      	str	r5, [sp, #144]	; 0x90
    8a1a:	e889 0048 	stmia.w	r9, {r3, r6}
    8a1e:	f77f af0b 	ble.w	8838 <_svfprintf_r+0xb50>
    8a22:	aa23      	add	r2, sp, #140	; 0x8c
    8a24:	9905      	ldr	r1, [sp, #20]
    8a26:	9806      	ldr	r0, [sp, #24]
    8a28:	f002 f9ac 	bl	ad84 <__ssprint_r>
    8a2c:	2800      	cmp	r0, #0
    8a2e:	f47f aa55 	bne.w	7edc <_svfprintf_r+0x1f4>
    8a32:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8a34:	9d24      	ldr	r5, [sp, #144]	; 0x90
    8a36:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8a3a:	e6ff      	b.n	883c <_svfprintf_r+0xb54>
    8a3c:	0000b7dc 	.word	0x0000b7dc
    8a40:	9903      	ldr	r1, [sp, #12]
    8a42:	f011 0210 	ands.w	r2, r1, #16
    8a46:	f000 81d3 	beq.w	8df0 <_svfprintf_r+0x1108>
    8a4a:	980a      	ldr	r0, [sp, #40]	; 0x28
    8a4c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    8a50:	f1bb 0f00 	cmp.w	fp, #0
    8a54:	6804      	ldr	r4, [r0, #0]
    8a56:	f100 0704 	add.w	r7, r0, #4
    8a5a:	f04f 0500 	mov.w	r5, #0
    8a5e:	db26      	blt.n	8aae <_svfprintf_r+0xdc6>
    8a60:	460a      	mov	r2, r1
    8a62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    8a66:	9203      	str	r2, [sp, #12]
    8a68:	ea54 0205 	orrs.w	r2, r4, r5
    8a6c:	970a      	str	r7, [sp, #40]	; 0x28
    8a6e:	461f      	mov	r7, r3
    8a70:	f47f aae8 	bne.w	8044 <_svfprintf_r+0x35c>
    8a74:	e4ce      	b.n	8414 <_svfprintf_r+0x72c>
    8a76:	9b03      	ldr	r3, [sp, #12]
    8a78:	06d8      	lsls	r0, r3, #27
    8a7a:	d42a      	bmi.n	8ad2 <_svfprintf_r+0xdea>
    8a7c:	9b03      	ldr	r3, [sp, #12]
    8a7e:	0659      	lsls	r1, r3, #25
    8a80:	d527      	bpl.n	8ad2 <_svfprintf_r+0xdea>
    8a82:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a84:	f9b1 4000 	ldrsh.w	r4, [r1]
    8a88:	3104      	adds	r1, #4
    8a8a:	17e5      	asrs	r5, r4, #31
    8a8c:	4622      	mov	r2, r4
    8a8e:	462b      	mov	r3, r5
    8a90:	910a      	str	r1, [sp, #40]	; 0x28
    8a92:	f7ff bac4 	b.w	801e <_svfprintf_r+0x336>
    8a96:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a98:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    8a9c:	f1bb 0f00 	cmp.w	fp, #0
    8aa0:	680c      	ldr	r4, [r1, #0]
    8aa2:	f101 0704 	add.w	r7, r1, #4
    8aa6:	f04f 0500 	mov.w	r5, #0
    8aaa:	f280 824c 	bge.w	8f46 <_svfprintf_r+0x125e>
    8aae:	970a      	str	r7, [sp, #40]	; 0x28
    8ab0:	461f      	mov	r7, r3
    8ab2:	ea54 0305 	orrs.w	r3, r4, r5
    8ab6:	f47f aac5 	bne.w	8044 <_svfprintf_r+0x35c>
    8aba:	e4b0      	b.n	841e <_svfprintf_r+0x736>
    8abc:	3301      	adds	r3, #1
    8abe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8ac0:	9324      	str	r3, [sp, #144]	; 0x90
    8ac2:	442c      	add	r4, r5
    8ac4:	2b07      	cmp	r3, #7
    8ac6:	9425      	str	r4, [sp, #148]	; 0x94
    8ac8:	e889 0024 	stmia.w	r9, {r2, r5}
    8acc:	f77f aba0 	ble.w	8210 <_svfprintf_r+0x528>
    8ad0:	e6c1      	b.n	8856 <_svfprintf_r+0xb6e>
    8ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8ad4:	6814      	ldr	r4, [r2, #0]
    8ad6:	4613      	mov	r3, r2
    8ad8:	3304      	adds	r3, #4
    8ada:	17e5      	asrs	r5, r4, #31
    8adc:	4622      	mov	r2, r4
    8ade:	930a      	str	r3, [sp, #40]	; 0x28
    8ae0:	2a00      	cmp	r2, #0
    8ae2:	462b      	mov	r3, r5
    8ae4:	f173 0300 	sbcs.w	r3, r3, #0
    8ae8:	f6bf aa9e 	bge.w	8028 <_svfprintf_r+0x340>
    8aec:	4264      	negs	r4, r4
    8aee:	f04f 072d 	mov.w	r7, #45	; 0x2d
    8af2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    8af6:	f1bb 0f00 	cmp.w	fp, #0
    8afa:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    8afe:	f6ff aaa1 	blt.w	8044 <_svfprintf_r+0x35c>
    8b02:	9b03      	ldr	r3, [sp, #12]
    8b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8b08:	9303      	str	r3, [sp, #12]
    8b0a:	f7ff ba9b 	b.w	8044 <_svfprintf_r+0x35c>
    8b0e:	aa23      	add	r2, sp, #140	; 0x8c
    8b10:	9905      	ldr	r1, [sp, #20]
    8b12:	9806      	ldr	r0, [sp, #24]
    8b14:	f002 f936 	bl	ad84 <__ssprint_r>
    8b18:	2800      	cmp	r0, #0
    8b1a:	f47f a9df 	bne.w	7edc <_svfprintf_r+0x1f4>
    8b1e:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8b20:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8b24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8b26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8b28:	4432      	add	r2, r6
    8b2a:	4617      	mov	r7, r2
    8b2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8b2e:	4293      	cmp	r3, r2
    8b30:	db47      	blt.n	8bc2 <_svfprintf_r+0xeda>
    8b32:	9a03      	ldr	r2, [sp, #12]
    8b34:	07d5      	lsls	r5, r2, #31
    8b36:	d444      	bmi.n	8bc2 <_svfprintf_r+0xeda>
    8b38:	990e      	ldr	r1, [sp, #56]	; 0x38
    8b3a:	440e      	add	r6, r1
    8b3c:	1bf5      	subs	r5, r6, r7
    8b3e:	1acb      	subs	r3, r1, r3
    8b40:	429d      	cmp	r5, r3
    8b42:	bfa8      	it	ge
    8b44:	461d      	movge	r5, r3
    8b46:	2d00      	cmp	r5, #0
    8b48:	462e      	mov	r6, r5
    8b4a:	dd0d      	ble.n	8b68 <_svfprintf_r+0xe80>
    8b4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8b4e:	f8c9 7000 	str.w	r7, [r9]
    8b52:	3201      	adds	r2, #1
    8b54:	442c      	add	r4, r5
    8b56:	2a07      	cmp	r2, #7
    8b58:	9425      	str	r4, [sp, #148]	; 0x94
    8b5a:	f8c9 5004 	str.w	r5, [r9, #4]
    8b5e:	9224      	str	r2, [sp, #144]	; 0x90
    8b60:	f300 82fe 	bgt.w	9160 <_svfprintf_r+0x1478>
    8b64:	f109 0908 	add.w	r9, r9, #8
    8b68:	2e00      	cmp	r6, #0
    8b6a:	bfac      	ite	ge
    8b6c:	1b9d      	subge	r5, r3, r6
    8b6e:	461d      	movlt	r5, r3
    8b70:	2d00      	cmp	r5, #0
    8b72:	f77f ab4f 	ble.w	8214 <_svfprintf_r+0x52c>
    8b76:	4aba      	ldr	r2, [pc, #744]	; (8e60 <_svfprintf_r+0x1178>)
    8b78:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8b7a:	920b      	str	r2, [sp, #44]	; 0x2c
    8b7c:	2d10      	cmp	r5, #16
    8b7e:	dd9d      	ble.n	8abc <_svfprintf_r+0xdd4>
    8b80:	2610      	movs	r6, #16
    8b82:	9f06      	ldr	r7, [sp, #24]
    8b84:	f8dd b014 	ldr.w	fp, [sp, #20]
    8b88:	e004      	b.n	8b94 <_svfprintf_r+0xeac>
    8b8a:	f109 0908 	add.w	r9, r9, #8
    8b8e:	3d10      	subs	r5, #16
    8b90:	2d10      	cmp	r5, #16
    8b92:	dd93      	ble.n	8abc <_svfprintf_r+0xdd4>
    8b94:	3301      	adds	r3, #1
    8b96:	3410      	adds	r4, #16
    8b98:	2b07      	cmp	r3, #7
    8b9a:	9425      	str	r4, [sp, #148]	; 0x94
    8b9c:	9324      	str	r3, [sp, #144]	; 0x90
    8b9e:	f8c9 a000 	str.w	sl, [r9]
    8ba2:	f8c9 6004 	str.w	r6, [r9, #4]
    8ba6:	ddf0      	ble.n	8b8a <_svfprintf_r+0xea2>
    8ba8:	aa23      	add	r2, sp, #140	; 0x8c
    8baa:	4659      	mov	r1, fp
    8bac:	4638      	mov	r0, r7
    8bae:	f002 f8e9 	bl	ad84 <__ssprint_r>
    8bb2:	2800      	cmp	r0, #0
    8bb4:	f47f a992 	bne.w	7edc <_svfprintf_r+0x1f4>
    8bb8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8bba:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8bbc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8bc0:	e7e5      	b.n	8b8e <_svfprintf_r+0xea6>
    8bc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8bc4:	9812      	ldr	r0, [sp, #72]	; 0x48
    8bc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8bc8:	f8c9 1000 	str.w	r1, [r9]
    8bcc:	3201      	adds	r2, #1
    8bce:	4404      	add	r4, r0
    8bd0:	2a07      	cmp	r2, #7
    8bd2:	9425      	str	r4, [sp, #148]	; 0x94
    8bd4:	f8c9 0004 	str.w	r0, [r9, #4]
    8bd8:	9224      	str	r2, [sp, #144]	; 0x90
    8bda:	f300 82b4 	bgt.w	9146 <_svfprintf_r+0x145e>
    8bde:	f109 0908 	add.w	r9, r9, #8
    8be2:	e7a9      	b.n	8b38 <_svfprintf_r+0xe50>
    8be4:	9b03      	ldr	r3, [sp, #12]
    8be6:	07d8      	lsls	r0, r3, #31
    8be8:	f53f adf2 	bmi.w	87d0 <_svfprintf_r+0xae8>
    8bec:	3501      	adds	r5, #1
    8bee:	3401      	adds	r4, #1
    8bf0:	2301      	movs	r3, #1
    8bf2:	2d07      	cmp	r5, #7
    8bf4:	9425      	str	r4, [sp, #148]	; 0x94
    8bf6:	9524      	str	r5, [sp, #144]	; 0x90
    8bf8:	f8c9 6000 	str.w	r6, [r9]
    8bfc:	f8c9 3004 	str.w	r3, [r9, #4]
    8c00:	f77f ae1a 	ble.w	8838 <_svfprintf_r+0xb50>
    8c04:	e70d      	b.n	8a22 <_svfprintf_r+0xd3a>
    8c06:	aa23      	add	r2, sp, #140	; 0x8c
    8c08:	9905      	ldr	r1, [sp, #20]
    8c0a:	9806      	ldr	r0, [sp, #24]
    8c0c:	f002 f8ba 	bl	ad84 <__ssprint_r>
    8c10:	2800      	cmp	r0, #0
    8c12:	f47f a963 	bne.w	7edc <_svfprintf_r+0x1f4>
    8c16:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8c18:	9d24      	ldr	r5, [sp, #144]	; 0x90
    8c1a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8c1e:	e5e5      	b.n	87ec <_svfprintf_r+0xb04>
    8c20:	aa23      	add	r2, sp, #140	; 0x8c
    8c22:	9905      	ldr	r1, [sp, #20]
    8c24:	9806      	ldr	r0, [sp, #24]
    8c26:	f002 f8ad 	bl	ad84 <__ssprint_r>
    8c2a:	2800      	cmp	r0, #0
    8c2c:	f47f a956 	bne.w	7edc <_svfprintf_r+0x1f4>
    8c30:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8c32:	9d24      	ldr	r5, [sp, #144]	; 0x90
    8c34:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8c38:	e5e7      	b.n	880a <_svfprintf_r+0xb22>
    8c3a:	aa23      	add	r2, sp, #140	; 0x8c
    8c3c:	9905      	ldr	r1, [sp, #20]
    8c3e:	9806      	ldr	r0, [sp, #24]
    8c40:	f002 f8a0 	bl	ad84 <__ssprint_r>
    8c44:	2800      	cmp	r0, #0
    8c46:	f47f a949 	bne.w	7edc <_svfprintf_r+0x1f4>
    8c4a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8c4c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8c50:	f7ff ba94 	b.w	817c <_svfprintf_r+0x494>
    8c54:	9903      	ldr	r1, [sp, #12]
    8c56:	f011 0340 	ands.w	r3, r1, #64	; 0x40
    8c5a:	f000 80b9 	beq.w	8dd0 <_svfprintf_r+0x10e8>
    8c5e:	980a      	ldr	r0, [sp, #40]	; 0x28
    8c60:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    8c64:	4603      	mov	r3, r0
    8c66:	f1bb 0f00 	cmp.w	fp, #0
    8c6a:	f103 0304 	add.w	r3, r3, #4
    8c6e:	8804      	ldrh	r4, [r0, #0]
    8c70:	f04f 0500 	mov.w	r5, #0
    8c74:	f2c0 81c0 	blt.w	8ff8 <_svfprintf_r+0x1310>
    8c78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    8c7c:	9103      	str	r1, [sp, #12]
    8c7e:	ea54 0105 	orrs.w	r1, r4, r5
    8c82:	930a      	str	r3, [sp, #40]	; 0x28
    8c84:	f43f acda 	beq.w	863c <_svfprintf_r+0x954>
    8c88:	4617      	mov	r7, r2
    8c8a:	f7ff b953 	b.w	7f34 <_svfprintf_r+0x24c>
    8c8e:	9b03      	ldr	r3, [sp, #12]
    8c90:	06df      	lsls	r7, r3, #27
    8c92:	d40b      	bmi.n	8cac <_svfprintf_r+0xfc4>
    8c94:	9b03      	ldr	r3, [sp, #12]
    8c96:	065e      	lsls	r6, r3, #25
    8c98:	d508      	bpl.n	8cac <_svfprintf_r+0xfc4>
    8c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8c9c:	6813      	ldr	r3, [r2, #0]
    8c9e:	3204      	adds	r2, #4
    8ca0:	920a      	str	r2, [sp, #40]	; 0x28
    8ca2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    8ca6:	801a      	strh	r2, [r3, #0]
    8ca8:	f7ff b845 	b.w	7d36 <_svfprintf_r+0x4e>
    8cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8cae:	6813      	ldr	r3, [r2, #0]
    8cb0:	3204      	adds	r2, #4
    8cb2:	920a      	str	r2, [sp, #40]	; 0x28
    8cb4:	9a07      	ldr	r2, [sp, #28]
    8cb6:	601a      	str	r2, [r3, #0]
    8cb8:	f7ff b83d 	b.w	7d36 <_svfprintf_r+0x4e>
    8cbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    8cc0:	4602      	mov	r2, r0
    8cc2:	460b      	mov	r3, r1
    8cc4:	f7fd ff60 	bl	6b88 <__aeabi_dcmpun>
    8cc8:	2800      	cmp	r0, #0
    8cca:	f040 82fd 	bne.w	92c8 <_svfprintf_r+0x15e0>
    8cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8cd0:	f1bb 3fff 	cmp.w	fp, #4294967295
    8cd4:	f023 0720 	bic.w	r7, r3, #32
    8cd8:	f000 8267 	beq.w	91aa <_svfprintf_r+0x14c2>
    8cdc:	2f47      	cmp	r7, #71	; 0x47
    8cde:	f000 8182 	beq.w	8fe6 <_svfprintf_r+0x12fe>
    8ce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ce4:	9a03      	ldr	r2, [sp, #12]
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    8cec:	920b      	str	r2, [sp, #44]	; 0x2c
    8cee:	f2c0 8278 	blt.w	91e2 <_svfprintf_r+0x14fa>
    8cf2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
    8cf6:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
    8cfa:	2300      	movs	r3, #0
    8cfc:	9304      	str	r3, [sp, #16]
    8cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d00:	2b66      	cmp	r3, #102	; 0x66
    8d02:	f000 8255 	beq.w	91b0 <_svfprintf_r+0x14c8>
    8d06:	2b46      	cmp	r3, #70	; 0x46
    8d08:	f000 8145 	beq.w	8f96 <_svfprintf_r+0x12ae>
    8d0c:	2f45      	cmp	r7, #69	; 0x45
    8d0e:	bf0c      	ite	eq
    8d10:	f10b 0501 	addeq.w	r5, fp, #1
    8d14:	465d      	movne	r5, fp
    8d16:	aa21      	add	r2, sp, #132	; 0x84
    8d18:	ab1e      	add	r3, sp, #120	; 0x78
    8d1a:	9201      	str	r2, [sp, #4]
    8d1c:	9300      	str	r3, [sp, #0]
    8d1e:	462a      	mov	r2, r5
    8d20:	ab1d      	add	r3, sp, #116	; 0x74
    8d22:	2102      	movs	r1, #2
    8d24:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
    8d28:	9806      	ldr	r0, [sp, #24]
    8d2a:	f000 fc55 	bl	95d8 <_dtoa_r>
    8d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d30:	2b67      	cmp	r3, #103	; 0x67
    8d32:	4606      	mov	r6, r0
    8d34:	f040 826b 	bne.w	920e <_svfprintf_r+0x1526>
    8d38:	9b03      	ldr	r3, [sp, #12]
    8d3a:	07da      	lsls	r2, r3, #31
    8d3c:	f140 82b9 	bpl.w	92b2 <_svfprintf_r+0x15ca>
    8d40:	1974      	adds	r4, r6, r5
    8d42:	2200      	movs	r2, #0
    8d44:	2300      	movs	r3, #0
    8d46:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    8d4a:	f7fd feeb 	bl	6b24 <__aeabi_dcmpeq>
    8d4e:	2800      	cmp	r0, #0
    8d50:	f040 818d 	bne.w	906e <_svfprintf_r+0x1386>
    8d54:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8d56:	429c      	cmp	r4, r3
    8d58:	d906      	bls.n	8d68 <_svfprintf_r+0x1080>
    8d5a:	2130      	movs	r1, #48	; 0x30
    8d5c:	1c5a      	adds	r2, r3, #1
    8d5e:	9221      	str	r2, [sp, #132]	; 0x84
    8d60:	7019      	strb	r1, [r3, #0]
    8d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8d64:	429c      	cmp	r4, r3
    8d66:	d8f9      	bhi.n	8d5c <_svfprintf_r+0x1074>
    8d68:	1b9b      	subs	r3, r3, r6
    8d6a:	2f47      	cmp	r7, #71	; 0x47
    8d6c:	930e      	str	r3, [sp, #56]	; 0x38
    8d6e:	f000 8177 	beq.w	9060 <_svfprintf_r+0x1378>
    8d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d74:	2b65      	cmp	r3, #101	; 0x65
    8d76:	f340 8259 	ble.w	922c <_svfprintf_r+0x1544>
    8d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d7c:	2b66      	cmp	r3, #102	; 0x66
    8d7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8d80:	930f      	str	r3, [sp, #60]	; 0x3c
    8d82:	f000 8260 	beq.w	9246 <_svfprintf_r+0x155e>
    8d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8d88:	990e      	ldr	r1, [sp, #56]	; 0x38
    8d8a:	428a      	cmp	r2, r1
    8d8c:	f2c0 8232 	blt.w	91f4 <_svfprintf_r+0x150c>
    8d90:	9b03      	ldr	r3, [sp, #12]
    8d92:	07d9      	lsls	r1, r3, #31
    8d94:	f100 828f 	bmi.w	92b6 <_svfprintf_r+0x15ce>
    8d98:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    8d9c:	9209      	str	r2, [sp, #36]	; 0x24
    8d9e:	2267      	movs	r2, #103	; 0x67
    8da0:	920d      	str	r2, [sp, #52]	; 0x34
    8da2:	9a04      	ldr	r2, [sp, #16]
    8da4:	2a00      	cmp	r2, #0
    8da6:	f040 812f 	bne.w	9008 <_svfprintf_r+0x1320>
    8daa:	9304      	str	r3, [sp, #16]
    8dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8dae:	9303      	str	r3, [sp, #12]
    8db0:	4693      	mov	fp, r2
    8db2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    8db6:	f7ff b969 	b.w	808c <_svfprintf_r+0x3a4>
    8dba:	f027 0707 	bic.w	r7, r7, #7
    8dbe:	ed97 7b00 	vldr	d7, [r7]
    8dc2:	f107 0308 	add.w	r3, r7, #8
    8dc6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
    8dca:	930a      	str	r3, [sp, #40]	; 0x28
    8dcc:	f7ff ba8a 	b.w	82e4 <_svfprintf_r+0x5fc>
    8dd0:	990a      	ldr	r1, [sp, #40]	; 0x28
    8dd2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    8dd6:	f1bb 0f00 	cmp.w	fp, #0
    8dda:	680c      	ldr	r4, [r1, #0]
    8ddc:	f101 0704 	add.w	r7, r1, #4
    8de0:	f04f 0500 	mov.w	r5, #0
    8de4:	f280 80ac 	bge.w	8f40 <_svfprintf_r+0x1258>
    8de8:	970a      	str	r7, [sp, #40]	; 0x28
    8dea:	2700      	movs	r7, #0
    8dec:	f7ff b8a2 	b.w	7f34 <_svfprintf_r+0x24c>
    8df0:	9903      	ldr	r1, [sp, #12]
    8df2:	f011 0340 	ands.w	r3, r1, #64	; 0x40
    8df6:	f43f ae4e 	beq.w	8a96 <_svfprintf_r+0xdae>
    8dfa:	980a      	ldr	r0, [sp, #40]	; 0x28
    8dfc:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    8e00:	4603      	mov	r3, r0
    8e02:	f1bb 0f00 	cmp.w	fp, #0
    8e06:	f103 0304 	add.w	r3, r3, #4
    8e0a:	8804      	ldrh	r4, [r0, #0]
    8e0c:	f04f 0500 	mov.w	r5, #0
    8e10:	f2c0 80ef 	blt.w	8ff2 <_svfprintf_r+0x130a>
    8e14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    8e18:	9103      	str	r1, [sp, #12]
    8e1a:	ea54 0105 	orrs.w	r1, r4, r5
    8e1e:	930a      	str	r3, [sp, #40]	; 0x28
    8e20:	4617      	mov	r7, r2
    8e22:	f47f a90f 	bne.w	8044 <_svfprintf_r+0x35c>
    8e26:	f7ff baf5 	b.w	8414 <_svfprintf_r+0x72c>
    8e2a:	9b03      	ldr	r3, [sp, #12]
    8e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8e2e:	f013 0f40 	tst.w	r3, #64	; 0x40
    8e32:	4613      	mov	r3, r2
    8e34:	f000 80e2 	beq.w	8ffc <_svfprintf_r+0x1314>
    8e38:	3304      	adds	r3, #4
    8e3a:	8814      	ldrh	r4, [r2, #0]
    8e3c:	930a      	str	r3, [sp, #40]	; 0x28
    8e3e:	2500      	movs	r5, #0
    8e40:	f7ff bb05 	b.w	844e <_svfprintf_r+0x766>
    8e44:	4614      	mov	r4, r2
    8e46:	3301      	adds	r3, #1
    8e48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8e4a:	9324      	str	r3, [sp, #144]	; 0x90
    8e4c:	442c      	add	r4, r5
    8e4e:	2b07      	cmp	r3, #7
    8e50:	9425      	str	r4, [sp, #148]	; 0x94
    8e52:	e889 0024 	stmia.w	r9, {r2, r5}
    8e56:	f73f ae5a 	bgt.w	8b0e <_svfprintf_r+0xe26>
    8e5a:	f109 0908 	add.w	r9, r9, #8
    8e5e:	e661      	b.n	8b24 <_svfprintf_r+0xe3c>
    8e60:	0000b7dc 	.word	0x0000b7dc
    8e64:	2700      	movs	r7, #0
    8e66:	45bb      	cmp	fp, r7
    8e68:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    8e6c:	f6ff abf8 	blt.w	8660 <_svfprintf_r+0x978>
    8e70:	9b03      	ldr	r3, [sp, #12]
    8e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8e76:	9303      	str	r3, [sp, #12]
    8e78:	f7ff bbc0 	b.w	85fc <_svfprintf_r+0x914>
    8e7c:	aa23      	add	r2, sp, #140	; 0x8c
    8e7e:	9905      	ldr	r1, [sp, #20]
    8e80:	9806      	ldr	r0, [sp, #24]
    8e82:	f001 ff7f 	bl	ad84 <__ssprint_r>
    8e86:	2800      	cmp	r0, #0
    8e88:	f47f a828 	bne.w	7edc <_svfprintf_r+0x1f4>
    8e8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8e8e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8e92:	e407      	b.n	86a4 <_svfprintf_r+0x9bc>
    8e94:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    8e96:	f7ff bbdc 	b.w	8652 <_svfprintf_r+0x96a>
    8e9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8e9c:	4ab8      	ldr	r2, [pc, #736]	; (9180 <_svfprintf_r+0x1498>)
    8e9e:	f8c9 2000 	str.w	r2, [r9]
    8ea2:	3301      	adds	r3, #1
    8ea4:	3401      	adds	r4, #1
    8ea6:	2201      	movs	r2, #1
    8ea8:	2b07      	cmp	r3, #7
    8eaa:	9425      	str	r4, [sp, #148]	; 0x94
    8eac:	9324      	str	r3, [sp, #144]	; 0x90
    8eae:	f8c9 2004 	str.w	r2, [r9, #4]
    8eb2:	f300 808b 	bgt.w	8fcc <_svfprintf_r+0x12e4>
    8eb6:	f109 0908 	add.w	r9, r9, #8
    8eba:	b92d      	cbnz	r5, 8ec8 <_svfprintf_r+0x11e0>
    8ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ebe:	b91b      	cbnz	r3, 8ec8 <_svfprintf_r+0x11e0>
    8ec0:	9b03      	ldr	r3, [sp, #12]
    8ec2:	07df      	lsls	r7, r3, #31
    8ec4:	f57f a9a6 	bpl.w	8214 <_svfprintf_r+0x52c>
    8ec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8eca:	9912      	ldr	r1, [sp, #72]	; 0x48
    8ecc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8ece:	f8c9 2000 	str.w	r2, [r9]
    8ed2:	3301      	adds	r3, #1
    8ed4:	440c      	add	r4, r1
    8ed6:	2b07      	cmp	r3, #7
    8ed8:	9425      	str	r4, [sp, #148]	; 0x94
    8eda:	f8c9 1004 	str.w	r1, [r9, #4]
    8ede:	9324      	str	r3, [sp, #144]	; 0x90
    8ee0:	f300 81cd 	bgt.w	927e <_svfprintf_r+0x1596>
    8ee4:	f109 0908 	add.w	r9, r9, #8
    8ee8:	426d      	negs	r5, r5
    8eea:	2d00      	cmp	r5, #0
    8eec:	f340 80aa 	ble.w	9044 <_svfprintf_r+0x135c>
    8ef0:	4aa4      	ldr	r2, [pc, #656]	; (9184 <_svfprintf_r+0x149c>)
    8ef2:	920b      	str	r2, [sp, #44]	; 0x2c
    8ef4:	2d10      	cmp	r5, #16
    8ef6:	f340 80c9 	ble.w	908c <_svfprintf_r+0x13a4>
    8efa:	4622      	mov	r2, r4
    8efc:	2710      	movs	r7, #16
    8efe:	f8dd b018 	ldr.w	fp, [sp, #24]
    8f02:	9c05      	ldr	r4, [sp, #20]
    8f04:	e005      	b.n	8f12 <_svfprintf_r+0x122a>
    8f06:	f109 0908 	add.w	r9, r9, #8
    8f0a:	3d10      	subs	r5, #16
    8f0c:	2d10      	cmp	r5, #16
    8f0e:	f340 80bc 	ble.w	908a <_svfprintf_r+0x13a2>
    8f12:	3301      	adds	r3, #1
    8f14:	3210      	adds	r2, #16
    8f16:	2b07      	cmp	r3, #7
    8f18:	9225      	str	r2, [sp, #148]	; 0x94
    8f1a:	9324      	str	r3, [sp, #144]	; 0x90
    8f1c:	f8c9 a000 	str.w	sl, [r9]
    8f20:	f8c9 7004 	str.w	r7, [r9, #4]
    8f24:	ddef      	ble.n	8f06 <_svfprintf_r+0x121e>
    8f26:	aa23      	add	r2, sp, #140	; 0x8c
    8f28:	4621      	mov	r1, r4
    8f2a:	4658      	mov	r0, fp
    8f2c:	f001 ff2a 	bl	ad84 <__ssprint_r>
    8f30:	2800      	cmp	r0, #0
    8f32:	f47e afd3 	bne.w	7edc <_svfprintf_r+0x1f4>
    8f36:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8f38:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8f3a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8f3e:	e7e4      	b.n	8f0a <_svfprintf_r+0x1222>
    8f40:	9a03      	ldr	r2, [sp, #12]
    8f42:	f7ff ba39 	b.w	83b8 <_svfprintf_r+0x6d0>
    8f46:	9a03      	ldr	r2, [sp, #12]
    8f48:	e58b      	b.n	8a62 <_svfprintf_r+0xd7a>
    8f4a:	9b03      	ldr	r3, [sp, #12]
    8f4c:	f043 0320 	orr.w	r3, r3, #32
    8f50:	9303      	str	r3, [sp, #12]
    8f52:	f108 0801 	add.w	r8, r8, #1
    8f56:	f898 3000 	ldrb.w	r3, [r8]
    8f5a:	f7fe bf1f 	b.w	7d9c <_svfprintf_r+0xb4>
    8f5e:	aa23      	add	r2, sp, #140	; 0x8c
    8f60:	9905      	ldr	r1, [sp, #20]
    8f62:	9806      	ldr	r0, [sp, #24]
    8f64:	f001 ff0e 	bl	ad84 <__ssprint_r>
    8f68:	2800      	cmp	r0, #0
    8f6a:	f47e afb7 	bne.w	7edc <_svfprintf_r+0x1f4>
    8f6e:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8f70:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8f74:	f7ff bbae 	b.w	86d4 <_svfprintf_r+0x9ec>
    8f78:	2140      	movs	r1, #64	; 0x40
    8f7a:	9806      	ldr	r0, [sp, #24]
    8f7c:	f7fd feb4 	bl	6ce8 <_malloc_r>
    8f80:	9a05      	ldr	r2, [sp, #20]
    8f82:	6010      	str	r0, [r2, #0]
    8f84:	6110      	str	r0, [r2, #16]
    8f86:	2800      	cmp	r0, #0
    8f88:	f000 81f3 	beq.w	9372 <_svfprintf_r+0x168a>
    8f8c:	9a05      	ldr	r2, [sp, #20]
    8f8e:	2340      	movs	r3, #64	; 0x40
    8f90:	6153      	str	r3, [r2, #20]
    8f92:	f7fe bec0 	b.w	7d16 <_svfprintf_r+0x2e>
    8f96:	aa21      	add	r2, sp, #132	; 0x84
    8f98:	ab1e      	add	r3, sp, #120	; 0x78
    8f9a:	9201      	str	r2, [sp, #4]
    8f9c:	9300      	str	r3, [sp, #0]
    8f9e:	465a      	mov	r2, fp
    8fa0:	ab1d      	add	r3, sp, #116	; 0x74
    8fa2:	2103      	movs	r1, #3
    8fa4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
    8fa8:	9806      	ldr	r0, [sp, #24]
    8faa:	f000 fb15 	bl	95d8 <_dtoa_r>
    8fae:	465d      	mov	r5, fp
    8fb0:	4606      	mov	r6, r0
    8fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8fb4:	2b46      	cmp	r3, #70	; 0x46
    8fb6:	eb06 0405 	add.w	r4, r6, r5
    8fba:	f47f aec2 	bne.w	8d42 <_svfprintf_r+0x105a>
    8fbe:	7833      	ldrb	r3, [r6, #0]
    8fc0:	2b30      	cmp	r3, #48	; 0x30
    8fc2:	f000 8187 	beq.w	92d4 <_svfprintf_r+0x15ec>
    8fc6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    8fc8:	442c      	add	r4, r5
    8fca:	e6ba      	b.n	8d42 <_svfprintf_r+0x105a>
    8fcc:	aa23      	add	r2, sp, #140	; 0x8c
    8fce:	9905      	ldr	r1, [sp, #20]
    8fd0:	9806      	ldr	r0, [sp, #24]
    8fd2:	f001 fed7 	bl	ad84 <__ssprint_r>
    8fd6:	2800      	cmp	r0, #0
    8fd8:	f47e af80 	bne.w	7edc <_svfprintf_r+0x1f4>
    8fdc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    8fde:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8fe0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8fe4:	e769      	b.n	8eba <_svfprintf_r+0x11d2>
    8fe6:	f1bb 0f00 	cmp.w	fp, #0
    8fea:	bf08      	it	eq
    8fec:	f04f 0b01 	moveq.w	fp, #1
    8ff0:	e677      	b.n	8ce2 <_svfprintf_r+0xffa>
    8ff2:	930a      	str	r3, [sp, #40]	; 0x28
    8ff4:	4617      	mov	r7, r2
    8ff6:	e55c      	b.n	8ab2 <_svfprintf_r+0xdca>
    8ff8:	930a      	str	r3, [sp, #40]	; 0x28
    8ffa:	e6f6      	b.n	8dea <_svfprintf_r+0x1102>
    8ffc:	3304      	adds	r3, #4
    8ffe:	6814      	ldr	r4, [r2, #0]
    9000:	930a      	str	r3, [sp, #40]	; 0x28
    9002:	2500      	movs	r5, #0
    9004:	f7ff ba23 	b.w	844e <_svfprintf_r+0x766>
    9008:	272d      	movs	r7, #45	; 0x2d
    900a:	9304      	str	r3, [sp, #16]
    900c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    900e:	9303      	str	r3, [sp, #12]
    9010:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    9014:	f04f 0b00 	mov.w	fp, #0
    9018:	f7ff b839 	b.w	808e <_svfprintf_r+0x3a6>
    901c:	4630      	mov	r0, r6
    901e:	f7fe fd0f 	bl	7a40 <strlen>
    9022:	46a3      	mov	fp, r4
    9024:	4603      	mov	r3, r0
    9026:	9009      	str	r0, [sp, #36]	; 0x24
    9028:	f7ff baa2 	b.w	8570 <_svfprintf_r+0x888>
    902c:	aa23      	add	r2, sp, #140	; 0x8c
    902e:	9905      	ldr	r1, [sp, #20]
    9030:	9806      	ldr	r0, [sp, #24]
    9032:	f001 fea7 	bl	ad84 <__ssprint_r>
    9036:	2800      	cmp	r0, #0
    9038:	f47e af50 	bne.w	7edc <_svfprintf_r+0x1f4>
    903c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    903e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9040:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    9044:	990e      	ldr	r1, [sp, #56]	; 0x38
    9046:	f8c9 6000 	str.w	r6, [r9]
    904a:	3301      	adds	r3, #1
    904c:	440c      	add	r4, r1
    904e:	2b07      	cmp	r3, #7
    9050:	9425      	str	r4, [sp, #148]	; 0x94
    9052:	9324      	str	r3, [sp, #144]	; 0x90
    9054:	f8c9 1004 	str.w	r1, [r9, #4]
    9058:	f77f a8da 	ble.w	8210 <_svfprintf_r+0x528>
    905c:	f7ff bbfb 	b.w	8856 <_svfprintf_r+0xb6e>
    9060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9062:	1cdd      	adds	r5, r3, #3
    9064:	db1e      	blt.n	90a4 <_svfprintf_r+0x13bc>
    9066:	459b      	cmp	fp, r3
    9068:	db1c      	blt.n	90a4 <_svfprintf_r+0x13bc>
    906a:	930f      	str	r3, [sp, #60]	; 0x3c
    906c:	e68b      	b.n	8d86 <_svfprintf_r+0x109e>
    906e:	4623      	mov	r3, r4
    9070:	e67a      	b.n	8d68 <_svfprintf_r+0x1080>
    9072:	aa23      	add	r2, sp, #140	; 0x8c
    9074:	9905      	ldr	r1, [sp, #20]
    9076:	9806      	ldr	r0, [sp, #24]
    9078:	f001 fe84 	bl	ad84 <__ssprint_r>
    907c:	2800      	cmp	r0, #0
    907e:	f47e af2d 	bne.w	7edc <_svfprintf_r+0x1f4>
    9082:	9c25      	ldr	r4, [sp, #148]	; 0x94
    9084:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    9088:	e44c      	b.n	8924 <_svfprintf_r+0xc3c>
    908a:	4614      	mov	r4, r2
    908c:	3301      	adds	r3, #1
    908e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9090:	9324      	str	r3, [sp, #144]	; 0x90
    9092:	442c      	add	r4, r5
    9094:	2b07      	cmp	r3, #7
    9096:	9425      	str	r4, [sp, #148]	; 0x94
    9098:	e889 0024 	stmia.w	r9, {r2, r5}
    909c:	dcc6      	bgt.n	902c <_svfprintf_r+0x1344>
    909e:	f109 0908 	add.w	r9, r9, #8
    90a2:	e7cf      	b.n	9044 <_svfprintf_r+0x135c>
    90a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    90a6:	3a02      	subs	r2, #2
    90a8:	920d      	str	r2, [sp, #52]	; 0x34
    90aa:	3b01      	subs	r3, #1
    90ac:	2b00      	cmp	r3, #0
    90ae:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    90b2:	931d      	str	r3, [sp, #116]	; 0x74
    90b4:	bfb8      	it	lt
    90b6:	425b      	neglt	r3, r3
    90b8:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
    90bc:	bfb4      	ite	lt
    90be:	222d      	movlt	r2, #45	; 0x2d
    90c0:	222b      	movge	r2, #43	; 0x2b
    90c2:	2b09      	cmp	r3, #9
    90c4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
    90c8:	f340 80eb 	ble.w	92a2 <_svfprintf_r+0x15ba>
    90cc:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
    90d0:	4604      	mov	r4, r0
    90d2:	4a2d      	ldr	r2, [pc, #180]	; (9188 <_svfprintf_r+0x14a0>)
    90d4:	fb82 2103 	smull	r2, r1, r2, r3
    90d8:	17da      	asrs	r2, r3, #31
    90da:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    90de:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    90e2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    90e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
    90ea:	2a09      	cmp	r2, #9
    90ec:	4613      	mov	r3, r2
    90ee:	f804 1d01 	strb.w	r1, [r4, #-1]!
    90f2:	dcee      	bgt.n	90d2 <_svfprintf_r+0x13ea>
    90f4:	4621      	mov	r1, r4
    90f6:	3330      	adds	r3, #48	; 0x30
    90f8:	b2da      	uxtb	r2, r3
    90fa:	f801 2d01 	strb.w	r2, [r1, #-1]!
    90fe:	4288      	cmp	r0, r1
    9100:	f240 8134 	bls.w	936c <_svfprintf_r+0x1684>
    9104:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
    9108:	4623      	mov	r3, r4
    910a:	e001      	b.n	9110 <_svfprintf_r+0x1428>
    910c:	f813 2b01 	ldrb.w	r2, [r3], #1
    9110:	f801 2b01 	strb.w	r2, [r1], #1
    9114:	4298      	cmp	r0, r3
    9116:	d1f9      	bne.n	910c <_svfprintf_r+0x1424>
    9118:	1c43      	adds	r3, r0, #1
    911a:	1b1b      	subs	r3, r3, r4
    911c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
    9120:	4413      	add	r3, r2
    9122:	aa1f      	add	r2, sp, #124	; 0x7c
    9124:	1a9b      	subs	r3, r3, r2
    9126:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9128:	9315      	str	r3, [sp, #84]	; 0x54
    912a:	2a01      	cmp	r2, #1
    912c:	4413      	add	r3, r2
    912e:	9309      	str	r3, [sp, #36]	; 0x24
    9130:	f340 80e7 	ble.w	9302 <_svfprintf_r+0x161a>
    9134:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9136:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9138:	4413      	add	r3, r2
    913a:	2200      	movs	r2, #0
    913c:	9309      	str	r3, [sp, #36]	; 0x24
    913e:	920f      	str	r2, [sp, #60]	; 0x3c
    9140:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9144:	e62d      	b.n	8da2 <_svfprintf_r+0x10ba>
    9146:	aa23      	add	r2, sp, #140	; 0x8c
    9148:	9905      	ldr	r1, [sp, #20]
    914a:	9806      	ldr	r0, [sp, #24]
    914c:	f001 fe1a 	bl	ad84 <__ssprint_r>
    9150:	2800      	cmp	r0, #0
    9152:	f47e aec3 	bne.w	7edc <_svfprintf_r+0x1f4>
    9156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9158:	9c25      	ldr	r4, [sp, #148]	; 0x94
    915a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    915e:	e4eb      	b.n	8b38 <_svfprintf_r+0xe50>
    9160:	aa23      	add	r2, sp, #140	; 0x8c
    9162:	9905      	ldr	r1, [sp, #20]
    9164:	9806      	ldr	r0, [sp, #24]
    9166:	f001 fe0d 	bl	ad84 <__ssprint_r>
    916a:	2800      	cmp	r0, #0
    916c:	f47e aeb6 	bne.w	7edc <_svfprintf_r+0x1f4>
    9170:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9174:	9c25      	ldr	r4, [sp, #148]	; 0x94
    9176:	1ad3      	subs	r3, r2, r3
    9178:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    917c:	e4f4      	b.n	8b68 <_svfprintf_r+0xe80>
    917e:	bf00      	nop
    9180:	0000b824 	.word	0x0000b824
    9184:	0000b7dc 	.word	0x0000b7dc
    9188:	66666667 	.word	0x66666667
    918c:	2d06      	cmp	r5, #6
    918e:	462b      	mov	r3, r5
    9190:	bf28      	it	cs
    9192:	2306      	movcs	r3, #6
    9194:	9309      	str	r3, [sp, #36]	; 0x24
    9196:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    919a:	46b3      	mov	fp, r6
    919c:	970a      	str	r7, [sp, #40]	; 0x28
    919e:	960f      	str	r6, [sp, #60]	; 0x3c
    91a0:	4637      	mov	r7, r6
    91a2:	9304      	str	r3, [sp, #16]
    91a4:	4e86      	ldr	r6, [pc, #536]	; (93c0 <_svfprintf_r+0x16d8>)
    91a6:	f7fe bf71 	b.w	808c <_svfprintf_r+0x3a4>
    91aa:	f04f 0b06 	mov.w	fp, #6
    91ae:	e598      	b.n	8ce2 <_svfprintf_r+0xffa>
    91b0:	aa21      	add	r2, sp, #132	; 0x84
    91b2:	ab1e      	add	r3, sp, #120	; 0x78
    91b4:	9201      	str	r2, [sp, #4]
    91b6:	9300      	str	r3, [sp, #0]
    91b8:	465a      	mov	r2, fp
    91ba:	ab1d      	add	r3, sp, #116	; 0x74
    91bc:	2103      	movs	r1, #3
    91be:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
    91c2:	9806      	ldr	r0, [sp, #24]
    91c4:	f000 fa08 	bl	95d8 <_dtoa_r>
    91c8:	465d      	mov	r5, fp
    91ca:	4606      	mov	r6, r0
    91cc:	eb00 040b 	add.w	r4, r0, fp
    91d0:	e6f5      	b.n	8fbe <_svfprintf_r+0x12d6>
    91d2:	272d      	movs	r7, #45	; 0x2d
    91d4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    91d8:	f7ff b8ab 	b.w	8332 <_svfprintf_r+0x64a>
    91dc:	9303      	str	r3, [sp, #12]
    91de:	f7ff b954 	b.w	848a <_svfprintf_r+0x7a2>
    91e2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
    91e6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    91ea:	9319      	str	r3, [sp, #100]	; 0x64
    91ec:	232d      	movs	r3, #45	; 0x2d
    91ee:	9118      	str	r1, [sp, #96]	; 0x60
    91f0:	9304      	str	r3, [sp, #16]
    91f2:	e584      	b.n	8cfe <_svfprintf_r+0x1016>
    91f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    91f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    91f8:	4413      	add	r3, r2
    91fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    91fc:	9309      	str	r3, [sp, #36]	; 0x24
    91fe:	2a00      	cmp	r2, #0
    9200:	f340 8089 	ble.w	9316 <_svfprintf_r+0x162e>
    9204:	2267      	movs	r2, #103	; 0x67
    9206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    920a:	920d      	str	r2, [sp, #52]	; 0x34
    920c:	e5c9      	b.n	8da2 <_svfprintf_r+0x10ba>
    920e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9210:	2b47      	cmp	r3, #71	; 0x47
    9212:	f47f ad95 	bne.w	8d40 <_svfprintf_r+0x1058>
    9216:	9b03      	ldr	r3, [sp, #12]
    9218:	07db      	lsls	r3, r3, #31
    921a:	f53f aeca 	bmi.w	8fb2 <_svfprintf_r+0x12ca>
    921e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9220:	2f47      	cmp	r7, #71	; 0x47
    9222:	eba3 0306 	sub.w	r3, r3, r6
    9226:	930e      	str	r3, [sp, #56]	; 0x38
    9228:	f43f af1a 	beq.w	9060 <_svfprintf_r+0x1378>
    922c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    922e:	e73c      	b.n	90aa <_svfprintf_r+0x13c2>
    9230:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    9234:	970a      	str	r7, [sp, #40]	; 0x28
    9236:	9304      	str	r3, [sp, #16]
    9238:	9509      	str	r5, [sp, #36]	; 0x24
    923a:	4683      	mov	fp, r0
    923c:	900f      	str	r0, [sp, #60]	; 0x3c
    923e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    9242:	f7fe bf23 	b.w	808c <_svfprintf_r+0x3a4>
    9246:	2b00      	cmp	r3, #0
    9248:	dd6d      	ble.n	9326 <_svfprintf_r+0x163e>
    924a:	f1bb 0f00 	cmp.w	fp, #0
    924e:	d14f      	bne.n	92f0 <_svfprintf_r+0x1608>
    9250:	9a03      	ldr	r2, [sp, #12]
    9252:	07d4      	lsls	r4, r2, #31
    9254:	d44c      	bmi.n	92f0 <_svfprintf_r+0x1608>
    9256:	461a      	mov	r2, r3
    9258:	9209      	str	r2, [sp, #36]	; 0x24
    925a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    925e:	e5a0      	b.n	8da2 <_svfprintf_r+0x10ba>
    9260:	9b03      	ldr	r3, [sp, #12]
    9262:	07db      	lsls	r3, r3, #31
    9264:	465f      	mov	r7, fp
    9266:	d505      	bpl.n	9274 <_svfprintf_r+0x158c>
    9268:	ae40      	add	r6, sp, #256	; 0x100
    926a:	2330      	movs	r3, #48	; 0x30
    926c:	f806 3d41 	strb.w	r3, [r6, #-65]!
    9270:	f7fe bf02 	b.w	8078 <_svfprintf_r+0x390>
    9274:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    9278:	ae30      	add	r6, sp, #192	; 0xc0
    927a:	f7fe bf00 	b.w	807e <_svfprintf_r+0x396>
    927e:	aa23      	add	r2, sp, #140	; 0x8c
    9280:	9905      	ldr	r1, [sp, #20]
    9282:	9806      	ldr	r0, [sp, #24]
    9284:	f001 fd7e 	bl	ad84 <__ssprint_r>
    9288:	2800      	cmp	r0, #0
    928a:	f47e ae27 	bne.w	7edc <_svfprintf_r+0x1f4>
    928e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    9290:	9c25      	ldr	r4, [sp, #148]	; 0x94
    9292:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9294:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    9298:	e626      	b.n	8ee8 <_svfprintf_r+0x1200>
    929a:	46a0      	mov	r8, r4
    929c:	2500      	movs	r5, #0
    929e:	f7fe bd7f 	b.w	7da0 <_svfprintf_r+0xb8>
    92a2:	3330      	adds	r3, #48	; 0x30
    92a4:	2230      	movs	r2, #48	; 0x30
    92a6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
    92aa:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
    92ae:	ab20      	add	r3, sp, #128	; 0x80
    92b0:	e737      	b.n	9122 <_svfprintf_r+0x143a>
    92b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    92b4:	e558      	b.n	8d68 <_svfprintf_r+0x1080>
    92b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    92b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    92ba:	4413      	add	r3, r2
    92bc:	2267      	movs	r2, #103	; 0x67
    92be:	9309      	str	r3, [sp, #36]	; 0x24
    92c0:	920d      	str	r2, [sp, #52]	; 0x34
    92c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    92c6:	e56c      	b.n	8da2 <_svfprintf_r+0x10ba>
    92c8:	4e3e      	ldr	r6, [pc, #248]	; (93c4 <_svfprintf_r+0x16dc>)
    92ca:	4b3f      	ldr	r3, [pc, #252]	; (93c8 <_svfprintf_r+0x16e0>)
    92cc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    92d0:	f7ff b831 	b.w	8336 <_svfprintf_r+0x64e>
    92d4:	2200      	movs	r2, #0
    92d6:	2300      	movs	r3, #0
    92d8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    92dc:	f7fd fc22 	bl	6b24 <__aeabi_dcmpeq>
    92e0:	2800      	cmp	r0, #0
    92e2:	f47f ae70 	bne.w	8fc6 <_svfprintf_r+0x12de>
    92e6:	f1c5 0501 	rsb	r5, r5, #1
    92ea:	951d      	str	r5, [sp, #116]	; 0x74
    92ec:	442c      	add	r4, r5
    92ee:	e528      	b.n	8d42 <_svfprintf_r+0x105a>
    92f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    92f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    92f4:	189d      	adds	r5, r3, r2
    92f6:	eb05 030b 	add.w	r3, r5, fp
    92fa:	9309      	str	r3, [sp, #36]	; 0x24
    92fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9300:	e54f      	b.n	8da2 <_svfprintf_r+0x10ba>
    9302:	9b03      	ldr	r3, [sp, #12]
    9304:	f013 0301 	ands.w	r3, r3, #1
    9308:	f47f af14 	bne.w	9134 <_svfprintf_r+0x144c>
    930c:	930f      	str	r3, [sp, #60]	; 0x3c
    930e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9310:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9314:	e545      	b.n	8da2 <_svfprintf_r+0x10ba>
    9316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9318:	9a09      	ldr	r2, [sp, #36]	; 0x24
    931a:	f1c3 0301 	rsb	r3, r3, #1
    931e:	441a      	add	r2, r3
    9320:	4613      	mov	r3, r2
    9322:	9209      	str	r2, [sp, #36]	; 0x24
    9324:	e76e      	b.n	9204 <_svfprintf_r+0x151c>
    9326:	f1bb 0f00 	cmp.w	fp, #0
    932a:	d102      	bne.n	9332 <_svfprintf_r+0x164a>
    932c:	9b03      	ldr	r3, [sp, #12]
    932e:	07d8      	lsls	r0, r3, #31
    9330:	d507      	bpl.n	9342 <_svfprintf_r+0x165a>
    9332:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9334:	1c5d      	adds	r5, r3, #1
    9336:	eb05 030b 	add.w	r3, r5, fp
    933a:	9309      	str	r3, [sp, #36]	; 0x24
    933c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9340:	e52f      	b.n	8da2 <_svfprintf_r+0x10ba>
    9342:	2301      	movs	r3, #1
    9344:	9309      	str	r3, [sp, #36]	; 0x24
    9346:	e52c      	b.n	8da2 <_svfprintf_r+0x10ba>
    9348:	980a      	ldr	r0, [sp, #40]	; 0x28
    934a:	f898 3001 	ldrb.w	r3, [r8, #1]
    934e:	6805      	ldr	r5, [r0, #0]
    9350:	3004      	adds	r0, #4
    9352:	2d00      	cmp	r5, #0
    9354:	900a      	str	r0, [sp, #40]	; 0x28
    9356:	46a0      	mov	r8, r4
    9358:	f6be ad20 	bge.w	7d9c <_svfprintf_r+0xb4>
    935c:	f04f 35ff 	mov.w	r5, #4294967295
    9360:	f7fe bd1c 	b.w	7d9c <_svfprintf_r+0xb4>
    9364:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    9368:	f7fe bdc9 	b.w	7efe <_svfprintf_r+0x216>
    936c:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
    9370:	e6d7      	b.n	9122 <_svfprintf_r+0x143a>
    9372:	9a06      	ldr	r2, [sp, #24]
    9374:	230c      	movs	r3, #12
    9376:	6013      	str	r3, [r2, #0]
    9378:	f04f 30ff 	mov.w	r0, #4294967295
    937c:	f7fe bdb7 	b.w	7eee <_svfprintf_r+0x206>
    9380:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    9384:	f7fe be38 	b.w	7ff8 <_svfprintf_r+0x310>
    9388:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    938c:	f7fe bf9a 	b.w	82c4 <_svfprintf_r+0x5dc>
    9390:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    9394:	f7ff b84d 	b.w	8432 <_svfprintf_r+0x74a>
    9398:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    939c:	f7ff b81b 	b.w	83d6 <_svfprintf_r+0x6ee>
    93a0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    93a4:	f7fe bfed 	b.w	8382 <_svfprintf_r+0x69a>
    93a8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    93ac:	f7ff b935 	b.w	861a <_svfprintf_r+0x932>
    93b0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    93b4:	f7ff b910 	b.w	85d8 <_svfprintf_r+0x8f0>
    93b8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    93bc:	f7ff b8ee 	b.w	859c <_svfprintf_r+0x8b4>
    93c0:	0000b81c 	.word	0x0000b81c
    93c4:	0000b740 	.word	0x0000b740
    93c8:	0000b7f0 	.word	0x0000b7f0

000093cc <__ascii_wctomb>:
    93cc:	b121      	cbz	r1, 93d8 <__ascii_wctomb+0xc>
    93ce:	2aff      	cmp	r2, #255	; 0xff
    93d0:	d804      	bhi.n	93dc <__ascii_wctomb+0x10>
    93d2:	700a      	strb	r2, [r1, #0]
    93d4:	2001      	movs	r0, #1
    93d6:	4770      	bx	lr
    93d8:	4608      	mov	r0, r1
    93da:	4770      	bx	lr
    93dc:	238a      	movs	r3, #138	; 0x8a
    93de:	6003      	str	r3, [r0, #0]
    93e0:	f04f 30ff 	mov.w	r0, #4294967295
    93e4:	4770      	bx	lr
    93e6:	bf00      	nop

000093e8 <__register_exitproc>:
    93e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    93ec:	4c25      	ldr	r4, [pc, #148]	; (9484 <__register_exitproc+0x9c>)
    93ee:	6825      	ldr	r5, [r4, #0]
    93f0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    93f4:	4606      	mov	r6, r0
    93f6:	4688      	mov	r8, r1
    93f8:	4692      	mov	sl, r2
    93fa:	4699      	mov	r9, r3
    93fc:	b3c4      	cbz	r4, 9470 <__register_exitproc+0x88>
    93fe:	6860      	ldr	r0, [r4, #4]
    9400:	281f      	cmp	r0, #31
    9402:	dc17      	bgt.n	9434 <__register_exitproc+0x4c>
    9404:	1c43      	adds	r3, r0, #1
    9406:	b176      	cbz	r6, 9426 <__register_exitproc+0x3e>
    9408:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    940c:	2201      	movs	r2, #1
    940e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    9412:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    9416:	4082      	lsls	r2, r0
    9418:	4311      	orrs	r1, r2
    941a:	2e02      	cmp	r6, #2
    941c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    9420:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    9424:	d01e      	beq.n	9464 <__register_exitproc+0x7c>
    9426:	3002      	adds	r0, #2
    9428:	6063      	str	r3, [r4, #4]
    942a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    942e:	2000      	movs	r0, #0
    9430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9434:	4b14      	ldr	r3, [pc, #80]	; (9488 <__register_exitproc+0xa0>)
    9436:	b303      	cbz	r3, 947a <__register_exitproc+0x92>
    9438:	f44f 70c8 	mov.w	r0, #400	; 0x190
    943c:	f7fd fc44 	bl	6cc8 <malloc>
    9440:	4604      	mov	r4, r0
    9442:	b1d0      	cbz	r0, 947a <__register_exitproc+0x92>
    9444:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    9448:	2700      	movs	r7, #0
    944a:	e880 0088 	stmia.w	r0, {r3, r7}
    944e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    9452:	4638      	mov	r0, r7
    9454:	2301      	movs	r3, #1
    9456:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    945a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    945e:	2e00      	cmp	r6, #0
    9460:	d0e1      	beq.n	9426 <__register_exitproc+0x3e>
    9462:	e7d1      	b.n	9408 <__register_exitproc+0x20>
    9464:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    9468:	430a      	orrs	r2, r1
    946a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    946e:	e7da      	b.n	9426 <__register_exitproc+0x3e>
    9470:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    9474:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    9478:	e7c1      	b.n	93fe <__register_exitproc+0x16>
    947a:	f04f 30ff 	mov.w	r0, #4294967295
    947e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9482:	bf00      	nop
    9484:	0000b7cc 	.word	0x0000b7cc
    9488:	00006cc9 	.word	0x00006cc9

0000948c <register_fini>:
    948c:	4b02      	ldr	r3, [pc, #8]	; (9498 <register_fini+0xc>)
    948e:	b113      	cbz	r3, 9496 <register_fini+0xa>
    9490:	4802      	ldr	r0, [pc, #8]	; (949c <register_fini+0x10>)
    9492:	f000 b805 	b.w	94a0 <atexit>
    9496:	4770      	bx	lr
    9498:	00000000 	.word	0x00000000
    949c:	0000a40d 	.word	0x0000a40d

000094a0 <atexit>:
    94a0:	2300      	movs	r3, #0
    94a2:	4601      	mov	r1, r0
    94a4:	461a      	mov	r2, r3
    94a6:	4618      	mov	r0, r3
    94a8:	f7ff bf9e 	b.w	93e8 <__register_exitproc>

000094ac <quorem>:
    94ac:	6902      	ldr	r2, [r0, #16]
    94ae:	690b      	ldr	r3, [r1, #16]
    94b0:	4293      	cmp	r3, r2
    94b2:	f300 808d 	bgt.w	95d0 <quorem+0x124>
    94b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94ba:	f103 38ff 	add.w	r8, r3, #4294967295
    94be:	f101 0714 	add.w	r7, r1, #20
    94c2:	f100 0b14 	add.w	fp, r0, #20
    94c6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    94ca:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    94ce:	ea4f 0488 	mov.w	r4, r8, lsl #2
    94d2:	b083      	sub	sp, #12
    94d4:	3201      	adds	r2, #1
    94d6:	fbb3 f9f2 	udiv	r9, r3, r2
    94da:	eb0b 0304 	add.w	r3, fp, r4
    94de:	9400      	str	r4, [sp, #0]
    94e0:	eb07 0a04 	add.w	sl, r7, r4
    94e4:	9301      	str	r3, [sp, #4]
    94e6:	f1b9 0f00 	cmp.w	r9, #0
    94ea:	d039      	beq.n	9560 <quorem+0xb4>
    94ec:	2500      	movs	r5, #0
    94ee:	46bc      	mov	ip, r7
    94f0:	46de      	mov	lr, fp
    94f2:	462b      	mov	r3, r5
    94f4:	f85c 6b04 	ldr.w	r6, [ip], #4
    94f8:	f8de 2000 	ldr.w	r2, [lr]
    94fc:	b2b4      	uxth	r4, r6
    94fe:	fb09 5504 	mla	r5, r9, r4, r5
    9502:	0c36      	lsrs	r6, r6, #16
    9504:	0c2c      	lsrs	r4, r5, #16
    9506:	fb09 4406 	mla	r4, r9, r6, r4
    950a:	b2ad      	uxth	r5, r5
    950c:	1b5b      	subs	r3, r3, r5
    950e:	b2a6      	uxth	r6, r4
    9510:	fa13 f382 	uxtah	r3, r3, r2
    9514:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    9518:	eb06 4623 	add.w	r6, r6, r3, asr #16
    951c:	b29b      	uxth	r3, r3
    951e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    9522:	45e2      	cmp	sl, ip
    9524:	f84e 3b04 	str.w	r3, [lr], #4
    9528:	ea4f 4514 	mov.w	r5, r4, lsr #16
    952c:	ea4f 4326 	mov.w	r3, r6, asr #16
    9530:	d2e0      	bcs.n	94f4 <quorem+0x48>
    9532:	9b00      	ldr	r3, [sp, #0]
    9534:	f85b 3003 	ldr.w	r3, [fp, r3]
    9538:	b993      	cbnz	r3, 9560 <quorem+0xb4>
    953a:	9c01      	ldr	r4, [sp, #4]
    953c:	1f23      	subs	r3, r4, #4
    953e:	459b      	cmp	fp, r3
    9540:	d20c      	bcs.n	955c <quorem+0xb0>
    9542:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9546:	b94b      	cbnz	r3, 955c <quorem+0xb0>
    9548:	f1a4 0308 	sub.w	r3, r4, #8
    954c:	e002      	b.n	9554 <quorem+0xa8>
    954e:	681a      	ldr	r2, [r3, #0]
    9550:	3b04      	subs	r3, #4
    9552:	b91a      	cbnz	r2, 955c <quorem+0xb0>
    9554:	459b      	cmp	fp, r3
    9556:	f108 38ff 	add.w	r8, r8, #4294967295
    955a:	d3f8      	bcc.n	954e <quorem+0xa2>
    955c:	f8c0 8010 	str.w	r8, [r0, #16]
    9560:	4604      	mov	r4, r0
    9562:	f001 fb05 	bl	ab70 <__mcmp>
    9566:	2800      	cmp	r0, #0
    9568:	db2e      	blt.n	95c8 <quorem+0x11c>
    956a:	f109 0901 	add.w	r9, r9, #1
    956e:	465d      	mov	r5, fp
    9570:	2300      	movs	r3, #0
    9572:	f857 1b04 	ldr.w	r1, [r7], #4
    9576:	6828      	ldr	r0, [r5, #0]
    9578:	b28a      	uxth	r2, r1
    957a:	1a9a      	subs	r2, r3, r2
    957c:	0c09      	lsrs	r1, r1, #16
    957e:	fa12 f280 	uxtah	r2, r2, r0
    9582:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    9586:	eb03 4322 	add.w	r3, r3, r2, asr #16
    958a:	b291      	uxth	r1, r2
    958c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9590:	45ba      	cmp	sl, r7
    9592:	f845 1b04 	str.w	r1, [r5], #4
    9596:	ea4f 4323 	mov.w	r3, r3, asr #16
    959a:	d2ea      	bcs.n	9572 <quorem+0xc6>
    959c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    95a0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    95a4:	b982      	cbnz	r2, 95c8 <quorem+0x11c>
    95a6:	1f1a      	subs	r2, r3, #4
    95a8:	4593      	cmp	fp, r2
    95aa:	d20b      	bcs.n	95c4 <quorem+0x118>
    95ac:	f853 2c04 	ldr.w	r2, [r3, #-4]
    95b0:	b942      	cbnz	r2, 95c4 <quorem+0x118>
    95b2:	3b08      	subs	r3, #8
    95b4:	e002      	b.n	95bc <quorem+0x110>
    95b6:	681a      	ldr	r2, [r3, #0]
    95b8:	3b04      	subs	r3, #4
    95ba:	b91a      	cbnz	r2, 95c4 <quorem+0x118>
    95bc:	459b      	cmp	fp, r3
    95be:	f108 38ff 	add.w	r8, r8, #4294967295
    95c2:	d3f8      	bcc.n	95b6 <quorem+0x10a>
    95c4:	f8c4 8010 	str.w	r8, [r4, #16]
    95c8:	4648      	mov	r0, r9
    95ca:	b003      	add	sp, #12
    95cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95d0:	2000      	movs	r0, #0
    95d2:	4770      	bx	lr
    95d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000095d8 <_dtoa_r>:
    95d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95dc:	ec57 6b10 	vmov	r6, r7, d0
    95e0:	b09b      	sub	sp, #108	; 0x6c
    95e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
    95e4:	9d24      	ldr	r5, [sp, #144]	; 0x90
    95e6:	9100      	str	r1, [sp, #0]
    95e8:	4681      	mov	r9, r0
    95ea:	9205      	str	r2, [sp, #20]
    95ec:	9303      	str	r3, [sp, #12]
    95ee:	ee10 aa10 	vmov	sl, s0
    95f2:	46bb      	mov	fp, r7
    95f4:	b154      	cbz	r4, 960c <_dtoa_r+0x34>
    95f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    95f8:	6062      	str	r2, [r4, #4]
    95fa:	2301      	movs	r3, #1
    95fc:	4093      	lsls	r3, r2
    95fe:	60a3      	str	r3, [r4, #8]
    9600:	4621      	mov	r1, r4
    9602:	f001 f8d3 	bl	a7ac <_Bfree>
    9606:	2300      	movs	r3, #0
    9608:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    960c:	f1bb 0f00 	cmp.w	fp, #0
    9610:	465c      	mov	r4, fp
    9612:	db34      	blt.n	967e <_dtoa_r+0xa6>
    9614:	2300      	movs	r3, #0
    9616:	602b      	str	r3, [r5, #0]
    9618:	4ba1      	ldr	r3, [pc, #644]	; (98a0 <_dtoa_r+0x2c8>)
    961a:	461a      	mov	r2, r3
    961c:	4023      	ands	r3, r4
    961e:	4293      	cmp	r3, r2
    9620:	d016      	beq.n	9650 <_dtoa_r+0x78>
    9622:	2200      	movs	r2, #0
    9624:	2300      	movs	r3, #0
    9626:	4650      	mov	r0, sl
    9628:	4659      	mov	r1, fp
    962a:	f7fd fa7b 	bl	6b24 <__aeabi_dcmpeq>
    962e:	4656      	mov	r6, sl
    9630:	465f      	mov	r7, fp
    9632:	4680      	mov	r8, r0
    9634:	b348      	cbz	r0, 968a <_dtoa_r+0xb2>
    9636:	9a03      	ldr	r2, [sp, #12]
    9638:	2301      	movs	r3, #1
    963a:	6013      	str	r3, [r2, #0]
    963c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    963e:	2b00      	cmp	r3, #0
    9640:	f000 80be 	beq.w	97c0 <_dtoa_r+0x1e8>
    9644:	4897      	ldr	r0, [pc, #604]	; (98a4 <_dtoa_r+0x2cc>)
    9646:	6018      	str	r0, [r3, #0]
    9648:	3801      	subs	r0, #1
    964a:	b01b      	add	sp, #108	; 0x6c
    964c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9650:	9a03      	ldr	r2, [sp, #12]
    9652:	f242 730f 	movw	r3, #9999	; 0x270f
    9656:	6013      	str	r3, [r2, #0]
    9658:	f1ba 0f00 	cmp.w	sl, #0
    965c:	f000 809a 	beq.w	9794 <_dtoa_r+0x1bc>
    9660:	4891      	ldr	r0, [pc, #580]	; (98a8 <_dtoa_r+0x2d0>)
    9662:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9664:	2b00      	cmp	r3, #0
    9666:	d0f0      	beq.n	964a <_dtoa_r+0x72>
    9668:	78c3      	ldrb	r3, [r0, #3]
    966a:	2b00      	cmp	r3, #0
    966c:	f000 80aa 	beq.w	97c4 <_dtoa_r+0x1ec>
    9670:	f100 0308 	add.w	r3, r0, #8
    9674:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9676:	6013      	str	r3, [r2, #0]
    9678:	b01b      	add	sp, #108	; 0x6c
    967a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    967e:	2301      	movs	r3, #1
    9680:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
    9684:	602b      	str	r3, [r5, #0]
    9686:	46a3      	mov	fp, r4
    9688:	e7c6      	b.n	9618 <_dtoa_r+0x40>
    968a:	aa18      	add	r2, sp, #96	; 0x60
    968c:	a919      	add	r1, sp, #100	; 0x64
    968e:	ec47 6b10 	vmov	d0, r6, r7
    9692:	4648      	mov	r0, r9
    9694:	f001 fb18 	bl	acc8 <__d2b>
    9698:	0d25      	lsrs	r5, r4, #20
    969a:	900a      	str	r0, [sp, #40]	; 0x28
    969c:	f040 8083 	bne.w	97a6 <_dtoa_r+0x1ce>
    96a0:	9d18      	ldr	r5, [sp, #96]	; 0x60
    96a2:	9e19      	ldr	r6, [sp, #100]	; 0x64
    96a4:	442e      	add	r6, r5
    96a6:	f206 4332 	addw	r3, r6, #1074	; 0x432
    96aa:	2b20      	cmp	r3, #32
    96ac:	f340 8288 	ble.w	9bc0 <_dtoa_r+0x5e8>
    96b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    96b4:	f206 4012 	addw	r0, r6, #1042	; 0x412
    96b8:	409c      	lsls	r4, r3
    96ba:	fa2a f000 	lsr.w	r0, sl, r0
    96be:	4320      	orrs	r0, r4
    96c0:	f7fc ff52 	bl	6568 <__aeabi_ui2d>
    96c4:	2301      	movs	r3, #1
    96c6:	1e74      	subs	r4, r6, #1
    96c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    96cc:	930f      	str	r3, [sp, #60]	; 0x3c
    96ce:	2200      	movs	r2, #0
    96d0:	4b76      	ldr	r3, [pc, #472]	; (98ac <_dtoa_r+0x2d4>)
    96d2:	f7fc fe0b 	bl	62ec <__aeabi_dsub>
    96d6:	a36c      	add	r3, pc, #432	; (adr r3, 9888 <_dtoa_r+0x2b0>)
    96d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    96dc:	f7fc ffba 	bl	6654 <__aeabi_dmul>
    96e0:	a36b      	add	r3, pc, #428	; (adr r3, 9890 <_dtoa_r+0x2b8>)
    96e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    96e6:	f7fc fe03 	bl	62f0 <__adddf3>
    96ea:	4606      	mov	r6, r0
    96ec:	4620      	mov	r0, r4
    96ee:	460f      	mov	r7, r1
    96f0:	f7fc ff4a 	bl	6588 <__aeabi_i2d>
    96f4:	a368      	add	r3, pc, #416	; (adr r3, 9898 <_dtoa_r+0x2c0>)
    96f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    96fa:	f7fc ffab 	bl	6654 <__aeabi_dmul>
    96fe:	4602      	mov	r2, r0
    9700:	460b      	mov	r3, r1
    9702:	4630      	mov	r0, r6
    9704:	4639      	mov	r1, r7
    9706:	f7fc fdf3 	bl	62f0 <__adddf3>
    970a:	4606      	mov	r6, r0
    970c:	460f      	mov	r7, r1
    970e:	f7fd fa51 	bl	6bb4 <__aeabi_d2iz>
    9712:	2200      	movs	r2, #0
    9714:	9004      	str	r0, [sp, #16]
    9716:	2300      	movs	r3, #0
    9718:	4630      	mov	r0, r6
    971a:	4639      	mov	r1, r7
    971c:	f7fd fa0c 	bl	6b38 <__aeabi_dcmplt>
    9720:	2800      	cmp	r0, #0
    9722:	f040 8228 	bne.w	9b76 <_dtoa_r+0x59e>
    9726:	9e04      	ldr	r6, [sp, #16]
    9728:	2e16      	cmp	r6, #22
    972a:	f200 8221 	bhi.w	9b70 <_dtoa_r+0x598>
    972e:	4b60      	ldr	r3, [pc, #384]	; (98b0 <_dtoa_r+0x2d8>)
    9730:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    9734:	e9d3 0100 	ldrd	r0, r1, [r3]
    9738:	4652      	mov	r2, sl
    973a:	465b      	mov	r3, fp
    973c:	f7fd fa1a 	bl	6b74 <__aeabi_dcmpgt>
    9740:	2800      	cmp	r0, #0
    9742:	f000 8242 	beq.w	9bca <_dtoa_r+0x5f2>
    9746:	1e73      	subs	r3, r6, #1
    9748:	9304      	str	r3, [sp, #16]
    974a:	2300      	movs	r3, #0
    974c:	930d      	str	r3, [sp, #52]	; 0x34
    974e:	1b2d      	subs	r5, r5, r4
    9750:	f1b5 0801 	subs.w	r8, r5, #1
    9754:	f100 822a 	bmi.w	9bac <_dtoa_r+0x5d4>
    9758:	2300      	movs	r3, #0
    975a:	9307      	str	r3, [sp, #28]
    975c:	9b04      	ldr	r3, [sp, #16]
    975e:	2b00      	cmp	r3, #0
    9760:	f2c0 821b 	blt.w	9b9a <_dtoa_r+0x5c2>
    9764:	4498      	add	r8, r3
    9766:	930c      	str	r3, [sp, #48]	; 0x30
    9768:	2300      	movs	r3, #0
    976a:	9306      	str	r3, [sp, #24]
    976c:	9b00      	ldr	r3, [sp, #0]
    976e:	2b09      	cmp	r3, #9
    9770:	d82a      	bhi.n	97c8 <_dtoa_r+0x1f0>
    9772:	2b05      	cmp	r3, #5
    9774:	f340 8644 	ble.w	a400 <_dtoa_r+0xe28>
    9778:	3b04      	subs	r3, #4
    977a:	9300      	str	r3, [sp, #0]
    977c:	2600      	movs	r6, #0
    977e:	9b00      	ldr	r3, [sp, #0]
    9780:	3b02      	subs	r3, #2
    9782:	2b03      	cmp	r3, #3
    9784:	f200 8623 	bhi.w	a3ce <_dtoa_r+0xdf6>
    9788:	e8df f013 	tbh	[pc, r3, lsl #1]
    978c:	0224032b 	.word	0x0224032b
    9790:	04500336 	.word	0x04500336
    9794:	4b44      	ldr	r3, [pc, #272]	; (98a8 <_dtoa_r+0x2d0>)
    9796:	4a47      	ldr	r2, [pc, #284]	; (98b4 <_dtoa_r+0x2dc>)
    9798:	f3c4 0013 	ubfx	r0, r4, #0, #20
    979c:	2800      	cmp	r0, #0
    979e:	bf14      	ite	ne
    97a0:	4618      	movne	r0, r3
    97a2:	4610      	moveq	r0, r2
    97a4:	e75d      	b.n	9662 <_dtoa_r+0x8a>
    97a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
    97aa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    97ae:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
    97b2:	4650      	mov	r0, sl
    97b4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    97b8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    97bc:	9d18      	ldr	r5, [sp, #96]	; 0x60
    97be:	e786      	b.n	96ce <_dtoa_r+0xf6>
    97c0:	483d      	ldr	r0, [pc, #244]	; (98b8 <_dtoa_r+0x2e0>)
    97c2:	e742      	b.n	964a <_dtoa_r+0x72>
    97c4:	1cc3      	adds	r3, r0, #3
    97c6:	e755      	b.n	9674 <_dtoa_r+0x9c>
    97c8:	2100      	movs	r1, #0
    97ca:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    97ce:	4648      	mov	r0, r9
    97d0:	460c      	mov	r4, r1
    97d2:	9100      	str	r1, [sp, #0]
    97d4:	f000 ffc4 	bl	a760 <_Balloc>
    97d8:	f04f 33ff 	mov.w	r3, #4294967295
    97dc:	9308      	str	r3, [sp, #32]
    97de:	930e      	str	r3, [sp, #56]	; 0x38
    97e0:	2301      	movs	r3, #1
    97e2:	9009      	str	r0, [sp, #36]	; 0x24
    97e4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    97e8:	9405      	str	r4, [sp, #20]
    97ea:	930b      	str	r3, [sp, #44]	; 0x2c
    97ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    97ee:	2b00      	cmp	r3, #0
    97f0:	f2c0 80d0 	blt.w	9994 <_dtoa_r+0x3bc>
    97f4:	9a04      	ldr	r2, [sp, #16]
    97f6:	2a0e      	cmp	r2, #14
    97f8:	f300 80cc 	bgt.w	9994 <_dtoa_r+0x3bc>
    97fc:	4b2c      	ldr	r3, [pc, #176]	; (98b0 <_dtoa_r+0x2d8>)
    97fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9802:	ed93 7b00 	vldr	d7, [r3]
    9806:	9b05      	ldr	r3, [sp, #20]
    9808:	2b00      	cmp	r3, #0
    980a:	ed8d 7b00 	vstr	d7, [sp]
    980e:	f2c0 82fe 	blt.w	9e0e <_dtoa_r+0x836>
    9812:	4656      	mov	r6, sl
    9814:	465f      	mov	r7, fp
    9816:	e9dd ab00 	ldrd	sl, fp, [sp]
    981a:	4630      	mov	r0, r6
    981c:	4652      	mov	r2, sl
    981e:	465b      	mov	r3, fp
    9820:	4639      	mov	r1, r7
    9822:	f7fd f841 	bl	68a8 <__aeabi_ddiv>
    9826:	f7fd f9c5 	bl	6bb4 <__aeabi_d2iz>
    982a:	4604      	mov	r4, r0
    982c:	f7fc feac 	bl	6588 <__aeabi_i2d>
    9830:	4652      	mov	r2, sl
    9832:	465b      	mov	r3, fp
    9834:	f7fc ff0e 	bl	6654 <__aeabi_dmul>
    9838:	460b      	mov	r3, r1
    983a:	4602      	mov	r2, r0
    983c:	4639      	mov	r1, r7
    983e:	4630      	mov	r0, r6
    9840:	f7fc fd54 	bl	62ec <__aeabi_dsub>
    9844:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9846:	f104 0330 	add.w	r3, r4, #48	; 0x30
    984a:	702b      	strb	r3, [r5, #0]
    984c:	9b08      	ldr	r3, [sp, #32]
    984e:	2b01      	cmp	r3, #1
    9850:	4606      	mov	r6, r0
    9852:	460f      	mov	r7, r1
    9854:	f105 0501 	add.w	r5, r5, #1
    9858:	d061      	beq.n	991e <_dtoa_r+0x346>
    985a:	2200      	movs	r2, #0
    985c:	4b17      	ldr	r3, [pc, #92]	; (98bc <_dtoa_r+0x2e4>)
    985e:	f7fc fef9 	bl	6654 <__aeabi_dmul>
    9862:	2200      	movs	r2, #0
    9864:	2300      	movs	r3, #0
    9866:	4606      	mov	r6, r0
    9868:	460f      	mov	r7, r1
    986a:	f7fd f95b 	bl	6b24 <__aeabi_dcmpeq>
    986e:	2800      	cmp	r0, #0
    9870:	d17d      	bne.n	996e <_dtoa_r+0x396>
    9872:	f8cd 9014 	str.w	r9, [sp, #20]
    9876:	f8dd a020 	ldr.w	sl, [sp, #32]
    987a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    987e:	e9dd 8900 	ldrd	r8, r9, [sp]
    9882:	e028      	b.n	98d6 <_dtoa_r+0x2fe>
    9884:	f3af 8000 	nop.w
    9888:	636f4361 	.word	0x636f4361
    988c:	3fd287a7 	.word	0x3fd287a7
    9890:	8b60c8b3 	.word	0x8b60c8b3
    9894:	3fc68a28 	.word	0x3fc68a28
    9898:	509f79fb 	.word	0x509f79fb
    989c:	3fd34413 	.word	0x3fd34413
    98a0:	7ff00000 	.word	0x7ff00000
    98a4:	0000b825 	.word	0x0000b825
    98a8:	0000b948 	.word	0x0000b948
    98ac:	3ff80000 	.word	0x3ff80000
    98b0:	0000b950 	.word	0x0000b950
    98b4:	0000b93c 	.word	0x0000b93c
    98b8:	0000b824 	.word	0x0000b824
    98bc:	40240000 	.word	0x40240000
    98c0:	f7fc fec8 	bl	6654 <__aeabi_dmul>
    98c4:	2200      	movs	r2, #0
    98c6:	2300      	movs	r3, #0
    98c8:	4606      	mov	r6, r0
    98ca:	460f      	mov	r7, r1
    98cc:	f7fd f92a 	bl	6b24 <__aeabi_dcmpeq>
    98d0:	2800      	cmp	r0, #0
    98d2:	f040 83ae 	bne.w	a032 <_dtoa_r+0xa5a>
    98d6:	4642      	mov	r2, r8
    98d8:	464b      	mov	r3, r9
    98da:	4630      	mov	r0, r6
    98dc:	4639      	mov	r1, r7
    98de:	f7fc ffe3 	bl	68a8 <__aeabi_ddiv>
    98e2:	f7fd f967 	bl	6bb4 <__aeabi_d2iz>
    98e6:	4604      	mov	r4, r0
    98e8:	f7fc fe4e 	bl	6588 <__aeabi_i2d>
    98ec:	4642      	mov	r2, r8
    98ee:	464b      	mov	r3, r9
    98f0:	f7fc feb0 	bl	6654 <__aeabi_dmul>
    98f4:	4602      	mov	r2, r0
    98f6:	460b      	mov	r3, r1
    98f8:	4630      	mov	r0, r6
    98fa:	4639      	mov	r1, r7
    98fc:	f7fc fcf6 	bl	62ec <__aeabi_dsub>
    9900:	f104 0e30 	add.w	lr, r4, #48	; 0x30
    9904:	f805 eb01 	strb.w	lr, [r5], #1
    9908:	ebcb 0e05 	rsb	lr, fp, r5
    990c:	45d6      	cmp	lr, sl
    990e:	4606      	mov	r6, r0
    9910:	460f      	mov	r7, r1
    9912:	f04f 0200 	mov.w	r2, #0
    9916:	4bae      	ldr	r3, [pc, #696]	; (9bd0 <_dtoa_r+0x5f8>)
    9918:	d1d2      	bne.n	98c0 <_dtoa_r+0x2e8>
    991a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    991e:	4632      	mov	r2, r6
    9920:	463b      	mov	r3, r7
    9922:	4630      	mov	r0, r6
    9924:	4639      	mov	r1, r7
    9926:	f7fc fce3 	bl	62f0 <__adddf3>
    992a:	4606      	mov	r6, r0
    992c:	460f      	mov	r7, r1
    992e:	4602      	mov	r2, r0
    9930:	460b      	mov	r3, r1
    9932:	e9dd 0100 	ldrd	r0, r1, [sp]
    9936:	f7fd f8ff 	bl	6b38 <__aeabi_dcmplt>
    993a:	b940      	cbnz	r0, 994e <_dtoa_r+0x376>
    993c:	4632      	mov	r2, r6
    993e:	463b      	mov	r3, r7
    9940:	e9dd 0100 	ldrd	r0, r1, [sp]
    9944:	f7fd f8ee 	bl	6b24 <__aeabi_dcmpeq>
    9948:	b188      	cbz	r0, 996e <_dtoa_r+0x396>
    994a:	07e3      	lsls	r3, r4, #31
    994c:	d50f      	bpl.n	996e <_dtoa_r+0x396>
    994e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    9952:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9954:	1e6b      	subs	r3, r5, #1
    9956:	e004      	b.n	9962 <_dtoa_r+0x38a>
    9958:	429a      	cmp	r2, r3
    995a:	f000 83fc 	beq.w	a156 <_dtoa_r+0xb7e>
    995e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    9962:	2c39      	cmp	r4, #57	; 0x39
    9964:	f103 0501 	add.w	r5, r3, #1
    9968:	d0f6      	beq.n	9958 <_dtoa_r+0x380>
    996a:	3401      	adds	r4, #1
    996c:	701c      	strb	r4, [r3, #0]
    996e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9970:	4648      	mov	r0, r9
    9972:	f000 ff1b 	bl	a7ac <_Bfree>
    9976:	2200      	movs	r2, #0
    9978:	9b04      	ldr	r3, [sp, #16]
    997a:	702a      	strb	r2, [r5, #0]
    997c:	9a03      	ldr	r2, [sp, #12]
    997e:	3301      	adds	r3, #1
    9980:	6013      	str	r3, [r2, #0]
    9982:	9b25      	ldr	r3, [sp, #148]	; 0x94
    9984:	2b00      	cmp	r3, #0
    9986:	f000 839b 	beq.w	a0c0 <_dtoa_r+0xae8>
    998a:	9809      	ldr	r0, [sp, #36]	; 0x24
    998c:	601d      	str	r5, [r3, #0]
    998e:	b01b      	add	sp, #108	; 0x6c
    9990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9996:	2a00      	cmp	r2, #0
    9998:	f000 810e 	beq.w	9bb8 <_dtoa_r+0x5e0>
    999c:	9a00      	ldr	r2, [sp, #0]
    999e:	2a01      	cmp	r2, #1
    99a0:	f340 8257 	ble.w	9e52 <_dtoa_r+0x87a>
    99a4:	9b08      	ldr	r3, [sp, #32]
    99a6:	9a06      	ldr	r2, [sp, #24]
    99a8:	1e5f      	subs	r7, r3, #1
    99aa:	42ba      	cmp	r2, r7
    99ac:	f2c0 838b 	blt.w	a0c6 <_dtoa_r+0xaee>
    99b0:	1bd7      	subs	r7, r2, r7
    99b2:	9b08      	ldr	r3, [sp, #32]
    99b4:	2b00      	cmp	r3, #0
    99b6:	f2c0 8480 	blt.w	a2ba <_dtoa_r+0xce2>
    99ba:	9d07      	ldr	r5, [sp, #28]
    99bc:	9b08      	ldr	r3, [sp, #32]
    99be:	9a07      	ldr	r2, [sp, #28]
    99c0:	2101      	movs	r1, #1
    99c2:	441a      	add	r2, r3
    99c4:	4648      	mov	r0, r9
    99c6:	9207      	str	r2, [sp, #28]
    99c8:	4498      	add	r8, r3
    99ca:	f000 ff87 	bl	a8dc <__i2b>
    99ce:	4606      	mov	r6, r0
    99d0:	b165      	cbz	r5, 99ec <_dtoa_r+0x414>
    99d2:	f1b8 0f00 	cmp.w	r8, #0
    99d6:	dd09      	ble.n	99ec <_dtoa_r+0x414>
    99d8:	4545      	cmp	r5, r8
    99da:	9a07      	ldr	r2, [sp, #28]
    99dc:	462b      	mov	r3, r5
    99de:	bfa8      	it	ge
    99e0:	4643      	movge	r3, r8
    99e2:	1ad2      	subs	r2, r2, r3
    99e4:	9207      	str	r2, [sp, #28]
    99e6:	1aed      	subs	r5, r5, r3
    99e8:	ebc3 0808 	rsb	r8, r3, r8
    99ec:	9b06      	ldr	r3, [sp, #24]
    99ee:	2b00      	cmp	r3, #0
    99f0:	f340 82f5 	ble.w	9fde <_dtoa_r+0xa06>
    99f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    99f6:	2a00      	cmp	r2, #0
    99f8:	f000 8202 	beq.w	9e00 <_dtoa_r+0x828>
    99fc:	2f00      	cmp	r7, #0
    99fe:	f000 81ff 	beq.w	9e00 <_dtoa_r+0x828>
    9a02:	4631      	mov	r1, r6
    9a04:	463a      	mov	r2, r7
    9a06:	4648      	mov	r0, r9
    9a08:	f001 f80a 	bl	aa20 <__pow5mult>
    9a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9a0e:	4601      	mov	r1, r0
    9a10:	4606      	mov	r6, r0
    9a12:	4648      	mov	r0, r9
    9a14:	f000 ff6c 	bl	a8f0 <__multiply>
    9a18:	990a      	ldr	r1, [sp, #40]	; 0x28
    9a1a:	4604      	mov	r4, r0
    9a1c:	4648      	mov	r0, r9
    9a1e:	f000 fec5 	bl	a7ac <_Bfree>
    9a22:	9b06      	ldr	r3, [sp, #24]
    9a24:	1bdb      	subs	r3, r3, r7
    9a26:	9306      	str	r3, [sp, #24]
    9a28:	f040 81e9 	bne.w	9dfe <_dtoa_r+0x826>
    9a2c:	2101      	movs	r1, #1
    9a2e:	4648      	mov	r0, r9
    9a30:	f000 ff54 	bl	a8dc <__i2b>
    9a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9a36:	9006      	str	r0, [sp, #24]
    9a38:	2b00      	cmp	r3, #0
    9a3a:	f000 8215 	beq.w	9e68 <_dtoa_r+0x890>
    9a3e:	4601      	mov	r1, r0
    9a40:	461a      	mov	r2, r3
    9a42:	4648      	mov	r0, r9
    9a44:	f000 ffec 	bl	aa20 <__pow5mult>
    9a48:	9b00      	ldr	r3, [sp, #0]
    9a4a:	9006      	str	r0, [sp, #24]
    9a4c:	2b01      	cmp	r3, #1
    9a4e:	f340 82f3 	ble.w	a038 <_dtoa_r+0xa60>
    9a52:	2700      	movs	r7, #0
    9a54:	9a06      	ldr	r2, [sp, #24]
    9a56:	6913      	ldr	r3, [r2, #16]
    9a58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9a5c:	6918      	ldr	r0, [r3, #16]
    9a5e:	f000 feef 	bl	a840 <__hi0bits>
    9a62:	f1c0 0020 	rsb	r0, r0, #32
    9a66:	4440      	add	r0, r8
    9a68:	f010 001f 	ands.w	r0, r0, #31
    9a6c:	f000 81fa 	beq.w	9e64 <_dtoa_r+0x88c>
    9a70:	f1c0 0320 	rsb	r3, r0, #32
    9a74:	2b04      	cmp	r3, #4
    9a76:	f340 84bd 	ble.w	a3f4 <_dtoa_r+0xe1c>
    9a7a:	f1c0 001c 	rsb	r0, r0, #28
    9a7e:	9b07      	ldr	r3, [sp, #28]
    9a80:	4403      	add	r3, r0
    9a82:	9307      	str	r3, [sp, #28]
    9a84:	4405      	add	r5, r0
    9a86:	4480      	add	r8, r0
    9a88:	9b07      	ldr	r3, [sp, #28]
    9a8a:	2b00      	cmp	r3, #0
    9a8c:	dd05      	ble.n	9a9a <_dtoa_r+0x4c2>
    9a8e:	4621      	mov	r1, r4
    9a90:	461a      	mov	r2, r3
    9a92:	4648      	mov	r0, r9
    9a94:	f001 f814 	bl	aac0 <__lshift>
    9a98:	4604      	mov	r4, r0
    9a9a:	f1b8 0f00 	cmp.w	r8, #0
    9a9e:	dd05      	ble.n	9aac <_dtoa_r+0x4d4>
    9aa0:	4642      	mov	r2, r8
    9aa2:	9906      	ldr	r1, [sp, #24]
    9aa4:	4648      	mov	r0, r9
    9aa6:	f001 f80b 	bl	aac0 <__lshift>
    9aaa:	9006      	str	r0, [sp, #24]
    9aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9aae:	2b00      	cmp	r3, #0
    9ab0:	f040 827a 	bne.w	9fa8 <_dtoa_r+0x9d0>
    9ab4:	9b08      	ldr	r3, [sp, #32]
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	f340 8293 	ble.w	9fe2 <_dtoa_r+0xa0a>
    9abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9abe:	2b00      	cmp	r3, #0
    9ac0:	f040 81f4 	bne.w	9eac <_dtoa_r+0x8d4>
    9ac4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    9ac8:	9f08      	ldr	r7, [sp, #32]
    9aca:	f8dd 8018 	ldr.w	r8, [sp, #24]
    9ace:	465d      	mov	r5, fp
    9ad0:	e002      	b.n	9ad8 <_dtoa_r+0x500>
    9ad2:	f000 fe75 	bl	a7c0 <__multadd>
    9ad6:	4604      	mov	r4, r0
    9ad8:	4641      	mov	r1, r8
    9ada:	4620      	mov	r0, r4
    9adc:	f7ff fce6 	bl	94ac <quorem>
    9ae0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    9ae4:	f805 ab01 	strb.w	sl, [r5], #1
    9ae8:	ebcb 0305 	rsb	r3, fp, r5
    9aec:	42bb      	cmp	r3, r7
    9aee:	f04f 020a 	mov.w	r2, #10
    9af2:	f04f 0300 	mov.w	r3, #0
    9af6:	4621      	mov	r1, r4
    9af8:	4648      	mov	r0, r9
    9afa:	dbea      	blt.n	9ad2 <_dtoa_r+0x4fa>
    9afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9afe:	9a08      	ldr	r2, [sp, #32]
    9b00:	2a01      	cmp	r2, #1
    9b02:	bfac      	ite	ge
    9b04:	189b      	addge	r3, r3, r2
    9b06:	3301      	addlt	r3, #1
    9b08:	461d      	mov	r5, r3
    9b0a:	f04f 0b00 	mov.w	fp, #0
    9b0e:	4621      	mov	r1, r4
    9b10:	2201      	movs	r2, #1
    9b12:	4648      	mov	r0, r9
    9b14:	f000 ffd4 	bl	aac0 <__lshift>
    9b18:	9906      	ldr	r1, [sp, #24]
    9b1a:	900a      	str	r0, [sp, #40]	; 0x28
    9b1c:	f001 f828 	bl	ab70 <__mcmp>
    9b20:	2800      	cmp	r0, #0
    9b22:	f340 8305 	ble.w	a130 <_dtoa_r+0xb58>
    9b26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    9b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
    9b2c:	1e6b      	subs	r3, r5, #1
    9b2e:	e004      	b.n	9b3a <_dtoa_r+0x562>
    9b30:	428b      	cmp	r3, r1
    9b32:	f000 8274 	beq.w	a01e <_dtoa_r+0xa46>
    9b36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    9b3a:	2a39      	cmp	r2, #57	; 0x39
    9b3c:	f103 0501 	add.w	r5, r3, #1
    9b40:	d0f6      	beq.n	9b30 <_dtoa_r+0x558>
    9b42:	3201      	adds	r2, #1
    9b44:	701a      	strb	r2, [r3, #0]
    9b46:	9906      	ldr	r1, [sp, #24]
    9b48:	4648      	mov	r0, r9
    9b4a:	f000 fe2f 	bl	a7ac <_Bfree>
    9b4e:	2e00      	cmp	r6, #0
    9b50:	f43f af0d 	beq.w	996e <_dtoa_r+0x396>
    9b54:	f1bb 0f00 	cmp.w	fp, #0
    9b58:	d005      	beq.n	9b66 <_dtoa_r+0x58e>
    9b5a:	45b3      	cmp	fp, r6
    9b5c:	d003      	beq.n	9b66 <_dtoa_r+0x58e>
    9b5e:	4659      	mov	r1, fp
    9b60:	4648      	mov	r0, r9
    9b62:	f000 fe23 	bl	a7ac <_Bfree>
    9b66:	4631      	mov	r1, r6
    9b68:	4648      	mov	r0, r9
    9b6a:	f000 fe1f 	bl	a7ac <_Bfree>
    9b6e:	e6fe      	b.n	996e <_dtoa_r+0x396>
    9b70:	2301      	movs	r3, #1
    9b72:	930d      	str	r3, [sp, #52]	; 0x34
    9b74:	e5eb      	b.n	974e <_dtoa_r+0x176>
    9b76:	f8dd 8010 	ldr.w	r8, [sp, #16]
    9b7a:	4640      	mov	r0, r8
    9b7c:	f7fc fd04 	bl	6588 <__aeabi_i2d>
    9b80:	4602      	mov	r2, r0
    9b82:	460b      	mov	r3, r1
    9b84:	4630      	mov	r0, r6
    9b86:	4639      	mov	r1, r7
    9b88:	f7fc ffcc 	bl	6b24 <__aeabi_dcmpeq>
    9b8c:	2800      	cmp	r0, #0
    9b8e:	f47f adca 	bne.w	9726 <_dtoa_r+0x14e>
    9b92:	f108 33ff 	add.w	r3, r8, #4294967295
    9b96:	9304      	str	r3, [sp, #16]
    9b98:	e5c5      	b.n	9726 <_dtoa_r+0x14e>
    9b9a:	9a07      	ldr	r2, [sp, #28]
    9b9c:	9b04      	ldr	r3, [sp, #16]
    9b9e:	1ad2      	subs	r2, r2, r3
    9ba0:	425b      	negs	r3, r3
    9ba2:	9306      	str	r3, [sp, #24]
    9ba4:	2300      	movs	r3, #0
    9ba6:	9207      	str	r2, [sp, #28]
    9ba8:	930c      	str	r3, [sp, #48]	; 0x30
    9baa:	e5df      	b.n	976c <_dtoa_r+0x194>
    9bac:	f1c8 0300 	rsb	r3, r8, #0
    9bb0:	9307      	str	r3, [sp, #28]
    9bb2:	f04f 0800 	mov.w	r8, #0
    9bb6:	e5d1      	b.n	975c <_dtoa_r+0x184>
    9bb8:	9f06      	ldr	r7, [sp, #24]
    9bba:	9d07      	ldr	r5, [sp, #28]
    9bbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    9bbe:	e707      	b.n	99d0 <_dtoa_r+0x3f8>
    9bc0:	f1c3 0420 	rsb	r4, r3, #32
    9bc4:	fa0a f004 	lsl.w	r0, sl, r4
    9bc8:	e57a      	b.n	96c0 <_dtoa_r+0xe8>
    9bca:	900d      	str	r0, [sp, #52]	; 0x34
    9bcc:	e5bf      	b.n	974e <_dtoa_r+0x176>
    9bce:	bf00      	nop
    9bd0:	40240000 	.word	0x40240000
    9bd4:	2300      	movs	r3, #0
    9bd6:	930b      	str	r3, [sp, #44]	; 0x2c
    9bd8:	9b04      	ldr	r3, [sp, #16]
    9bda:	9a05      	ldr	r2, [sp, #20]
    9bdc:	4413      	add	r3, r2
    9bde:	930e      	str	r3, [sp, #56]	; 0x38
    9be0:	3301      	adds	r3, #1
    9be2:	2b00      	cmp	r3, #0
    9be4:	9308      	str	r3, [sp, #32]
    9be6:	f340 827d 	ble.w	a0e4 <_dtoa_r+0xb0c>
    9bea:	9c08      	ldr	r4, [sp, #32]
    9bec:	4625      	mov	r5, r4
    9bee:	2100      	movs	r1, #0
    9bf0:	2d17      	cmp	r5, #23
    9bf2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    9bf6:	d90b      	bls.n	9c10 <_dtoa_r+0x638>
    9bf8:	2201      	movs	r2, #1
    9bfa:	2304      	movs	r3, #4
    9bfc:	005b      	lsls	r3, r3, #1
    9bfe:	f103 0014 	add.w	r0, r3, #20
    9c02:	42a8      	cmp	r0, r5
    9c04:	4611      	mov	r1, r2
    9c06:	f102 0201 	add.w	r2, r2, #1
    9c0a:	d9f7      	bls.n	9bfc <_dtoa_r+0x624>
    9c0c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    9c10:	4648      	mov	r0, r9
    9c12:	f000 fda5 	bl	a760 <_Balloc>
    9c16:	2c0e      	cmp	r4, #14
    9c18:	9009      	str	r0, [sp, #36]	; 0x24
    9c1a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    9c1e:	f63f ade5 	bhi.w	97ec <_dtoa_r+0x214>
    9c22:	2e00      	cmp	r6, #0
    9c24:	f43f ade2 	beq.w	97ec <_dtoa_r+0x214>
    9c28:	9904      	ldr	r1, [sp, #16]
    9c2a:	2900      	cmp	r1, #0
    9c2c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
    9c30:	f340 829a 	ble.w	a168 <_dtoa_r+0xb90>
    9c34:	4b90      	ldr	r3, [pc, #576]	; (9e78 <_dtoa_r+0x8a0>)
    9c36:	f001 020f 	and.w	r2, r1, #15
    9c3a:	110e      	asrs	r6, r1, #4
    9c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9c40:	06f0      	lsls	r0, r6, #27
    9c42:	e9d3 4500 	ldrd	r4, r5, [r3]
    9c46:	f140 8246 	bpl.w	a0d6 <_dtoa_r+0xafe>
    9c4a:	4b8c      	ldr	r3, [pc, #560]	; (9e7c <_dtoa_r+0x8a4>)
    9c4c:	4650      	mov	r0, sl
    9c4e:	4659      	mov	r1, fp
    9c50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9c54:	f7fc fe28 	bl	68a8 <__aeabi_ddiv>
    9c58:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    9c5c:	f006 060f 	and.w	r6, r6, #15
    9c60:	f04f 0a03 	mov.w	sl, #3
    9c64:	b186      	cbz	r6, 9c88 <_dtoa_r+0x6b0>
    9c66:	4f85      	ldr	r7, [pc, #532]	; (9e7c <_dtoa_r+0x8a4>)
    9c68:	07f1      	lsls	r1, r6, #31
    9c6a:	d509      	bpl.n	9c80 <_dtoa_r+0x6a8>
    9c6c:	4620      	mov	r0, r4
    9c6e:	4629      	mov	r1, r5
    9c70:	e9d7 2300 	ldrd	r2, r3, [r7]
    9c74:	f7fc fcee 	bl	6654 <__aeabi_dmul>
    9c78:	f10a 0a01 	add.w	sl, sl, #1
    9c7c:	4604      	mov	r4, r0
    9c7e:	460d      	mov	r5, r1
    9c80:	1076      	asrs	r6, r6, #1
    9c82:	f107 0708 	add.w	r7, r7, #8
    9c86:	d1ef      	bne.n	9c68 <_dtoa_r+0x690>
    9c88:	4622      	mov	r2, r4
    9c8a:	462b      	mov	r3, r5
    9c8c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    9c90:	f7fc fe0a 	bl	68a8 <__aeabi_ddiv>
    9c94:	4606      	mov	r6, r0
    9c96:	460f      	mov	r7, r1
    9c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9c9a:	b143      	cbz	r3, 9cae <_dtoa_r+0x6d6>
    9c9c:	2200      	movs	r2, #0
    9c9e:	4b78      	ldr	r3, [pc, #480]	; (9e80 <_dtoa_r+0x8a8>)
    9ca0:	4630      	mov	r0, r6
    9ca2:	4639      	mov	r1, r7
    9ca4:	f7fc ff48 	bl	6b38 <__aeabi_dcmplt>
    9ca8:	2800      	cmp	r0, #0
    9caa:	f040 831a 	bne.w	a2e2 <_dtoa_r+0xd0a>
    9cae:	4650      	mov	r0, sl
    9cb0:	f7fc fc6a 	bl	6588 <__aeabi_i2d>
    9cb4:	4632      	mov	r2, r6
    9cb6:	463b      	mov	r3, r7
    9cb8:	f7fc fccc 	bl	6654 <__aeabi_dmul>
    9cbc:	4b71      	ldr	r3, [pc, #452]	; (9e84 <_dtoa_r+0x8ac>)
    9cbe:	2200      	movs	r2, #0
    9cc0:	f7fc fb16 	bl	62f0 <__adddf3>
    9cc4:	9b08      	ldr	r3, [sp, #32]
    9cc6:	4604      	mov	r4, r0
    9cc8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    9ccc:	2b00      	cmp	r3, #0
    9cce:	f000 81db 	beq.w	a088 <_dtoa_r+0xab0>
    9cd2:	9b04      	ldr	r3, [sp, #16]
    9cd4:	9316      	str	r3, [sp, #88]	; 0x58
    9cd6:	9b08      	ldr	r3, [sp, #32]
    9cd8:	9312      	str	r3, [sp, #72]	; 0x48
    9cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9cdc:	2b00      	cmp	r3, #0
    9cde:	f000 8294 	beq.w	a20a <_dtoa_r+0xc32>
    9ce2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9ce4:	4b64      	ldr	r3, [pc, #400]	; (9e78 <_dtoa_r+0x8a0>)
    9ce6:	4968      	ldr	r1, [pc, #416]	; (9e88 <_dtoa_r+0x8b0>)
    9ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9cec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    9cf0:	2000      	movs	r0, #0
    9cf2:	f7fc fdd9 	bl	68a8 <__aeabi_ddiv>
    9cf6:	4622      	mov	r2, r4
    9cf8:	462b      	mov	r3, r5
    9cfa:	f7fc faf7 	bl	62ec <__aeabi_dsub>
    9cfe:	4682      	mov	sl, r0
    9d00:	468b      	mov	fp, r1
    9d02:	4630      	mov	r0, r6
    9d04:	4639      	mov	r1, r7
    9d06:	f7fc ff55 	bl	6bb4 <__aeabi_d2iz>
    9d0a:	4604      	mov	r4, r0
    9d0c:	f7fc fc3c 	bl	6588 <__aeabi_i2d>
    9d10:	4602      	mov	r2, r0
    9d12:	460b      	mov	r3, r1
    9d14:	4630      	mov	r0, r6
    9d16:	4639      	mov	r1, r7
    9d18:	f7fc fae8 	bl	62ec <__aeabi_dsub>
    9d1c:	3430      	adds	r4, #48	; 0x30
    9d1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9d20:	b2e4      	uxtb	r4, r4
    9d22:	4606      	mov	r6, r0
    9d24:	460f      	mov	r7, r1
    9d26:	702c      	strb	r4, [r5, #0]
    9d28:	4602      	mov	r2, r0
    9d2a:	460b      	mov	r3, r1
    9d2c:	4650      	mov	r0, sl
    9d2e:	4659      	mov	r1, fp
    9d30:	3501      	adds	r5, #1
    9d32:	f7fc ff1f 	bl	6b74 <__aeabi_dcmpgt>
    9d36:	2800      	cmp	r0, #0
    9d38:	d150      	bne.n	9ddc <_dtoa_r+0x804>
    9d3a:	4632      	mov	r2, r6
    9d3c:	463b      	mov	r3, r7
    9d3e:	2000      	movs	r0, #0
    9d40:	494f      	ldr	r1, [pc, #316]	; (9e80 <_dtoa_r+0x8a8>)
    9d42:	f7fc fad3 	bl	62ec <__aeabi_dsub>
    9d46:	4602      	mov	r2, r0
    9d48:	460b      	mov	r3, r1
    9d4a:	4650      	mov	r0, sl
    9d4c:	4659      	mov	r1, fp
    9d4e:	f7fc ff11 	bl	6b74 <__aeabi_dcmpgt>
    9d52:	2800      	cmp	r0, #0
    9d54:	f040 8308 	bne.w	a368 <_dtoa_r+0xd90>
    9d58:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9d5a:	2a01      	cmp	r2, #1
    9d5c:	f340 81f7 	ble.w	a14e <_dtoa_r+0xb76>
    9d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d64:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
    9d68:	4413      	add	r3, r2
    9d6a:	4698      	mov	r8, r3
    9d6c:	e00d      	b.n	9d8a <_dtoa_r+0x7b2>
    9d6e:	2000      	movs	r0, #0
    9d70:	4943      	ldr	r1, [pc, #268]	; (9e80 <_dtoa_r+0x8a8>)
    9d72:	f7fc fabb 	bl	62ec <__aeabi_dsub>
    9d76:	4652      	mov	r2, sl
    9d78:	465b      	mov	r3, fp
    9d7a:	f7fc fedd 	bl	6b38 <__aeabi_dcmplt>
    9d7e:	2800      	cmp	r0, #0
    9d80:	f040 82f2 	bne.w	a368 <_dtoa_r+0xd90>
    9d84:	4545      	cmp	r5, r8
    9d86:	f000 81e0 	beq.w	a14a <_dtoa_r+0xb72>
    9d8a:	4650      	mov	r0, sl
    9d8c:	4659      	mov	r1, fp
    9d8e:	2200      	movs	r2, #0
    9d90:	4b3e      	ldr	r3, [pc, #248]	; (9e8c <_dtoa_r+0x8b4>)
    9d92:	f7fc fc5f 	bl	6654 <__aeabi_dmul>
    9d96:	2200      	movs	r2, #0
    9d98:	4b3c      	ldr	r3, [pc, #240]	; (9e8c <_dtoa_r+0x8b4>)
    9d9a:	4682      	mov	sl, r0
    9d9c:	468b      	mov	fp, r1
    9d9e:	4630      	mov	r0, r6
    9da0:	4639      	mov	r1, r7
    9da2:	f7fc fc57 	bl	6654 <__aeabi_dmul>
    9da6:	460f      	mov	r7, r1
    9da8:	4606      	mov	r6, r0
    9daa:	f7fc ff03 	bl	6bb4 <__aeabi_d2iz>
    9dae:	4604      	mov	r4, r0
    9db0:	f7fc fbea 	bl	6588 <__aeabi_i2d>
    9db4:	4602      	mov	r2, r0
    9db6:	460b      	mov	r3, r1
    9db8:	4630      	mov	r0, r6
    9dba:	4639      	mov	r1, r7
    9dbc:	f7fc fa96 	bl	62ec <__aeabi_dsub>
    9dc0:	3430      	adds	r4, #48	; 0x30
    9dc2:	b2e4      	uxtb	r4, r4
    9dc4:	4652      	mov	r2, sl
    9dc6:	465b      	mov	r3, fp
    9dc8:	f805 4b01 	strb.w	r4, [r5], #1
    9dcc:	4606      	mov	r6, r0
    9dce:	460f      	mov	r7, r1
    9dd0:	f7fc feb2 	bl	6b38 <__aeabi_dcmplt>
    9dd4:	4632      	mov	r2, r6
    9dd6:	463b      	mov	r3, r7
    9dd8:	2800      	cmp	r0, #0
    9dda:	d0c8      	beq.n	9d6e <_dtoa_r+0x796>
    9ddc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9dde:	9304      	str	r3, [sp, #16]
    9de0:	e5c5      	b.n	996e <_dtoa_r+0x396>
    9de2:	2300      	movs	r3, #0
    9de4:	930b      	str	r3, [sp, #44]	; 0x2c
    9de6:	9b05      	ldr	r3, [sp, #20]
    9de8:	2b00      	cmp	r3, #0
    9dea:	f340 8180 	ble.w	a0ee <_dtoa_r+0xb16>
    9dee:	461d      	mov	r5, r3
    9df0:	461c      	mov	r4, r3
    9df2:	930e      	str	r3, [sp, #56]	; 0x38
    9df4:	9308      	str	r3, [sp, #32]
    9df6:	e6fa      	b.n	9bee <_dtoa_r+0x616>
    9df8:	2301      	movs	r3, #1
    9dfa:	930b      	str	r3, [sp, #44]	; 0x2c
    9dfc:	e7f3      	b.n	9de6 <_dtoa_r+0x80e>
    9dfe:	940a      	str	r4, [sp, #40]	; 0x28
    9e00:	9a06      	ldr	r2, [sp, #24]
    9e02:	990a      	ldr	r1, [sp, #40]	; 0x28
    9e04:	4648      	mov	r0, r9
    9e06:	f000 fe0b 	bl	aa20 <__pow5mult>
    9e0a:	4604      	mov	r4, r0
    9e0c:	e60e      	b.n	9a2c <_dtoa_r+0x454>
    9e0e:	9b08      	ldr	r3, [sp, #32]
    9e10:	2b00      	cmp	r3, #0
    9e12:	f73f acfe 	bgt.w	9812 <_dtoa_r+0x23a>
    9e16:	f040 814f 	bne.w	a0b8 <_dtoa_r+0xae0>
    9e1a:	2200      	movs	r2, #0
    9e1c:	4b1c      	ldr	r3, [pc, #112]	; (9e90 <_dtoa_r+0x8b8>)
    9e1e:	e9dd 0100 	ldrd	r0, r1, [sp]
    9e22:	f7fc fc17 	bl	6654 <__aeabi_dmul>
    9e26:	465b      	mov	r3, fp
    9e28:	4652      	mov	r2, sl
    9e2a:	f7fc fe99 	bl	6b60 <__aeabi_dcmpge>
    9e2e:	9b08      	ldr	r3, [sp, #32]
    9e30:	9306      	str	r3, [sp, #24]
    9e32:	461e      	mov	r6, r3
    9e34:	2800      	cmp	r0, #0
    9e36:	f000 80ea 	beq.w	a00e <_dtoa_r+0xa36>
    9e3a:	9b05      	ldr	r3, [sp, #20]
    9e3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9e3e:	43db      	mvns	r3, r3
    9e40:	9304      	str	r3, [sp, #16]
    9e42:	9906      	ldr	r1, [sp, #24]
    9e44:	4648      	mov	r0, r9
    9e46:	f000 fcb1 	bl	a7ac <_Bfree>
    9e4a:	2e00      	cmp	r6, #0
    9e4c:	f43f ad8f 	beq.w	996e <_dtoa_r+0x396>
    9e50:	e689      	b.n	9b66 <_dtoa_r+0x58e>
    9e52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9e54:	2a00      	cmp	r2, #0
    9e56:	f000 8238 	beq.w	a2ca <_dtoa_r+0xcf2>
    9e5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
    9e5e:	9f06      	ldr	r7, [sp, #24]
    9e60:	9d07      	ldr	r5, [sp, #28]
    9e62:	e5ac      	b.n	99be <_dtoa_r+0x3e6>
    9e64:	201c      	movs	r0, #28
    9e66:	e60a      	b.n	9a7e <_dtoa_r+0x4a6>
    9e68:	9b00      	ldr	r3, [sp, #0]
    9e6a:	2b01      	cmp	r3, #1
    9e6c:	f340 8280 	ble.w	a370 <_dtoa_r+0xd98>
    9e70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    9e72:	2001      	movs	r0, #1
    9e74:	e5f7      	b.n	9a66 <_dtoa_r+0x48e>
    9e76:	bf00      	nop
    9e78:	0000b950 	.word	0x0000b950
    9e7c:	0000ba18 	.word	0x0000ba18
    9e80:	3ff00000 	.word	0x3ff00000
    9e84:	401c0000 	.word	0x401c0000
    9e88:	3fe00000 	.word	0x3fe00000
    9e8c:	40240000 	.word	0x40240000
    9e90:	40140000 	.word	0x40140000
    9e94:	4631      	mov	r1, r6
    9e96:	2300      	movs	r3, #0
    9e98:	220a      	movs	r2, #10
    9e9a:	4648      	mov	r0, r9
    9e9c:	f000 fc90 	bl	a7c0 <__multadd>
    9ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9ea2:	2b00      	cmp	r3, #0
    9ea4:	4606      	mov	r6, r0
    9ea6:	f340 828d 	ble.w	a3c4 <_dtoa_r+0xdec>
    9eaa:	9308      	str	r3, [sp, #32]
    9eac:	2d00      	cmp	r5, #0
    9eae:	dd05      	ble.n	9ebc <_dtoa_r+0x8e4>
    9eb0:	4631      	mov	r1, r6
    9eb2:	462a      	mov	r2, r5
    9eb4:	4648      	mov	r0, r9
    9eb6:	f000 fe03 	bl	aac0 <__lshift>
    9eba:	4606      	mov	r6, r0
    9ebc:	2f00      	cmp	r7, #0
    9ebe:	f040 817c 	bne.w	a1ba <_dtoa_r+0xbe2>
    9ec2:	46b0      	mov	r8, r6
    9ec4:	9b08      	ldr	r3, [sp, #32]
    9ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ec8:	3b01      	subs	r3, #1
    9eca:	18d3      	adds	r3, r2, r3
    9ecc:	9308      	str	r3, [sp, #32]
    9ece:	f00a 0301 	and.w	r3, sl, #1
    9ed2:	930a      	str	r3, [sp, #40]	; 0x28
    9ed4:	4617      	mov	r7, r2
    9ed6:	f8dd b018 	ldr.w	fp, [sp, #24]
    9eda:	4620      	mov	r0, r4
    9edc:	4659      	mov	r1, fp
    9ede:	f7ff fae5 	bl	94ac <quorem>
    9ee2:	4631      	mov	r1, r6
    9ee4:	4605      	mov	r5, r0
    9ee6:	4620      	mov	r0, r4
    9ee8:	f000 fe42 	bl	ab70 <__mcmp>
    9eec:	4642      	mov	r2, r8
    9eee:	4659      	mov	r1, fp
    9ef0:	4682      	mov	sl, r0
    9ef2:	4648      	mov	r0, r9
    9ef4:	f000 fe5e 	bl	abb4 <__mdiff>
    9ef8:	68c2      	ldr	r2, [r0, #12]
    9efa:	4683      	mov	fp, r0
    9efc:	f105 0330 	add.w	r3, r5, #48	; 0x30
    9f00:	2a00      	cmp	r2, #0
    9f02:	d149      	bne.n	9f98 <_dtoa_r+0x9c0>
    9f04:	4601      	mov	r1, r0
    9f06:	4620      	mov	r0, r4
    9f08:	9307      	str	r3, [sp, #28]
    9f0a:	f000 fe31 	bl	ab70 <__mcmp>
    9f0e:	4659      	mov	r1, fp
    9f10:	9005      	str	r0, [sp, #20]
    9f12:	4648      	mov	r0, r9
    9f14:	f000 fc4a 	bl	a7ac <_Bfree>
    9f18:	9a05      	ldr	r2, [sp, #20]
    9f1a:	9b07      	ldr	r3, [sp, #28]
    9f1c:	b92a      	cbnz	r2, 9f2a <_dtoa_r+0x952>
    9f1e:	9900      	ldr	r1, [sp, #0]
    9f20:	b919      	cbnz	r1, 9f2a <_dtoa_r+0x952>
    9f22:	990a      	ldr	r1, [sp, #40]	; 0x28
    9f24:	2900      	cmp	r1, #0
    9f26:	f000 8235 	beq.w	a394 <_dtoa_r+0xdbc>
    9f2a:	f1ba 0f00 	cmp.w	sl, #0
    9f2e:	f2c0 80e3 	blt.w	a0f8 <_dtoa_r+0xb20>
    9f32:	d105      	bne.n	9f40 <_dtoa_r+0x968>
    9f34:	9900      	ldr	r1, [sp, #0]
    9f36:	b919      	cbnz	r1, 9f40 <_dtoa_r+0x968>
    9f38:	990a      	ldr	r1, [sp, #40]	; 0x28
    9f3a:	2900      	cmp	r1, #0
    9f3c:	f000 80dc 	beq.w	a0f8 <_dtoa_r+0xb20>
    9f40:	2a00      	cmp	r2, #0
    9f42:	f300 814e 	bgt.w	a1e2 <_dtoa_r+0xc0a>
    9f46:	9a08      	ldr	r2, [sp, #32]
    9f48:	703b      	strb	r3, [r7, #0]
    9f4a:	f107 0a01 	add.w	sl, r7, #1
    9f4e:	4297      	cmp	r7, r2
    9f50:	4655      	mov	r5, sl
    9f52:	f000 8152 	beq.w	a1fa <_dtoa_r+0xc22>
    9f56:	4621      	mov	r1, r4
    9f58:	2300      	movs	r3, #0
    9f5a:	220a      	movs	r2, #10
    9f5c:	4648      	mov	r0, r9
    9f5e:	f000 fc2f 	bl	a7c0 <__multadd>
    9f62:	4546      	cmp	r6, r8
    9f64:	4604      	mov	r4, r0
    9f66:	4631      	mov	r1, r6
    9f68:	f04f 0300 	mov.w	r3, #0
    9f6c:	f04f 020a 	mov.w	r2, #10
    9f70:	4648      	mov	r0, r9
    9f72:	d00b      	beq.n	9f8c <_dtoa_r+0x9b4>
    9f74:	f000 fc24 	bl	a7c0 <__multadd>
    9f78:	4641      	mov	r1, r8
    9f7a:	4606      	mov	r6, r0
    9f7c:	2300      	movs	r3, #0
    9f7e:	220a      	movs	r2, #10
    9f80:	4648      	mov	r0, r9
    9f82:	f000 fc1d 	bl	a7c0 <__multadd>
    9f86:	4657      	mov	r7, sl
    9f88:	4680      	mov	r8, r0
    9f8a:	e7a4      	b.n	9ed6 <_dtoa_r+0x8fe>
    9f8c:	f000 fc18 	bl	a7c0 <__multadd>
    9f90:	4657      	mov	r7, sl
    9f92:	4606      	mov	r6, r0
    9f94:	4680      	mov	r8, r0
    9f96:	e79e      	b.n	9ed6 <_dtoa_r+0x8fe>
    9f98:	4601      	mov	r1, r0
    9f9a:	4648      	mov	r0, r9
    9f9c:	9305      	str	r3, [sp, #20]
    9f9e:	f000 fc05 	bl	a7ac <_Bfree>
    9fa2:	2201      	movs	r2, #1
    9fa4:	9b05      	ldr	r3, [sp, #20]
    9fa6:	e7c0      	b.n	9f2a <_dtoa_r+0x952>
    9fa8:	9906      	ldr	r1, [sp, #24]
    9faa:	4620      	mov	r0, r4
    9fac:	f000 fde0 	bl	ab70 <__mcmp>
    9fb0:	2800      	cmp	r0, #0
    9fb2:	f6bf ad7f 	bge.w	9ab4 <_dtoa_r+0x4dc>
    9fb6:	4621      	mov	r1, r4
    9fb8:	9c04      	ldr	r4, [sp, #16]
    9fba:	2300      	movs	r3, #0
    9fbc:	3c01      	subs	r4, #1
    9fbe:	220a      	movs	r2, #10
    9fc0:	4648      	mov	r0, r9
    9fc2:	9404      	str	r4, [sp, #16]
    9fc4:	f000 fbfc 	bl	a7c0 <__multadd>
    9fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9fca:	4604      	mov	r4, r0
    9fcc:	2b00      	cmp	r3, #0
    9fce:	f47f af61 	bne.w	9e94 <_dtoa_r+0x8bc>
    9fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9fd4:	2b00      	cmp	r3, #0
    9fd6:	f340 81ed 	ble.w	a3b4 <_dtoa_r+0xddc>
    9fda:	9308      	str	r3, [sp, #32]
    9fdc:	e572      	b.n	9ac4 <_dtoa_r+0x4ec>
    9fde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9fe0:	e524      	b.n	9a2c <_dtoa_r+0x454>
    9fe2:	9b00      	ldr	r3, [sp, #0]
    9fe4:	2b02      	cmp	r3, #2
    9fe6:	f77f ad69 	ble.w	9abc <_dtoa_r+0x4e4>
    9fea:	9b08      	ldr	r3, [sp, #32]
    9fec:	2b00      	cmp	r3, #0
    9fee:	f040 819d 	bne.w	a32c <_dtoa_r+0xd54>
    9ff2:	9906      	ldr	r1, [sp, #24]
    9ff4:	2205      	movs	r2, #5
    9ff6:	4648      	mov	r0, r9
    9ff8:	f000 fbe2 	bl	a7c0 <__multadd>
    9ffc:	4601      	mov	r1, r0
    9ffe:	9006      	str	r0, [sp, #24]
    a000:	4620      	mov	r0, r4
    a002:	f000 fdb5 	bl	ab70 <__mcmp>
    a006:	2800      	cmp	r0, #0
    a008:	940a      	str	r4, [sp, #40]	; 0x28
    a00a:	f77f af16 	ble.w	9e3a <_dtoa_r+0x862>
    a00e:	9a04      	ldr	r2, [sp, #16]
    a010:	9909      	ldr	r1, [sp, #36]	; 0x24
    a012:	2331      	movs	r3, #49	; 0x31
    a014:	3201      	adds	r2, #1
    a016:	9204      	str	r2, [sp, #16]
    a018:	700b      	strb	r3, [r1, #0]
    a01a:	1c4d      	adds	r5, r1, #1
    a01c:	e711      	b.n	9e42 <_dtoa_r+0x86a>
    a01e:	9a04      	ldr	r2, [sp, #16]
    a020:	3201      	adds	r2, #1
    a022:	9204      	str	r2, [sp, #16]
    a024:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a026:	2331      	movs	r3, #49	; 0x31
    a028:	7013      	strb	r3, [r2, #0]
    a02a:	e58c      	b.n	9b46 <_dtoa_r+0x56e>
    a02c:	2301      	movs	r3, #1
    a02e:	930b      	str	r3, [sp, #44]	; 0x2c
    a030:	e5d2      	b.n	9bd8 <_dtoa_r+0x600>
    a032:	f8dd 9014 	ldr.w	r9, [sp, #20]
    a036:	e49a      	b.n	996e <_dtoa_r+0x396>
    a038:	f1ba 0f00 	cmp.w	sl, #0
    a03c:	f47f ad09 	bne.w	9a52 <_dtoa_r+0x47a>
    a040:	f3cb 0313 	ubfx	r3, fp, #0, #20
    a044:	2b00      	cmp	r3, #0
    a046:	f040 813e 	bne.w	a2c6 <_dtoa_r+0xcee>
    a04a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    a04e:	0d3f      	lsrs	r7, r7, #20
    a050:	053f      	lsls	r7, r7, #20
    a052:	b12f      	cbz	r7, a060 <_dtoa_r+0xa88>
    a054:	9b07      	ldr	r3, [sp, #28]
    a056:	3301      	adds	r3, #1
    a058:	9307      	str	r3, [sp, #28]
    a05a:	f108 0801 	add.w	r8, r8, #1
    a05e:	2701      	movs	r7, #1
    a060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a062:	2001      	movs	r0, #1
    a064:	2b00      	cmp	r3, #0
    a066:	f43f acfe 	beq.w	9a66 <_dtoa_r+0x48e>
    a06a:	e4f3      	b.n	9a54 <_dtoa_r+0x47c>
    a06c:	4650      	mov	r0, sl
    a06e:	f7fc fa8b 	bl	6588 <__aeabi_i2d>
    a072:	4632      	mov	r2, r6
    a074:	463b      	mov	r3, r7
    a076:	f7fc faed 	bl	6654 <__aeabi_dmul>
    a07a:	2200      	movs	r2, #0
    a07c:	4bbf      	ldr	r3, [pc, #764]	; (a37c <_dtoa_r+0xda4>)
    a07e:	f7fc f937 	bl	62f0 <__adddf3>
    a082:	4604      	mov	r4, r0
    a084:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    a088:	4630      	mov	r0, r6
    a08a:	4639      	mov	r1, r7
    a08c:	2200      	movs	r2, #0
    a08e:	4bbc      	ldr	r3, [pc, #752]	; (a380 <_dtoa_r+0xda8>)
    a090:	f7fc f92c 	bl	62ec <__aeabi_dsub>
    a094:	4622      	mov	r2, r4
    a096:	462b      	mov	r3, r5
    a098:	4606      	mov	r6, r0
    a09a:	460f      	mov	r7, r1
    a09c:	f7fc fd6a 	bl	6b74 <__aeabi_dcmpgt>
    a0a0:	2800      	cmp	r0, #0
    a0a2:	f040 80ae 	bne.w	a202 <_dtoa_r+0xc2a>
    a0a6:	4622      	mov	r2, r4
    a0a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    a0ac:	4630      	mov	r0, r6
    a0ae:	4639      	mov	r1, r7
    a0b0:	f7fc fd42 	bl	6b38 <__aeabi_dcmplt>
    a0b4:	2800      	cmp	r0, #0
    a0b6:	d04a      	beq.n	a14e <_dtoa_r+0xb76>
    a0b8:	2300      	movs	r3, #0
    a0ba:	9306      	str	r3, [sp, #24]
    a0bc:	461e      	mov	r6, r3
    a0be:	e6bc      	b.n	9e3a <_dtoa_r+0x862>
    a0c0:	9809      	ldr	r0, [sp, #36]	; 0x24
    a0c2:	f7ff bac2 	b.w	964a <_dtoa_r+0x72>
    a0c6:	9b06      	ldr	r3, [sp, #24]
    a0c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a0ca:	9706      	str	r7, [sp, #24]
    a0cc:	1afb      	subs	r3, r7, r3
    a0ce:	441a      	add	r2, r3
    a0d0:	920c      	str	r2, [sp, #48]	; 0x30
    a0d2:	2700      	movs	r7, #0
    a0d4:	e46d      	b.n	99b2 <_dtoa_r+0x3da>
    a0d6:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
    a0da:	f04f 0a02 	mov.w	sl, #2
    a0de:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
    a0e2:	e5bf      	b.n	9c64 <_dtoa_r+0x68c>
    a0e4:	461c      	mov	r4, r3
    a0e6:	2100      	movs	r1, #0
    a0e8:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    a0ec:	e590      	b.n	9c10 <_dtoa_r+0x638>
    a0ee:	2401      	movs	r4, #1
    a0f0:	940e      	str	r4, [sp, #56]	; 0x38
    a0f2:	9408      	str	r4, [sp, #32]
    a0f4:	9405      	str	r4, [sp, #20]
    a0f6:	e7f6      	b.n	a0e6 <_dtoa_r+0xb0e>
    a0f8:	2a00      	cmp	r2, #0
    a0fa:	469a      	mov	sl, r3
    a0fc:	dd11      	ble.n	a122 <_dtoa_r+0xb4a>
    a0fe:	4621      	mov	r1, r4
    a100:	2201      	movs	r2, #1
    a102:	4648      	mov	r0, r9
    a104:	f000 fcdc 	bl	aac0 <__lshift>
    a108:	9906      	ldr	r1, [sp, #24]
    a10a:	4604      	mov	r4, r0
    a10c:	f000 fd30 	bl	ab70 <__mcmp>
    a110:	2800      	cmp	r0, #0
    a112:	f340 8148 	ble.w	a3a6 <_dtoa_r+0xdce>
    a116:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    a11a:	f000 8109 	beq.w	a330 <_dtoa_r+0xd58>
    a11e:	f105 0a31 	add.w	sl, r5, #49	; 0x31
    a122:	46b3      	mov	fp, r6
    a124:	f887 a000 	strb.w	sl, [r7]
    a128:	1c7d      	adds	r5, r7, #1
    a12a:	4646      	mov	r6, r8
    a12c:	940a      	str	r4, [sp, #40]	; 0x28
    a12e:	e50a      	b.n	9b46 <_dtoa_r+0x56e>
    a130:	d104      	bne.n	a13c <_dtoa_r+0xb64>
    a132:	f01a 0f01 	tst.w	sl, #1
    a136:	d001      	beq.n	a13c <_dtoa_r+0xb64>
    a138:	e4f5      	b.n	9b26 <_dtoa_r+0x54e>
    a13a:	4615      	mov	r5, r2
    a13c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    a140:	2b30      	cmp	r3, #48	; 0x30
    a142:	f105 32ff 	add.w	r2, r5, #4294967295
    a146:	d0f8      	beq.n	a13a <_dtoa_r+0xb62>
    a148:	e4fd      	b.n	9b46 <_dtoa_r+0x56e>
    a14a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    a14e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    a152:	f7ff bb4b 	b.w	97ec <_dtoa_r+0x214>
    a156:	9909      	ldr	r1, [sp, #36]	; 0x24
    a158:	2230      	movs	r2, #48	; 0x30
    a15a:	700a      	strb	r2, [r1, #0]
    a15c:	9a04      	ldr	r2, [sp, #16]
    a15e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    a162:	3201      	adds	r2, #1
    a164:	9204      	str	r2, [sp, #16]
    a166:	e400      	b.n	996a <_dtoa_r+0x392>
    a168:	9b04      	ldr	r3, [sp, #16]
    a16a:	425c      	negs	r4, r3
    a16c:	2c00      	cmp	r4, #0
    a16e:	f000 80b3 	beq.w	a2d8 <_dtoa_r+0xd00>
    a172:	4b84      	ldr	r3, [pc, #528]	; (a384 <_dtoa_r+0xdac>)
    a174:	f004 020f 	and.w	r2, r4, #15
    a178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a180:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a184:	f7fc fa66 	bl	6654 <__aeabi_dmul>
    a188:	1124      	asrs	r4, r4, #4
    a18a:	4606      	mov	r6, r0
    a18c:	460f      	mov	r7, r1
    a18e:	f000 8116 	beq.w	a3be <_dtoa_r+0xde6>
    a192:	4d7d      	ldr	r5, [pc, #500]	; (a388 <_dtoa_r+0xdb0>)
    a194:	f04f 0a02 	mov.w	sl, #2
    a198:	07e2      	lsls	r2, r4, #31
    a19a:	d509      	bpl.n	a1b0 <_dtoa_r+0xbd8>
    a19c:	4630      	mov	r0, r6
    a19e:	4639      	mov	r1, r7
    a1a0:	e9d5 2300 	ldrd	r2, r3, [r5]
    a1a4:	f7fc fa56 	bl	6654 <__aeabi_dmul>
    a1a8:	f10a 0a01 	add.w	sl, sl, #1
    a1ac:	4606      	mov	r6, r0
    a1ae:	460f      	mov	r7, r1
    a1b0:	1064      	asrs	r4, r4, #1
    a1b2:	f105 0508 	add.w	r5, r5, #8
    a1b6:	d1ef      	bne.n	a198 <_dtoa_r+0xbc0>
    a1b8:	e56e      	b.n	9c98 <_dtoa_r+0x6c0>
    a1ba:	6871      	ldr	r1, [r6, #4]
    a1bc:	4648      	mov	r0, r9
    a1be:	f000 facf 	bl	a760 <_Balloc>
    a1c2:	6933      	ldr	r3, [r6, #16]
    a1c4:	1c9a      	adds	r2, r3, #2
    a1c6:	4605      	mov	r5, r0
    a1c8:	0092      	lsls	r2, r2, #2
    a1ca:	f106 010c 	add.w	r1, r6, #12
    a1ce:	300c      	adds	r0, #12
    a1d0:	f7fb fce0 	bl	5b94 <memcpy>
    a1d4:	4629      	mov	r1, r5
    a1d6:	2201      	movs	r2, #1
    a1d8:	4648      	mov	r0, r9
    a1da:	f000 fc71 	bl	aac0 <__lshift>
    a1de:	4680      	mov	r8, r0
    a1e0:	e670      	b.n	9ec4 <_dtoa_r+0x8ec>
    a1e2:	2b39      	cmp	r3, #57	; 0x39
    a1e4:	f000 80a4 	beq.w	a330 <_dtoa_r+0xd58>
    a1e8:	f103 0a01 	add.w	sl, r3, #1
    a1ec:	46b3      	mov	fp, r6
    a1ee:	f887 a000 	strb.w	sl, [r7]
    a1f2:	1c7d      	adds	r5, r7, #1
    a1f4:	4646      	mov	r6, r8
    a1f6:	940a      	str	r4, [sp, #40]	; 0x28
    a1f8:	e4a5      	b.n	9b46 <_dtoa_r+0x56e>
    a1fa:	46b3      	mov	fp, r6
    a1fc:	469a      	mov	sl, r3
    a1fe:	4646      	mov	r6, r8
    a200:	e485      	b.n	9b0e <_dtoa_r+0x536>
    a202:	2300      	movs	r3, #0
    a204:	9306      	str	r3, [sp, #24]
    a206:	461e      	mov	r6, r3
    a208:	e701      	b.n	a00e <_dtoa_r+0xa36>
    a20a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a20c:	495d      	ldr	r1, [pc, #372]	; (a384 <_dtoa_r+0xdac>)
    a20e:	1e5a      	subs	r2, r3, #1
    a210:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    a214:	462b      	mov	r3, r5
    a216:	9217      	str	r2, [sp, #92]	; 0x5c
    a218:	e9d1 0100 	ldrd	r0, r1, [r1]
    a21c:	4622      	mov	r2, r4
    a21e:	f7fc fa19 	bl	6654 <__aeabi_dmul>
    a222:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    a226:	4639      	mov	r1, r7
    a228:	4630      	mov	r0, r6
    a22a:	f7fc fcc3 	bl	6bb4 <__aeabi_d2iz>
    a22e:	4604      	mov	r4, r0
    a230:	f7fc f9aa 	bl	6588 <__aeabi_i2d>
    a234:	460b      	mov	r3, r1
    a236:	4602      	mov	r2, r0
    a238:	4639      	mov	r1, r7
    a23a:	4630      	mov	r0, r6
    a23c:	f7fc f856 	bl	62ec <__aeabi_dsub>
    a240:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a242:	460f      	mov	r7, r1
    a244:	9909      	ldr	r1, [sp, #36]	; 0x24
    a246:	3430      	adds	r4, #48	; 0x30
    a248:	2b01      	cmp	r3, #1
    a24a:	4606      	mov	r6, r0
    a24c:	700c      	strb	r4, [r1, #0]
    a24e:	f101 0501 	add.w	r5, r1, #1
    a252:	d020      	beq.n	a296 <_dtoa_r+0xcbe>
    a254:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a256:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a258:	4413      	add	r3, r2
    a25a:	469a      	mov	sl, r3
    a25c:	46ab      	mov	fp, r5
    a25e:	2200      	movs	r2, #0
    a260:	4b4a      	ldr	r3, [pc, #296]	; (a38c <_dtoa_r+0xdb4>)
    a262:	4630      	mov	r0, r6
    a264:	4639      	mov	r1, r7
    a266:	f7fc f9f5 	bl	6654 <__aeabi_dmul>
    a26a:	460f      	mov	r7, r1
    a26c:	4606      	mov	r6, r0
    a26e:	f7fc fca1 	bl	6bb4 <__aeabi_d2iz>
    a272:	4604      	mov	r4, r0
    a274:	f7fc f988 	bl	6588 <__aeabi_i2d>
    a278:	3430      	adds	r4, #48	; 0x30
    a27a:	4602      	mov	r2, r0
    a27c:	460b      	mov	r3, r1
    a27e:	4630      	mov	r0, r6
    a280:	4639      	mov	r1, r7
    a282:	f7fc f833 	bl	62ec <__aeabi_dsub>
    a286:	f80b 4b01 	strb.w	r4, [fp], #1
    a28a:	45da      	cmp	sl, fp
    a28c:	4606      	mov	r6, r0
    a28e:	460f      	mov	r7, r1
    a290:	d1e5      	bne.n	a25e <_dtoa_r+0xc86>
    a292:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a294:	441d      	add	r5, r3
    a296:	2200      	movs	r2, #0
    a298:	4b3d      	ldr	r3, [pc, #244]	; (a390 <_dtoa_r+0xdb8>)
    a29a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    a29e:	f7fc f827 	bl	62f0 <__adddf3>
    a2a2:	4632      	mov	r2, r6
    a2a4:	463b      	mov	r3, r7
    a2a6:	f7fc fc47 	bl	6b38 <__aeabi_dcmplt>
    a2aa:	2800      	cmp	r0, #0
    a2ac:	d048      	beq.n	a340 <_dtoa_r+0xd68>
    a2ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a2b0:	9304      	str	r3, [sp, #16]
    a2b2:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    a2b6:	f7ff bb4c 	b.w	9952 <_dtoa_r+0x37a>
    a2ba:	9b07      	ldr	r3, [sp, #28]
    a2bc:	9a08      	ldr	r2, [sp, #32]
    a2be:	1a9d      	subs	r5, r3, r2
    a2c0:	2300      	movs	r3, #0
    a2c2:	f7ff bb7c 	b.w	99be <_dtoa_r+0x3e6>
    a2c6:	2700      	movs	r7, #0
    a2c8:	e6ca      	b.n	a060 <_dtoa_r+0xa88>
    a2ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a2cc:	9f06      	ldr	r7, [sp, #24]
    a2ce:	9d07      	ldr	r5, [sp, #28]
    a2d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a2d4:	f7ff bb73 	b.w	99be <_dtoa_r+0x3e6>
    a2d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    a2dc:	f04f 0a02 	mov.w	sl, #2
    a2e0:	e4da      	b.n	9c98 <_dtoa_r+0x6c0>
    a2e2:	9b08      	ldr	r3, [sp, #32]
    a2e4:	2b00      	cmp	r3, #0
    a2e6:	f43f aec1 	beq.w	a06c <_dtoa_r+0xa94>
    a2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a2ec:	2b00      	cmp	r3, #0
    a2ee:	f77f af2e 	ble.w	a14e <_dtoa_r+0xb76>
    a2f2:	2200      	movs	r2, #0
    a2f4:	4b25      	ldr	r3, [pc, #148]	; (a38c <_dtoa_r+0xdb4>)
    a2f6:	4630      	mov	r0, r6
    a2f8:	4639      	mov	r1, r7
    a2fa:	f7fc f9ab 	bl	6654 <__aeabi_dmul>
    a2fe:	4606      	mov	r6, r0
    a300:	460f      	mov	r7, r1
    a302:	f10a 0001 	add.w	r0, sl, #1
    a306:	f7fc f93f 	bl	6588 <__aeabi_i2d>
    a30a:	4632      	mov	r2, r6
    a30c:	463b      	mov	r3, r7
    a30e:	f7fc f9a1 	bl	6654 <__aeabi_dmul>
    a312:	2200      	movs	r2, #0
    a314:	4b19      	ldr	r3, [pc, #100]	; (a37c <_dtoa_r+0xda4>)
    a316:	f7fb ffeb 	bl	62f0 <__adddf3>
    a31a:	9a04      	ldr	r2, [sp, #16]
    a31c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a31e:	9312      	str	r3, [sp, #72]	; 0x48
    a320:	3a01      	subs	r2, #1
    a322:	4604      	mov	r4, r0
    a324:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    a328:	9216      	str	r2, [sp, #88]	; 0x58
    a32a:	e4d6      	b.n	9cda <_dtoa_r+0x702>
    a32c:	940a      	str	r4, [sp, #40]	; 0x28
    a32e:	e584      	b.n	9e3a <_dtoa_r+0x862>
    a330:	2239      	movs	r2, #57	; 0x39
    a332:	46b3      	mov	fp, r6
    a334:	940a      	str	r4, [sp, #40]	; 0x28
    a336:	4646      	mov	r6, r8
    a338:	703a      	strb	r2, [r7, #0]
    a33a:	1c7d      	adds	r5, r7, #1
    a33c:	f7ff bbf5 	b.w	9b2a <_dtoa_r+0x552>
    a340:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    a344:	2000      	movs	r0, #0
    a346:	4912      	ldr	r1, [pc, #72]	; (a390 <_dtoa_r+0xdb8>)
    a348:	f7fb ffd0 	bl	62ec <__aeabi_dsub>
    a34c:	4632      	mov	r2, r6
    a34e:	463b      	mov	r3, r7
    a350:	f7fc fc10 	bl	6b74 <__aeabi_dcmpgt>
    a354:	b908      	cbnz	r0, a35a <_dtoa_r+0xd82>
    a356:	e6fa      	b.n	a14e <_dtoa_r+0xb76>
    a358:	4615      	mov	r5, r2
    a35a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    a35e:	2b30      	cmp	r3, #48	; 0x30
    a360:	f105 32ff 	add.w	r2, r5, #4294967295
    a364:	d0f8      	beq.n	a358 <_dtoa_r+0xd80>
    a366:	e539      	b.n	9ddc <_dtoa_r+0x804>
    a368:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a36a:	9304      	str	r3, [sp, #16]
    a36c:	f7ff baf1 	b.w	9952 <_dtoa_r+0x37a>
    a370:	f1ba 0f00 	cmp.w	sl, #0
    a374:	f47f ad7c 	bne.w	9e70 <_dtoa_r+0x898>
    a378:	e662      	b.n	a040 <_dtoa_r+0xa68>
    a37a:	bf00      	nop
    a37c:	401c0000 	.word	0x401c0000
    a380:	40140000 	.word	0x40140000
    a384:	0000b950 	.word	0x0000b950
    a388:	0000ba18 	.word	0x0000ba18
    a38c:	40240000 	.word	0x40240000
    a390:	3fe00000 	.word	0x3fe00000
    a394:	2b39      	cmp	r3, #57	; 0x39
    a396:	46d3      	mov	fp, sl
    a398:	469a      	mov	sl, r3
    a39a:	d0c9      	beq.n	a330 <_dtoa_r+0xd58>
    a39c:	f1bb 0f00 	cmp.w	fp, #0
    a3a0:	f73f aebd 	bgt.w	a11e <_dtoa_r+0xb46>
    a3a4:	e6bd      	b.n	a122 <_dtoa_r+0xb4a>
    a3a6:	f47f aebc 	bne.w	a122 <_dtoa_r+0xb4a>
    a3aa:	f01a 0f01 	tst.w	sl, #1
    a3ae:	f43f aeb8 	beq.w	a122 <_dtoa_r+0xb4a>
    a3b2:	e6b0      	b.n	a116 <_dtoa_r+0xb3e>
    a3b4:	9b00      	ldr	r3, [sp, #0]
    a3b6:	2b02      	cmp	r3, #2
    a3b8:	dc25      	bgt.n	a406 <_dtoa_r+0xe2e>
    a3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a3bc:	e60d      	b.n	9fda <_dtoa_r+0xa02>
    a3be:	f04f 0a02 	mov.w	sl, #2
    a3c2:	e469      	b.n	9c98 <_dtoa_r+0x6c0>
    a3c4:	9b00      	ldr	r3, [sp, #0]
    a3c6:	2b02      	cmp	r3, #2
    a3c8:	dc1d      	bgt.n	a406 <_dtoa_r+0xe2e>
    a3ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a3cc:	e56d      	b.n	9eaa <_dtoa_r+0x8d2>
    a3ce:	2400      	movs	r4, #0
    a3d0:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
    a3d4:	4621      	mov	r1, r4
    a3d6:	4648      	mov	r0, r9
    a3d8:	f000 f9c2 	bl	a760 <_Balloc>
    a3dc:	f04f 33ff 	mov.w	r3, #4294967295
    a3e0:	9308      	str	r3, [sp, #32]
    a3e2:	930e      	str	r3, [sp, #56]	; 0x38
    a3e4:	2301      	movs	r3, #1
    a3e6:	9009      	str	r0, [sp, #36]	; 0x24
    a3e8:	9405      	str	r4, [sp, #20]
    a3ea:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    a3ee:	930b      	str	r3, [sp, #44]	; 0x2c
    a3f0:	f7ff b9fc 	b.w	97ec <_dtoa_r+0x214>
    a3f4:	f43f ab48 	beq.w	9a88 <_dtoa_r+0x4b0>
    a3f8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    a3fc:	f7ff bb3f 	b.w	9a7e <_dtoa_r+0x4a6>
    a400:	2601      	movs	r6, #1
    a402:	f7ff b9bc 	b.w	977e <_dtoa_r+0x1a6>
    a406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a408:	9308      	str	r3, [sp, #32]
    a40a:	e5ee      	b.n	9fea <_dtoa_r+0xa12>

0000a40c <__libc_fini_array>:
    a40c:	b538      	push	{r3, r4, r5, lr}
    a40e:	4d07      	ldr	r5, [pc, #28]	; (a42c <__libc_fini_array+0x20>)
    a410:	4c07      	ldr	r4, [pc, #28]	; (a430 <__libc_fini_array+0x24>)
    a412:	1b2c      	subs	r4, r5, r4
    a414:	10a4      	asrs	r4, r4, #2
    a416:	d005      	beq.n	a424 <__libc_fini_array+0x18>
    a418:	3c01      	subs	r4, #1
    a41a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    a41e:	4798      	blx	r3
    a420:	2c00      	cmp	r4, #0
    a422:	d1f9      	bne.n	a418 <__libc_fini_array+0xc>
    a424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a428:	f001 bb22 	b.w	ba70 <__init_array_end>
	...

0000a434 <_malloc_trim_r>:
    a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a436:	4f23      	ldr	r7, [pc, #140]	; (a4c4 <_malloc_trim_r+0x90>)
    a438:	460c      	mov	r4, r1
    a43a:	4606      	mov	r6, r0
    a43c:	f7fd f806 	bl	744c <__malloc_lock>
    a440:	68bb      	ldr	r3, [r7, #8]
    a442:	685d      	ldr	r5, [r3, #4]
    a444:	f025 0503 	bic.w	r5, r5, #3
    a448:	1b29      	subs	r1, r5, r4
    a44a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    a44e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    a452:	f021 010f 	bic.w	r1, r1, #15
    a456:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    a45a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    a45e:	db07      	blt.n	a470 <_malloc_trim_r+0x3c>
    a460:	2100      	movs	r1, #0
    a462:	4630      	mov	r0, r6
    a464:	f7fd f9ee 	bl	7844 <_sbrk_r>
    a468:	68bb      	ldr	r3, [r7, #8]
    a46a:	442b      	add	r3, r5
    a46c:	4298      	cmp	r0, r3
    a46e:	d004      	beq.n	a47a <_malloc_trim_r+0x46>
    a470:	4630      	mov	r0, r6
    a472:	f7fc ffed 	bl	7450 <__malloc_unlock>
    a476:	2000      	movs	r0, #0
    a478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a47a:	4261      	negs	r1, r4
    a47c:	4630      	mov	r0, r6
    a47e:	f7fd f9e1 	bl	7844 <_sbrk_r>
    a482:	3001      	adds	r0, #1
    a484:	d00d      	beq.n	a4a2 <_malloc_trim_r+0x6e>
    a486:	4b10      	ldr	r3, [pc, #64]	; (a4c8 <_malloc_trim_r+0x94>)
    a488:	68ba      	ldr	r2, [r7, #8]
    a48a:	6819      	ldr	r1, [r3, #0]
    a48c:	1b2d      	subs	r5, r5, r4
    a48e:	f045 0501 	orr.w	r5, r5, #1
    a492:	4630      	mov	r0, r6
    a494:	1b09      	subs	r1, r1, r4
    a496:	6055      	str	r5, [r2, #4]
    a498:	6019      	str	r1, [r3, #0]
    a49a:	f7fc ffd9 	bl	7450 <__malloc_unlock>
    a49e:	2001      	movs	r0, #1
    a4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a4a2:	2100      	movs	r1, #0
    a4a4:	4630      	mov	r0, r6
    a4a6:	f7fd f9cd 	bl	7844 <_sbrk_r>
    a4aa:	68ba      	ldr	r2, [r7, #8]
    a4ac:	1a83      	subs	r3, r0, r2
    a4ae:	2b0f      	cmp	r3, #15
    a4b0:	ddde      	ble.n	a470 <_malloc_trim_r+0x3c>
    a4b2:	4c06      	ldr	r4, [pc, #24]	; (a4cc <_malloc_trim_r+0x98>)
    a4b4:	4904      	ldr	r1, [pc, #16]	; (a4c8 <_malloc_trim_r+0x94>)
    a4b6:	6824      	ldr	r4, [r4, #0]
    a4b8:	f043 0301 	orr.w	r3, r3, #1
    a4bc:	1b00      	subs	r0, r0, r4
    a4be:	6053      	str	r3, [r2, #4]
    a4c0:	6008      	str	r0, [r1, #0]
    a4c2:	e7d5      	b.n	a470 <_malloc_trim_r+0x3c>
    a4c4:	1fff0dd8 	.word	0x1fff0dd8
    a4c8:	1fff1a3c 	.word	0x1fff1a3c
    a4cc:	1fff11e4 	.word	0x1fff11e4

0000a4d0 <_free_r>:
    a4d0:	2900      	cmp	r1, #0
    a4d2:	d045      	beq.n	a560 <_free_r+0x90>
    a4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4d8:	460d      	mov	r5, r1
    a4da:	4680      	mov	r8, r0
    a4dc:	f7fc ffb6 	bl	744c <__malloc_lock>
    a4e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
    a4e4:	496a      	ldr	r1, [pc, #424]	; (a690 <_free_r+0x1c0>)
    a4e6:	f027 0301 	bic.w	r3, r7, #1
    a4ea:	f1a5 0408 	sub.w	r4, r5, #8
    a4ee:	18e2      	adds	r2, r4, r3
    a4f0:	688e      	ldr	r6, [r1, #8]
    a4f2:	6850      	ldr	r0, [r2, #4]
    a4f4:	42b2      	cmp	r2, r6
    a4f6:	f020 0003 	bic.w	r0, r0, #3
    a4fa:	d062      	beq.n	a5c2 <_free_r+0xf2>
    a4fc:	07fe      	lsls	r6, r7, #31
    a4fe:	6050      	str	r0, [r2, #4]
    a500:	d40b      	bmi.n	a51a <_free_r+0x4a>
    a502:	f855 7c08 	ldr.w	r7, [r5, #-8]
    a506:	1be4      	subs	r4, r4, r7
    a508:	f101 0e08 	add.w	lr, r1, #8
    a50c:	68a5      	ldr	r5, [r4, #8]
    a50e:	4575      	cmp	r5, lr
    a510:	443b      	add	r3, r7
    a512:	d06f      	beq.n	a5f4 <_free_r+0x124>
    a514:	68e7      	ldr	r7, [r4, #12]
    a516:	60ef      	str	r7, [r5, #12]
    a518:	60bd      	str	r5, [r7, #8]
    a51a:	1815      	adds	r5, r2, r0
    a51c:	686d      	ldr	r5, [r5, #4]
    a51e:	07ed      	lsls	r5, r5, #31
    a520:	d542      	bpl.n	a5a8 <_free_r+0xd8>
    a522:	f043 0201 	orr.w	r2, r3, #1
    a526:	6062      	str	r2, [r4, #4]
    a528:	50e3      	str	r3, [r4, r3]
    a52a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a52e:	d218      	bcs.n	a562 <_free_r+0x92>
    a530:	08db      	lsrs	r3, r3, #3
    a532:	1c5a      	adds	r2, r3, #1
    a534:	684d      	ldr	r5, [r1, #4]
    a536:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    a53a:	60a7      	str	r7, [r4, #8]
    a53c:	2001      	movs	r0, #1
    a53e:	109b      	asrs	r3, r3, #2
    a540:	fa00 f303 	lsl.w	r3, r0, r3
    a544:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    a548:	431d      	orrs	r5, r3
    a54a:	3808      	subs	r0, #8
    a54c:	60e0      	str	r0, [r4, #12]
    a54e:	604d      	str	r5, [r1, #4]
    a550:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    a554:	60fc      	str	r4, [r7, #12]
    a556:	4640      	mov	r0, r8
    a558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a55c:	f7fc bf78 	b.w	7450 <__malloc_unlock>
    a560:	4770      	bx	lr
    a562:	0a5a      	lsrs	r2, r3, #9
    a564:	2a04      	cmp	r2, #4
    a566:	d853      	bhi.n	a610 <_free_r+0x140>
    a568:	099a      	lsrs	r2, r3, #6
    a56a:	f102 0739 	add.w	r7, r2, #57	; 0x39
    a56e:	007f      	lsls	r7, r7, #1
    a570:	f102 0538 	add.w	r5, r2, #56	; 0x38
    a574:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    a578:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    a57c:	4944      	ldr	r1, [pc, #272]	; (a690 <_free_r+0x1c0>)
    a57e:	3808      	subs	r0, #8
    a580:	4290      	cmp	r0, r2
    a582:	d04d      	beq.n	a620 <_free_r+0x150>
    a584:	6851      	ldr	r1, [r2, #4]
    a586:	f021 0103 	bic.w	r1, r1, #3
    a58a:	428b      	cmp	r3, r1
    a58c:	d202      	bcs.n	a594 <_free_r+0xc4>
    a58e:	6892      	ldr	r2, [r2, #8]
    a590:	4290      	cmp	r0, r2
    a592:	d1f7      	bne.n	a584 <_free_r+0xb4>
    a594:	68d0      	ldr	r0, [r2, #12]
    a596:	60e0      	str	r0, [r4, #12]
    a598:	60a2      	str	r2, [r4, #8]
    a59a:	6084      	str	r4, [r0, #8]
    a59c:	60d4      	str	r4, [r2, #12]
    a59e:	4640      	mov	r0, r8
    a5a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a5a4:	f7fc bf54 	b.w	7450 <__malloc_unlock>
    a5a8:	6895      	ldr	r5, [r2, #8]
    a5aa:	4f3a      	ldr	r7, [pc, #232]	; (a694 <_free_r+0x1c4>)
    a5ac:	42bd      	cmp	r5, r7
    a5ae:	4403      	add	r3, r0
    a5b0:	d03f      	beq.n	a632 <_free_r+0x162>
    a5b2:	68d0      	ldr	r0, [r2, #12]
    a5b4:	60e8      	str	r0, [r5, #12]
    a5b6:	f043 0201 	orr.w	r2, r3, #1
    a5ba:	6085      	str	r5, [r0, #8]
    a5bc:	6062      	str	r2, [r4, #4]
    a5be:	50e3      	str	r3, [r4, r3]
    a5c0:	e7b3      	b.n	a52a <_free_r+0x5a>
    a5c2:	07ff      	lsls	r7, r7, #31
    a5c4:	4403      	add	r3, r0
    a5c6:	d407      	bmi.n	a5d8 <_free_r+0x108>
    a5c8:	f855 2c08 	ldr.w	r2, [r5, #-8]
    a5cc:	1aa4      	subs	r4, r4, r2
    a5ce:	4413      	add	r3, r2
    a5d0:	68a0      	ldr	r0, [r4, #8]
    a5d2:	68e2      	ldr	r2, [r4, #12]
    a5d4:	60c2      	str	r2, [r0, #12]
    a5d6:	6090      	str	r0, [r2, #8]
    a5d8:	4a2f      	ldr	r2, [pc, #188]	; (a698 <_free_r+0x1c8>)
    a5da:	6812      	ldr	r2, [r2, #0]
    a5dc:	f043 0001 	orr.w	r0, r3, #1
    a5e0:	4293      	cmp	r3, r2
    a5e2:	6060      	str	r0, [r4, #4]
    a5e4:	608c      	str	r4, [r1, #8]
    a5e6:	d3b6      	bcc.n	a556 <_free_r+0x86>
    a5e8:	4b2c      	ldr	r3, [pc, #176]	; (a69c <_free_r+0x1cc>)
    a5ea:	4640      	mov	r0, r8
    a5ec:	6819      	ldr	r1, [r3, #0]
    a5ee:	f7ff ff21 	bl	a434 <_malloc_trim_r>
    a5f2:	e7b0      	b.n	a556 <_free_r+0x86>
    a5f4:	1811      	adds	r1, r2, r0
    a5f6:	6849      	ldr	r1, [r1, #4]
    a5f8:	07c9      	lsls	r1, r1, #31
    a5fa:	d444      	bmi.n	a686 <_free_r+0x1b6>
    a5fc:	6891      	ldr	r1, [r2, #8]
    a5fe:	68d2      	ldr	r2, [r2, #12]
    a600:	60ca      	str	r2, [r1, #12]
    a602:	4403      	add	r3, r0
    a604:	f043 0001 	orr.w	r0, r3, #1
    a608:	6091      	str	r1, [r2, #8]
    a60a:	6060      	str	r0, [r4, #4]
    a60c:	50e3      	str	r3, [r4, r3]
    a60e:	e7a2      	b.n	a556 <_free_r+0x86>
    a610:	2a14      	cmp	r2, #20
    a612:	d817      	bhi.n	a644 <_free_r+0x174>
    a614:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    a618:	007f      	lsls	r7, r7, #1
    a61a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    a61e:	e7a9      	b.n	a574 <_free_r+0xa4>
    a620:	10aa      	asrs	r2, r5, #2
    a622:	684b      	ldr	r3, [r1, #4]
    a624:	2501      	movs	r5, #1
    a626:	fa05 f202 	lsl.w	r2, r5, r2
    a62a:	4313      	orrs	r3, r2
    a62c:	604b      	str	r3, [r1, #4]
    a62e:	4602      	mov	r2, r0
    a630:	e7b1      	b.n	a596 <_free_r+0xc6>
    a632:	f043 0201 	orr.w	r2, r3, #1
    a636:	614c      	str	r4, [r1, #20]
    a638:	610c      	str	r4, [r1, #16]
    a63a:	60e5      	str	r5, [r4, #12]
    a63c:	60a5      	str	r5, [r4, #8]
    a63e:	6062      	str	r2, [r4, #4]
    a640:	50e3      	str	r3, [r4, r3]
    a642:	e788      	b.n	a556 <_free_r+0x86>
    a644:	2a54      	cmp	r2, #84	; 0x54
    a646:	d806      	bhi.n	a656 <_free_r+0x186>
    a648:	0b1a      	lsrs	r2, r3, #12
    a64a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    a64e:	007f      	lsls	r7, r7, #1
    a650:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    a654:	e78e      	b.n	a574 <_free_r+0xa4>
    a656:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    a65a:	d806      	bhi.n	a66a <_free_r+0x19a>
    a65c:	0bda      	lsrs	r2, r3, #15
    a65e:	f102 0778 	add.w	r7, r2, #120	; 0x78
    a662:	007f      	lsls	r7, r7, #1
    a664:	f102 0577 	add.w	r5, r2, #119	; 0x77
    a668:	e784      	b.n	a574 <_free_r+0xa4>
    a66a:	f240 5054 	movw	r0, #1364	; 0x554
    a66e:	4282      	cmp	r2, r0
    a670:	d806      	bhi.n	a680 <_free_r+0x1b0>
    a672:	0c9a      	lsrs	r2, r3, #18
    a674:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    a678:	007f      	lsls	r7, r7, #1
    a67a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    a67e:	e779      	b.n	a574 <_free_r+0xa4>
    a680:	27fe      	movs	r7, #254	; 0xfe
    a682:	257e      	movs	r5, #126	; 0x7e
    a684:	e776      	b.n	a574 <_free_r+0xa4>
    a686:	f043 0201 	orr.w	r2, r3, #1
    a68a:	6062      	str	r2, [r4, #4]
    a68c:	50e3      	str	r3, [r4, r3]
    a68e:	e762      	b.n	a556 <_free_r+0x86>
    a690:	1fff0dd8 	.word	0x1fff0dd8
    a694:	1fff0de0 	.word	0x1fff0de0
    a698:	1fff11e0 	.word	0x1fff11e0
    a69c:	1fff1a38 	.word	0x1fff1a38

0000a6a0 <_localeconv_r>:
    a6a0:	4a04      	ldr	r2, [pc, #16]	; (a6b4 <_localeconv_r+0x14>)
    a6a2:	4b05      	ldr	r3, [pc, #20]	; (a6b8 <_localeconv_r+0x18>)
    a6a4:	6812      	ldr	r2, [r2, #0]
    a6a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
    a6a8:	2800      	cmp	r0, #0
    a6aa:	bf08      	it	eq
    a6ac:	4618      	moveq	r0, r3
    a6ae:	30f0      	adds	r0, #240	; 0xf0
    a6b0:	4770      	bx	lr
    a6b2:	bf00      	nop
    a6b4:	1fff0c68 	.word	0x1fff0c68
    a6b8:	1fff0c6c 	.word	0x1fff0c6c
    a6bc:	ffffffff 	.word	0xffffffff

0000a6c0 <memchr>:
    a6c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a6c4:	2a10      	cmp	r2, #16
    a6c6:	db2b      	blt.n	a720 <memchr+0x60>
    a6c8:	f010 0f07 	tst.w	r0, #7
    a6cc:	d008      	beq.n	a6e0 <memchr+0x20>
    a6ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    a6d2:	3a01      	subs	r2, #1
    a6d4:	428b      	cmp	r3, r1
    a6d6:	d02d      	beq.n	a734 <memchr+0x74>
    a6d8:	f010 0f07 	tst.w	r0, #7
    a6dc:	b342      	cbz	r2, a730 <memchr+0x70>
    a6de:	d1f6      	bne.n	a6ce <memchr+0xe>
    a6e0:	b4f0      	push	{r4, r5, r6, r7}
    a6e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a6e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    a6ea:	f022 0407 	bic.w	r4, r2, #7
    a6ee:	f07f 0700 	mvns.w	r7, #0
    a6f2:	2300      	movs	r3, #0
    a6f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    a6f8:	3c08      	subs	r4, #8
    a6fa:	ea85 0501 	eor.w	r5, r5, r1
    a6fe:	ea86 0601 	eor.w	r6, r6, r1
    a702:	fa85 f547 	uadd8	r5, r5, r7
    a706:	faa3 f587 	sel	r5, r3, r7
    a70a:	fa86 f647 	uadd8	r6, r6, r7
    a70e:	faa5 f687 	sel	r6, r5, r7
    a712:	b98e      	cbnz	r6, a738 <memchr+0x78>
    a714:	d1ee      	bne.n	a6f4 <memchr+0x34>
    a716:	bcf0      	pop	{r4, r5, r6, r7}
    a718:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a71c:	f002 0207 	and.w	r2, r2, #7
    a720:	b132      	cbz	r2, a730 <memchr+0x70>
    a722:	f810 3b01 	ldrb.w	r3, [r0], #1
    a726:	3a01      	subs	r2, #1
    a728:	ea83 0301 	eor.w	r3, r3, r1
    a72c:	b113      	cbz	r3, a734 <memchr+0x74>
    a72e:	d1f8      	bne.n	a722 <memchr+0x62>
    a730:	2000      	movs	r0, #0
    a732:	4770      	bx	lr
    a734:	3801      	subs	r0, #1
    a736:	4770      	bx	lr
    a738:	2d00      	cmp	r5, #0
    a73a:	bf06      	itte	eq
    a73c:	4635      	moveq	r5, r6
    a73e:	3803      	subeq	r0, #3
    a740:	3807      	subne	r0, #7
    a742:	f015 0f01 	tst.w	r5, #1
    a746:	d107      	bne.n	a758 <memchr+0x98>
    a748:	3001      	adds	r0, #1
    a74a:	f415 7f80 	tst.w	r5, #256	; 0x100
    a74e:	bf02      	ittt	eq
    a750:	3001      	addeq	r0, #1
    a752:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    a756:	3001      	addeq	r0, #1
    a758:	bcf0      	pop	{r4, r5, r6, r7}
    a75a:	3801      	subs	r0, #1
    a75c:	4770      	bx	lr
    a75e:	bf00      	nop

0000a760 <_Balloc>:
    a760:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    a762:	b570      	push	{r4, r5, r6, lr}
    a764:	4605      	mov	r5, r0
    a766:	460c      	mov	r4, r1
    a768:	b14b      	cbz	r3, a77e <_Balloc+0x1e>
    a76a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a76e:	b180      	cbz	r0, a792 <_Balloc+0x32>
    a770:	6802      	ldr	r2, [r0, #0]
    a772:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    a776:	2300      	movs	r3, #0
    a778:	6103      	str	r3, [r0, #16]
    a77a:	60c3      	str	r3, [r0, #12]
    a77c:	bd70      	pop	{r4, r5, r6, pc}
    a77e:	2221      	movs	r2, #33	; 0x21
    a780:	2104      	movs	r1, #4
    a782:	f000 fb7f 	bl	ae84 <_calloc_r>
    a786:	64e8      	str	r0, [r5, #76]	; 0x4c
    a788:	4603      	mov	r3, r0
    a78a:	2800      	cmp	r0, #0
    a78c:	d1ed      	bne.n	a76a <_Balloc+0xa>
    a78e:	2000      	movs	r0, #0
    a790:	bd70      	pop	{r4, r5, r6, pc}
    a792:	2101      	movs	r1, #1
    a794:	fa01 f604 	lsl.w	r6, r1, r4
    a798:	1d72      	adds	r2, r6, #5
    a79a:	4628      	mov	r0, r5
    a79c:	0092      	lsls	r2, r2, #2
    a79e:	f000 fb71 	bl	ae84 <_calloc_r>
    a7a2:	2800      	cmp	r0, #0
    a7a4:	d0f3      	beq.n	a78e <_Balloc+0x2e>
    a7a6:	6044      	str	r4, [r0, #4]
    a7a8:	6086      	str	r6, [r0, #8]
    a7aa:	e7e4      	b.n	a776 <_Balloc+0x16>

0000a7ac <_Bfree>:
    a7ac:	b131      	cbz	r1, a7bc <_Bfree+0x10>
    a7ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    a7b0:	684a      	ldr	r2, [r1, #4]
    a7b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    a7b6:	6008      	str	r0, [r1, #0]
    a7b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    a7bc:	4770      	bx	lr
    a7be:	bf00      	nop

0000a7c0 <__multadd>:
    a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7c2:	690c      	ldr	r4, [r1, #16]
    a7c4:	b083      	sub	sp, #12
    a7c6:	460d      	mov	r5, r1
    a7c8:	4606      	mov	r6, r0
    a7ca:	f101 0e14 	add.w	lr, r1, #20
    a7ce:	2700      	movs	r7, #0
    a7d0:	f8de 0000 	ldr.w	r0, [lr]
    a7d4:	b281      	uxth	r1, r0
    a7d6:	fb02 3101 	mla	r1, r2, r1, r3
    a7da:	0c0b      	lsrs	r3, r1, #16
    a7dc:	0c00      	lsrs	r0, r0, #16
    a7de:	fb02 3300 	mla	r3, r2, r0, r3
    a7e2:	b289      	uxth	r1, r1
    a7e4:	3701      	adds	r7, #1
    a7e6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    a7ea:	42bc      	cmp	r4, r7
    a7ec:	f84e 1b04 	str.w	r1, [lr], #4
    a7f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    a7f4:	dcec      	bgt.n	a7d0 <__multadd+0x10>
    a7f6:	b13b      	cbz	r3, a808 <__multadd+0x48>
    a7f8:	68aa      	ldr	r2, [r5, #8]
    a7fa:	4294      	cmp	r4, r2
    a7fc:	da07      	bge.n	a80e <__multadd+0x4e>
    a7fe:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    a802:	3401      	adds	r4, #1
    a804:	6153      	str	r3, [r2, #20]
    a806:	612c      	str	r4, [r5, #16]
    a808:	4628      	mov	r0, r5
    a80a:	b003      	add	sp, #12
    a80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a80e:	6869      	ldr	r1, [r5, #4]
    a810:	9301      	str	r3, [sp, #4]
    a812:	3101      	adds	r1, #1
    a814:	4630      	mov	r0, r6
    a816:	f7ff ffa3 	bl	a760 <_Balloc>
    a81a:	692a      	ldr	r2, [r5, #16]
    a81c:	3202      	adds	r2, #2
    a81e:	f105 010c 	add.w	r1, r5, #12
    a822:	4607      	mov	r7, r0
    a824:	0092      	lsls	r2, r2, #2
    a826:	300c      	adds	r0, #12
    a828:	f7fb f9b4 	bl	5b94 <memcpy>
    a82c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    a82e:	6869      	ldr	r1, [r5, #4]
    a830:	9b01      	ldr	r3, [sp, #4]
    a832:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    a836:	6028      	str	r0, [r5, #0]
    a838:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    a83c:	463d      	mov	r5, r7
    a83e:	e7de      	b.n	a7fe <__multadd+0x3e>

0000a840 <__hi0bits>:
    a840:	0c03      	lsrs	r3, r0, #16
    a842:	041b      	lsls	r3, r3, #16
    a844:	b9b3      	cbnz	r3, a874 <__hi0bits+0x34>
    a846:	0400      	lsls	r0, r0, #16
    a848:	2310      	movs	r3, #16
    a84a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    a84e:	bf04      	itt	eq
    a850:	0200      	lsleq	r0, r0, #8
    a852:	3308      	addeq	r3, #8
    a854:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    a858:	bf04      	itt	eq
    a85a:	0100      	lsleq	r0, r0, #4
    a85c:	3304      	addeq	r3, #4
    a85e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    a862:	bf04      	itt	eq
    a864:	0080      	lsleq	r0, r0, #2
    a866:	3302      	addeq	r3, #2
    a868:	2800      	cmp	r0, #0
    a86a:	db07      	blt.n	a87c <__hi0bits+0x3c>
    a86c:	0042      	lsls	r2, r0, #1
    a86e:	d403      	bmi.n	a878 <__hi0bits+0x38>
    a870:	2020      	movs	r0, #32
    a872:	4770      	bx	lr
    a874:	2300      	movs	r3, #0
    a876:	e7e8      	b.n	a84a <__hi0bits+0xa>
    a878:	1c58      	adds	r0, r3, #1
    a87a:	4770      	bx	lr
    a87c:	4618      	mov	r0, r3
    a87e:	4770      	bx	lr

0000a880 <__lo0bits>:
    a880:	6803      	ldr	r3, [r0, #0]
    a882:	f013 0207 	ands.w	r2, r3, #7
    a886:	d007      	beq.n	a898 <__lo0bits+0x18>
    a888:	07d9      	lsls	r1, r3, #31
    a88a:	d420      	bmi.n	a8ce <__lo0bits+0x4e>
    a88c:	079a      	lsls	r2, r3, #30
    a88e:	d420      	bmi.n	a8d2 <__lo0bits+0x52>
    a890:	089b      	lsrs	r3, r3, #2
    a892:	6003      	str	r3, [r0, #0]
    a894:	2002      	movs	r0, #2
    a896:	4770      	bx	lr
    a898:	b299      	uxth	r1, r3
    a89a:	b909      	cbnz	r1, a8a0 <__lo0bits+0x20>
    a89c:	0c1b      	lsrs	r3, r3, #16
    a89e:	2210      	movs	r2, #16
    a8a0:	f013 0fff 	tst.w	r3, #255	; 0xff
    a8a4:	bf04      	itt	eq
    a8a6:	0a1b      	lsreq	r3, r3, #8
    a8a8:	3208      	addeq	r2, #8
    a8aa:	0719      	lsls	r1, r3, #28
    a8ac:	bf04      	itt	eq
    a8ae:	091b      	lsreq	r3, r3, #4
    a8b0:	3204      	addeq	r2, #4
    a8b2:	0799      	lsls	r1, r3, #30
    a8b4:	bf04      	itt	eq
    a8b6:	089b      	lsreq	r3, r3, #2
    a8b8:	3202      	addeq	r2, #2
    a8ba:	07d9      	lsls	r1, r3, #31
    a8bc:	d404      	bmi.n	a8c8 <__lo0bits+0x48>
    a8be:	085b      	lsrs	r3, r3, #1
    a8c0:	d101      	bne.n	a8c6 <__lo0bits+0x46>
    a8c2:	2020      	movs	r0, #32
    a8c4:	4770      	bx	lr
    a8c6:	3201      	adds	r2, #1
    a8c8:	6003      	str	r3, [r0, #0]
    a8ca:	4610      	mov	r0, r2
    a8cc:	4770      	bx	lr
    a8ce:	2000      	movs	r0, #0
    a8d0:	4770      	bx	lr
    a8d2:	085b      	lsrs	r3, r3, #1
    a8d4:	6003      	str	r3, [r0, #0]
    a8d6:	2001      	movs	r0, #1
    a8d8:	4770      	bx	lr
    a8da:	bf00      	nop

0000a8dc <__i2b>:
    a8dc:	b510      	push	{r4, lr}
    a8de:	460c      	mov	r4, r1
    a8e0:	2101      	movs	r1, #1
    a8e2:	f7ff ff3d 	bl	a760 <_Balloc>
    a8e6:	2201      	movs	r2, #1
    a8e8:	6144      	str	r4, [r0, #20]
    a8ea:	6102      	str	r2, [r0, #16]
    a8ec:	bd10      	pop	{r4, pc}
    a8ee:	bf00      	nop

0000a8f0 <__multiply>:
    a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8f4:	690d      	ldr	r5, [r1, #16]
    a8f6:	6917      	ldr	r7, [r2, #16]
    a8f8:	42bd      	cmp	r5, r7
    a8fa:	b083      	sub	sp, #12
    a8fc:	460c      	mov	r4, r1
    a8fe:	4616      	mov	r6, r2
    a900:	da04      	bge.n	a90c <__multiply+0x1c>
    a902:	462a      	mov	r2, r5
    a904:	4634      	mov	r4, r6
    a906:	463d      	mov	r5, r7
    a908:	460e      	mov	r6, r1
    a90a:	4617      	mov	r7, r2
    a90c:	68a3      	ldr	r3, [r4, #8]
    a90e:	6861      	ldr	r1, [r4, #4]
    a910:	eb05 0807 	add.w	r8, r5, r7
    a914:	4598      	cmp	r8, r3
    a916:	bfc8      	it	gt
    a918:	3101      	addgt	r1, #1
    a91a:	f7ff ff21 	bl	a760 <_Balloc>
    a91e:	f100 0c14 	add.w	ip, r0, #20
    a922:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    a926:	45cc      	cmp	ip, r9
    a928:	9000      	str	r0, [sp, #0]
    a92a:	d205      	bcs.n	a938 <__multiply+0x48>
    a92c:	4663      	mov	r3, ip
    a92e:	2100      	movs	r1, #0
    a930:	f843 1b04 	str.w	r1, [r3], #4
    a934:	4599      	cmp	r9, r3
    a936:	d8fb      	bhi.n	a930 <__multiply+0x40>
    a938:	f106 0214 	add.w	r2, r6, #20
    a93c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    a940:	f104 0314 	add.w	r3, r4, #20
    a944:	4552      	cmp	r2, sl
    a946:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    a94a:	d254      	bcs.n	a9f6 <__multiply+0x106>
    a94c:	f8cd 9004 	str.w	r9, [sp, #4]
    a950:	4699      	mov	r9, r3
    a952:	f852 3b04 	ldr.w	r3, [r2], #4
    a956:	fa1f fb83 	uxth.w	fp, r3
    a95a:	f1bb 0f00 	cmp.w	fp, #0
    a95e:	d020      	beq.n	a9a2 <__multiply+0xb2>
    a960:	2000      	movs	r0, #0
    a962:	464f      	mov	r7, r9
    a964:	4666      	mov	r6, ip
    a966:	4605      	mov	r5, r0
    a968:	e000      	b.n	a96c <__multiply+0x7c>
    a96a:	461e      	mov	r6, r3
    a96c:	f857 4b04 	ldr.w	r4, [r7], #4
    a970:	6830      	ldr	r0, [r6, #0]
    a972:	b2a1      	uxth	r1, r4
    a974:	b283      	uxth	r3, r0
    a976:	fb0b 3101 	mla	r1, fp, r1, r3
    a97a:	0c24      	lsrs	r4, r4, #16
    a97c:	0c00      	lsrs	r0, r0, #16
    a97e:	194b      	adds	r3, r1, r5
    a980:	fb0b 0004 	mla	r0, fp, r4, r0
    a984:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    a988:	b299      	uxth	r1, r3
    a98a:	4633      	mov	r3, r6
    a98c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    a990:	45be      	cmp	lr, r7
    a992:	ea4f 4510 	mov.w	r5, r0, lsr #16
    a996:	f843 1b04 	str.w	r1, [r3], #4
    a99a:	d8e6      	bhi.n	a96a <__multiply+0x7a>
    a99c:	6075      	str	r5, [r6, #4]
    a99e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    a9a2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    a9a6:	d020      	beq.n	a9ea <__multiply+0xfa>
    a9a8:	f8dc 3000 	ldr.w	r3, [ip]
    a9ac:	4667      	mov	r7, ip
    a9ae:	4618      	mov	r0, r3
    a9b0:	464d      	mov	r5, r9
    a9b2:	2100      	movs	r1, #0
    a9b4:	e000      	b.n	a9b8 <__multiply+0xc8>
    a9b6:	4637      	mov	r7, r6
    a9b8:	882c      	ldrh	r4, [r5, #0]
    a9ba:	0c00      	lsrs	r0, r0, #16
    a9bc:	fb0b 0004 	mla	r0, fp, r4, r0
    a9c0:	4401      	add	r1, r0
    a9c2:	b29c      	uxth	r4, r3
    a9c4:	463e      	mov	r6, r7
    a9c6:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    a9ca:	f846 3b04 	str.w	r3, [r6], #4
    a9ce:	6878      	ldr	r0, [r7, #4]
    a9d0:	f855 4b04 	ldr.w	r4, [r5], #4
    a9d4:	b283      	uxth	r3, r0
    a9d6:	0c24      	lsrs	r4, r4, #16
    a9d8:	fb0b 3404 	mla	r4, fp, r4, r3
    a9dc:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    a9e0:	45ae      	cmp	lr, r5
    a9e2:	ea4f 4113 	mov.w	r1, r3, lsr #16
    a9e6:	d8e6      	bhi.n	a9b6 <__multiply+0xc6>
    a9e8:	607b      	str	r3, [r7, #4]
    a9ea:	4592      	cmp	sl, r2
    a9ec:	f10c 0c04 	add.w	ip, ip, #4
    a9f0:	d8af      	bhi.n	a952 <__multiply+0x62>
    a9f2:	f8dd 9004 	ldr.w	r9, [sp, #4]
    a9f6:	f1b8 0f00 	cmp.w	r8, #0
    a9fa:	dd0b      	ble.n	aa14 <__multiply+0x124>
    a9fc:	f859 3c04 	ldr.w	r3, [r9, #-4]
    aa00:	f1a9 0904 	sub.w	r9, r9, #4
    aa04:	b11b      	cbz	r3, aa0e <__multiply+0x11e>
    aa06:	e005      	b.n	aa14 <__multiply+0x124>
    aa08:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    aa0c:	b913      	cbnz	r3, aa14 <__multiply+0x124>
    aa0e:	f1b8 0801 	subs.w	r8, r8, #1
    aa12:	d1f9      	bne.n	aa08 <__multiply+0x118>
    aa14:	9800      	ldr	r0, [sp, #0]
    aa16:	f8c0 8010 	str.w	r8, [r0, #16]
    aa1a:	b003      	add	sp, #12
    aa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000aa20 <__pow5mult>:
    aa20:	f012 0303 	ands.w	r3, r2, #3
    aa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa28:	4614      	mov	r4, r2
    aa2a:	4607      	mov	r7, r0
    aa2c:	d12e      	bne.n	aa8c <__pow5mult+0x6c>
    aa2e:	460e      	mov	r6, r1
    aa30:	10a4      	asrs	r4, r4, #2
    aa32:	d01c      	beq.n	aa6e <__pow5mult+0x4e>
    aa34:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    aa36:	b395      	cbz	r5, aa9e <__pow5mult+0x7e>
    aa38:	07e3      	lsls	r3, r4, #31
    aa3a:	f04f 0800 	mov.w	r8, #0
    aa3e:	d406      	bmi.n	aa4e <__pow5mult+0x2e>
    aa40:	1064      	asrs	r4, r4, #1
    aa42:	d014      	beq.n	aa6e <__pow5mult+0x4e>
    aa44:	6828      	ldr	r0, [r5, #0]
    aa46:	b1a8      	cbz	r0, aa74 <__pow5mult+0x54>
    aa48:	4605      	mov	r5, r0
    aa4a:	07e3      	lsls	r3, r4, #31
    aa4c:	d5f8      	bpl.n	aa40 <__pow5mult+0x20>
    aa4e:	462a      	mov	r2, r5
    aa50:	4631      	mov	r1, r6
    aa52:	4638      	mov	r0, r7
    aa54:	f7ff ff4c 	bl	a8f0 <__multiply>
    aa58:	b1b6      	cbz	r6, aa88 <__pow5mult+0x68>
    aa5a:	6872      	ldr	r2, [r6, #4]
    aa5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    aa5e:	1064      	asrs	r4, r4, #1
    aa60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    aa64:	6031      	str	r1, [r6, #0]
    aa66:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    aa6a:	4606      	mov	r6, r0
    aa6c:	d1ea      	bne.n	aa44 <__pow5mult+0x24>
    aa6e:	4630      	mov	r0, r6
    aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa74:	462a      	mov	r2, r5
    aa76:	4629      	mov	r1, r5
    aa78:	4638      	mov	r0, r7
    aa7a:	f7ff ff39 	bl	a8f0 <__multiply>
    aa7e:	6028      	str	r0, [r5, #0]
    aa80:	f8c0 8000 	str.w	r8, [r0]
    aa84:	4605      	mov	r5, r0
    aa86:	e7e0      	b.n	aa4a <__pow5mult+0x2a>
    aa88:	4606      	mov	r6, r0
    aa8a:	e7d9      	b.n	aa40 <__pow5mult+0x20>
    aa8c:	1e5a      	subs	r2, r3, #1
    aa8e:	4d0b      	ldr	r5, [pc, #44]	; (aabc <__pow5mult+0x9c>)
    aa90:	2300      	movs	r3, #0
    aa92:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    aa96:	f7ff fe93 	bl	a7c0 <__multadd>
    aa9a:	4606      	mov	r6, r0
    aa9c:	e7c8      	b.n	aa30 <__pow5mult+0x10>
    aa9e:	2101      	movs	r1, #1
    aaa0:	4638      	mov	r0, r7
    aaa2:	f7ff fe5d 	bl	a760 <_Balloc>
    aaa6:	f240 2171 	movw	r1, #625	; 0x271
    aaaa:	2201      	movs	r2, #1
    aaac:	2300      	movs	r3, #0
    aaae:	6141      	str	r1, [r0, #20]
    aab0:	6102      	str	r2, [r0, #16]
    aab2:	4605      	mov	r5, r0
    aab4:	64b8      	str	r0, [r7, #72]	; 0x48
    aab6:	6003      	str	r3, [r0, #0]
    aab8:	e7be      	b.n	aa38 <__pow5mult+0x18>
    aaba:	bf00      	nop
    aabc:	0000ba40 	.word	0x0000ba40

0000aac0 <__lshift>:
    aac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aac4:	4691      	mov	r9, r2
    aac6:	690a      	ldr	r2, [r1, #16]
    aac8:	688b      	ldr	r3, [r1, #8]
    aaca:	ea4f 1469 	mov.w	r4, r9, asr #5
    aace:	eb04 0802 	add.w	r8, r4, r2
    aad2:	f108 0501 	add.w	r5, r8, #1
    aad6:	429d      	cmp	r5, r3
    aad8:	460e      	mov	r6, r1
    aada:	4682      	mov	sl, r0
    aadc:	6849      	ldr	r1, [r1, #4]
    aade:	dd04      	ble.n	aaea <__lshift+0x2a>
    aae0:	005b      	lsls	r3, r3, #1
    aae2:	429d      	cmp	r5, r3
    aae4:	f101 0101 	add.w	r1, r1, #1
    aae8:	dcfa      	bgt.n	aae0 <__lshift+0x20>
    aaea:	4650      	mov	r0, sl
    aaec:	f7ff fe38 	bl	a760 <_Balloc>
    aaf0:	2c00      	cmp	r4, #0
    aaf2:	f100 0214 	add.w	r2, r0, #20
    aaf6:	dd38      	ble.n	ab6a <__lshift+0xaa>
    aaf8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    aafc:	2100      	movs	r1, #0
    aafe:	f842 1b04 	str.w	r1, [r2], #4
    ab02:	4293      	cmp	r3, r2
    ab04:	d1fb      	bne.n	aafe <__lshift+0x3e>
    ab06:	6934      	ldr	r4, [r6, #16]
    ab08:	f106 0114 	add.w	r1, r6, #20
    ab0c:	f019 091f 	ands.w	r9, r9, #31
    ab10:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    ab14:	d021      	beq.n	ab5a <__lshift+0x9a>
    ab16:	f1c9 0220 	rsb	r2, r9, #32
    ab1a:	2400      	movs	r4, #0
    ab1c:	680f      	ldr	r7, [r1, #0]
    ab1e:	fa07 fc09 	lsl.w	ip, r7, r9
    ab22:	ea4c 0404 	orr.w	r4, ip, r4
    ab26:	469c      	mov	ip, r3
    ab28:	f843 4b04 	str.w	r4, [r3], #4
    ab2c:	f851 4b04 	ldr.w	r4, [r1], #4
    ab30:	458e      	cmp	lr, r1
    ab32:	fa24 f402 	lsr.w	r4, r4, r2
    ab36:	d8f1      	bhi.n	ab1c <__lshift+0x5c>
    ab38:	f8cc 4004 	str.w	r4, [ip, #4]
    ab3c:	b10c      	cbz	r4, ab42 <__lshift+0x82>
    ab3e:	f108 0502 	add.w	r5, r8, #2
    ab42:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    ab46:	6872      	ldr	r2, [r6, #4]
    ab48:	3d01      	subs	r5, #1
    ab4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ab4e:	6105      	str	r5, [r0, #16]
    ab50:	6031      	str	r1, [r6, #0]
    ab52:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    ab56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab5a:	3b04      	subs	r3, #4
    ab5c:	f851 2b04 	ldr.w	r2, [r1], #4
    ab60:	f843 2f04 	str.w	r2, [r3, #4]!
    ab64:	458e      	cmp	lr, r1
    ab66:	d8f9      	bhi.n	ab5c <__lshift+0x9c>
    ab68:	e7eb      	b.n	ab42 <__lshift+0x82>
    ab6a:	4613      	mov	r3, r2
    ab6c:	e7cb      	b.n	ab06 <__lshift+0x46>
    ab6e:	bf00      	nop

0000ab70 <__mcmp>:
    ab70:	6902      	ldr	r2, [r0, #16]
    ab72:	690b      	ldr	r3, [r1, #16]
    ab74:	1ad2      	subs	r2, r2, r3
    ab76:	d113      	bne.n	aba0 <__mcmp+0x30>
    ab78:	009b      	lsls	r3, r3, #2
    ab7a:	3014      	adds	r0, #20
    ab7c:	3114      	adds	r1, #20
    ab7e:	4419      	add	r1, r3
    ab80:	b410      	push	{r4}
    ab82:	4403      	add	r3, r0
    ab84:	e001      	b.n	ab8a <__mcmp+0x1a>
    ab86:	4298      	cmp	r0, r3
    ab88:	d20c      	bcs.n	aba4 <__mcmp+0x34>
    ab8a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    ab8e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    ab92:	4294      	cmp	r4, r2
    ab94:	d0f7      	beq.n	ab86 <__mcmp+0x16>
    ab96:	d309      	bcc.n	abac <__mcmp+0x3c>
    ab98:	2001      	movs	r0, #1
    ab9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ab9e:	4770      	bx	lr
    aba0:	4610      	mov	r0, r2
    aba2:	4770      	bx	lr
    aba4:	2000      	movs	r0, #0
    aba6:	f85d 4b04 	ldr.w	r4, [sp], #4
    abaa:	4770      	bx	lr
    abac:	f04f 30ff 	mov.w	r0, #4294967295
    abb0:	e7f3      	b.n	ab9a <__mcmp+0x2a>
    abb2:	bf00      	nop

0000abb4 <__mdiff>:
    abb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    abb8:	690b      	ldr	r3, [r1, #16]
    abba:	460f      	mov	r7, r1
    abbc:	6911      	ldr	r1, [r2, #16]
    abbe:	1a5b      	subs	r3, r3, r1
    abc0:	2b00      	cmp	r3, #0
    abc2:	4690      	mov	r8, r2
    abc4:	d117      	bne.n	abf6 <__mdiff+0x42>
    abc6:	0089      	lsls	r1, r1, #2
    abc8:	f107 0214 	add.w	r2, r7, #20
    abcc:	f108 0514 	add.w	r5, r8, #20
    abd0:	1853      	adds	r3, r2, r1
    abd2:	4429      	add	r1, r5
    abd4:	e001      	b.n	abda <__mdiff+0x26>
    abd6:	429a      	cmp	r2, r3
    abd8:	d25e      	bcs.n	ac98 <__mdiff+0xe4>
    abda:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    abde:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    abe2:	42a6      	cmp	r6, r4
    abe4:	d0f7      	beq.n	abd6 <__mdiff+0x22>
    abe6:	d260      	bcs.n	acaa <__mdiff+0xf6>
    abe8:	463b      	mov	r3, r7
    abea:	4614      	mov	r4, r2
    abec:	4647      	mov	r7, r8
    abee:	f04f 0901 	mov.w	r9, #1
    abf2:	4698      	mov	r8, r3
    abf4:	e006      	b.n	ac04 <__mdiff+0x50>
    abf6:	db5d      	blt.n	acb4 <__mdiff+0x100>
    abf8:	f107 0514 	add.w	r5, r7, #20
    abfc:	f102 0414 	add.w	r4, r2, #20
    ac00:	f04f 0900 	mov.w	r9, #0
    ac04:	6879      	ldr	r1, [r7, #4]
    ac06:	f7ff fdab 	bl	a760 <_Balloc>
    ac0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    ac0e:	693e      	ldr	r6, [r7, #16]
    ac10:	f8c0 900c 	str.w	r9, [r0, #12]
    ac14:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    ac18:	46a6      	mov	lr, r4
    ac1a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    ac1e:	f100 0414 	add.w	r4, r0, #20
    ac22:	2300      	movs	r3, #0
    ac24:	f85e 1b04 	ldr.w	r1, [lr], #4
    ac28:	f855 8b04 	ldr.w	r8, [r5], #4
    ac2c:	b28a      	uxth	r2, r1
    ac2e:	fa13 f388 	uxtah	r3, r3, r8
    ac32:	0c09      	lsrs	r1, r1, #16
    ac34:	1a9a      	subs	r2, r3, r2
    ac36:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    ac3a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    ac3e:	b292      	uxth	r2, r2
    ac40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    ac44:	45f4      	cmp	ip, lr
    ac46:	f844 2b04 	str.w	r2, [r4], #4
    ac4a:	ea4f 4323 	mov.w	r3, r3, asr #16
    ac4e:	d8e9      	bhi.n	ac24 <__mdiff+0x70>
    ac50:	42af      	cmp	r7, r5
    ac52:	d917      	bls.n	ac84 <__mdiff+0xd0>
    ac54:	46a4      	mov	ip, r4
    ac56:	4629      	mov	r1, r5
    ac58:	f851 eb04 	ldr.w	lr, [r1], #4
    ac5c:	fa13 f28e 	uxtah	r2, r3, lr
    ac60:	1413      	asrs	r3, r2, #16
    ac62:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    ac66:	b292      	uxth	r2, r2
    ac68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    ac6c:	428f      	cmp	r7, r1
    ac6e:	f84c 2b04 	str.w	r2, [ip], #4
    ac72:	ea4f 4323 	mov.w	r3, r3, asr #16
    ac76:	d8ef      	bhi.n	ac58 <__mdiff+0xa4>
    ac78:	43ed      	mvns	r5, r5
    ac7a:	443d      	add	r5, r7
    ac7c:	f025 0503 	bic.w	r5, r5, #3
    ac80:	3504      	adds	r5, #4
    ac82:	442c      	add	r4, r5
    ac84:	3c04      	subs	r4, #4
    ac86:	b922      	cbnz	r2, ac92 <__mdiff+0xde>
    ac88:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    ac8c:	3e01      	subs	r6, #1
    ac8e:	2b00      	cmp	r3, #0
    ac90:	d0fa      	beq.n	ac88 <__mdiff+0xd4>
    ac92:	6106      	str	r6, [r0, #16]
    ac94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ac98:	2100      	movs	r1, #0
    ac9a:	f7ff fd61 	bl	a760 <_Balloc>
    ac9e:	2201      	movs	r2, #1
    aca0:	2300      	movs	r3, #0
    aca2:	6102      	str	r2, [r0, #16]
    aca4:	6143      	str	r3, [r0, #20]
    aca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    acaa:	462c      	mov	r4, r5
    acac:	f04f 0900 	mov.w	r9, #0
    acb0:	4615      	mov	r5, r2
    acb2:	e7a7      	b.n	ac04 <__mdiff+0x50>
    acb4:	463b      	mov	r3, r7
    acb6:	f107 0414 	add.w	r4, r7, #20
    acba:	f108 0514 	add.w	r5, r8, #20
    acbe:	4647      	mov	r7, r8
    acc0:	f04f 0901 	mov.w	r9, #1
    acc4:	4698      	mov	r8, r3
    acc6:	e79d      	b.n	ac04 <__mdiff+0x50>

0000acc8 <__d2b>:
    acc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    accc:	ec57 6b10 	vmov	r6, r7, d0
    acd0:	b083      	sub	sp, #12
    acd2:	4688      	mov	r8, r1
    acd4:	2101      	movs	r1, #1
    acd6:	463c      	mov	r4, r7
    acd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
    acdc:	4617      	mov	r7, r2
    acde:	f7ff fd3f 	bl	a760 <_Balloc>
    ace2:	f3c4 0413 	ubfx	r4, r4, #0, #20
    ace6:	4681      	mov	r9, r0
    ace8:	b10d      	cbz	r5, acee <__d2b+0x26>
    acea:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    acee:	9401      	str	r4, [sp, #4]
    acf0:	b31e      	cbz	r6, ad3a <__d2b+0x72>
    acf2:	a802      	add	r0, sp, #8
    acf4:	f840 6d08 	str.w	r6, [r0, #-8]!
    acf8:	f7ff fdc2 	bl	a880 <__lo0bits>
    acfc:	2800      	cmp	r0, #0
    acfe:	d134      	bne.n	ad6a <__d2b+0xa2>
    ad00:	e89d 000c 	ldmia.w	sp, {r2, r3}
    ad04:	f8c9 2014 	str.w	r2, [r9, #20]
    ad08:	2b00      	cmp	r3, #0
    ad0a:	bf0c      	ite	eq
    ad0c:	2101      	moveq	r1, #1
    ad0e:	2102      	movne	r1, #2
    ad10:	f8c9 3018 	str.w	r3, [r9, #24]
    ad14:	f8c9 1010 	str.w	r1, [r9, #16]
    ad18:	b9dd      	cbnz	r5, ad52 <__d2b+0x8a>
    ad1a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    ad1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    ad22:	f8c8 0000 	str.w	r0, [r8]
    ad26:	6918      	ldr	r0, [r3, #16]
    ad28:	f7ff fd8a 	bl	a840 <__hi0bits>
    ad2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    ad30:	6038      	str	r0, [r7, #0]
    ad32:	4648      	mov	r0, r9
    ad34:	b003      	add	sp, #12
    ad36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ad3a:	a801      	add	r0, sp, #4
    ad3c:	f7ff fda0 	bl	a880 <__lo0bits>
    ad40:	9b01      	ldr	r3, [sp, #4]
    ad42:	f8c9 3014 	str.w	r3, [r9, #20]
    ad46:	2101      	movs	r1, #1
    ad48:	3020      	adds	r0, #32
    ad4a:	f8c9 1010 	str.w	r1, [r9, #16]
    ad4e:	2d00      	cmp	r5, #0
    ad50:	d0e3      	beq.n	ad1a <__d2b+0x52>
    ad52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    ad56:	4405      	add	r5, r0
    ad58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    ad5c:	f8c8 5000 	str.w	r5, [r8]
    ad60:	6038      	str	r0, [r7, #0]
    ad62:	4648      	mov	r0, r9
    ad64:	b003      	add	sp, #12
    ad66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ad6a:	e89d 000c 	ldmia.w	sp, {r2, r3}
    ad6e:	f1c0 0120 	rsb	r1, r0, #32
    ad72:	fa03 f101 	lsl.w	r1, r3, r1
    ad76:	430a      	orrs	r2, r1
    ad78:	40c3      	lsrs	r3, r0
    ad7a:	9301      	str	r3, [sp, #4]
    ad7c:	f8c9 2014 	str.w	r2, [r9, #20]
    ad80:	e7c2      	b.n	ad08 <__d2b+0x40>
    ad82:	bf00      	nop

0000ad84 <__ssprint_r>:
    ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad88:	6893      	ldr	r3, [r2, #8]
    ad8a:	b083      	sub	sp, #12
    ad8c:	4690      	mov	r8, r2
    ad8e:	2b00      	cmp	r3, #0
    ad90:	d072      	beq.n	ae78 <__ssprint_r+0xf4>
    ad92:	4683      	mov	fp, r0
    ad94:	f04f 0900 	mov.w	r9, #0
    ad98:	6816      	ldr	r6, [r2, #0]
    ad9a:	6808      	ldr	r0, [r1, #0]
    ad9c:	688b      	ldr	r3, [r1, #8]
    ad9e:	460d      	mov	r5, r1
    ada0:	464c      	mov	r4, r9
    ada2:	2c00      	cmp	r4, #0
    ada4:	d045      	beq.n	ae32 <__ssprint_r+0xae>
    ada6:	429c      	cmp	r4, r3
    ada8:	461f      	mov	r7, r3
    adaa:	469a      	mov	sl, r3
    adac:	d346      	bcc.n	ae3c <__ssprint_r+0xb8>
    adae:	89ab      	ldrh	r3, [r5, #12]
    adb0:	f413 6f90 	tst.w	r3, #1152	; 0x480
    adb4:	d02d      	beq.n	ae12 <__ssprint_r+0x8e>
    adb6:	696f      	ldr	r7, [r5, #20]
    adb8:	6929      	ldr	r1, [r5, #16]
    adba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    adbe:	ebc1 0a00 	rsb	sl, r1, r0
    adc2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    adc6:	1c60      	adds	r0, r4, #1
    adc8:	107f      	asrs	r7, r7, #1
    adca:	4450      	add	r0, sl
    adcc:	42b8      	cmp	r0, r7
    adce:	463a      	mov	r2, r7
    add0:	bf84      	itt	hi
    add2:	4607      	movhi	r7, r0
    add4:	463a      	movhi	r2, r7
    add6:	055b      	lsls	r3, r3, #21
    add8:	d533      	bpl.n	ae42 <__ssprint_r+0xbe>
    adda:	4611      	mov	r1, r2
    addc:	4658      	mov	r0, fp
    adde:	f7fb ff83 	bl	6ce8 <_malloc_r>
    ade2:	2800      	cmp	r0, #0
    ade4:	d037      	beq.n	ae56 <__ssprint_r+0xd2>
    ade6:	4652      	mov	r2, sl
    ade8:	6929      	ldr	r1, [r5, #16]
    adea:	9001      	str	r0, [sp, #4]
    adec:	f7fa fed2 	bl	5b94 <memcpy>
    adf0:	89aa      	ldrh	r2, [r5, #12]
    adf2:	9b01      	ldr	r3, [sp, #4]
    adf4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    adf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    adfc:	81aa      	strh	r2, [r5, #12]
    adfe:	ebca 0207 	rsb	r2, sl, r7
    ae02:	eb03 000a 	add.w	r0, r3, sl
    ae06:	616f      	str	r7, [r5, #20]
    ae08:	612b      	str	r3, [r5, #16]
    ae0a:	6028      	str	r0, [r5, #0]
    ae0c:	60aa      	str	r2, [r5, #8]
    ae0e:	4627      	mov	r7, r4
    ae10:	46a2      	mov	sl, r4
    ae12:	4652      	mov	r2, sl
    ae14:	4649      	mov	r1, r9
    ae16:	f7fc fa67 	bl	72e8 <memmove>
    ae1a:	f8d8 2008 	ldr.w	r2, [r8, #8]
    ae1e:	68ab      	ldr	r3, [r5, #8]
    ae20:	6828      	ldr	r0, [r5, #0]
    ae22:	1bdb      	subs	r3, r3, r7
    ae24:	4450      	add	r0, sl
    ae26:	1b14      	subs	r4, r2, r4
    ae28:	60ab      	str	r3, [r5, #8]
    ae2a:	6028      	str	r0, [r5, #0]
    ae2c:	f8c8 4008 	str.w	r4, [r8, #8]
    ae30:	b314      	cbz	r4, ae78 <__ssprint_r+0xf4>
    ae32:	f8d6 9000 	ldr.w	r9, [r6]
    ae36:	6874      	ldr	r4, [r6, #4]
    ae38:	3608      	adds	r6, #8
    ae3a:	e7b2      	b.n	ada2 <__ssprint_r+0x1e>
    ae3c:	4627      	mov	r7, r4
    ae3e:	46a2      	mov	sl, r4
    ae40:	e7e7      	b.n	ae12 <__ssprint_r+0x8e>
    ae42:	4658      	mov	r0, fp
    ae44:	f7fc fb0e 	bl	7464 <_realloc_r>
    ae48:	4603      	mov	r3, r0
    ae4a:	2800      	cmp	r0, #0
    ae4c:	d1d7      	bne.n	adfe <__ssprint_r+0x7a>
    ae4e:	6929      	ldr	r1, [r5, #16]
    ae50:	4658      	mov	r0, fp
    ae52:	f7ff fb3d 	bl	a4d0 <_free_r>
    ae56:	230c      	movs	r3, #12
    ae58:	f8cb 3000 	str.w	r3, [fp]
    ae5c:	89ab      	ldrh	r3, [r5, #12]
    ae5e:	2200      	movs	r2, #0
    ae60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ae64:	f04f 30ff 	mov.w	r0, #4294967295
    ae68:	81ab      	strh	r3, [r5, #12]
    ae6a:	f8c8 2008 	str.w	r2, [r8, #8]
    ae6e:	f8c8 2004 	str.w	r2, [r8, #4]
    ae72:	b003      	add	sp, #12
    ae74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae78:	2000      	movs	r0, #0
    ae7a:	f8c8 0004 	str.w	r0, [r8, #4]
    ae7e:	b003      	add	sp, #12
    ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ae84 <_calloc_r>:
    ae84:	b510      	push	{r4, lr}
    ae86:	fb02 f101 	mul.w	r1, r2, r1
    ae8a:	f7fb ff2d 	bl	6ce8 <_malloc_r>
    ae8e:	4604      	mov	r4, r0
    ae90:	b1d8      	cbz	r0, aeca <_calloc_r+0x46>
    ae92:	f850 2c04 	ldr.w	r2, [r0, #-4]
    ae96:	f022 0203 	bic.w	r2, r2, #3
    ae9a:	3a04      	subs	r2, #4
    ae9c:	2a24      	cmp	r2, #36	; 0x24
    ae9e:	d818      	bhi.n	aed2 <_calloc_r+0x4e>
    aea0:	2a13      	cmp	r2, #19
    aea2:	d914      	bls.n	aece <_calloc_r+0x4a>
    aea4:	2300      	movs	r3, #0
    aea6:	2a1b      	cmp	r2, #27
    aea8:	6003      	str	r3, [r0, #0]
    aeaa:	6043      	str	r3, [r0, #4]
    aeac:	d916      	bls.n	aedc <_calloc_r+0x58>
    aeae:	2a24      	cmp	r2, #36	; 0x24
    aeb0:	6083      	str	r3, [r0, #8]
    aeb2:	60c3      	str	r3, [r0, #12]
    aeb4:	bf11      	iteee	ne
    aeb6:	f100 0210 	addne.w	r2, r0, #16
    aeba:	6103      	streq	r3, [r0, #16]
    aebc:	6143      	streq	r3, [r0, #20]
    aebe:	f100 0218 	addeq.w	r2, r0, #24
    aec2:	2300      	movs	r3, #0
    aec4:	6013      	str	r3, [r2, #0]
    aec6:	6053      	str	r3, [r2, #4]
    aec8:	6093      	str	r3, [r2, #8]
    aeca:	4620      	mov	r0, r4
    aecc:	bd10      	pop	{r4, pc}
    aece:	4602      	mov	r2, r0
    aed0:	e7f7      	b.n	aec2 <_calloc_r+0x3e>
    aed2:	2100      	movs	r1, #0
    aed4:	f7fc fa6c 	bl	73b0 <memset>
    aed8:	4620      	mov	r0, r4
    aeda:	bd10      	pop	{r4, pc}
    aedc:	f100 0208 	add.w	r2, r0, #8
    aee0:	e7ef      	b.n	aec2 <_calloc_r+0x3e>
    aee2:	bf00      	nop

0000aee4 <__aeabi_uldivmod>:
    aee4:	b953      	cbnz	r3, aefc <__aeabi_uldivmod+0x18>
    aee6:	b94a      	cbnz	r2, aefc <__aeabi_uldivmod+0x18>
    aee8:	2900      	cmp	r1, #0
    aeea:	bf08      	it	eq
    aeec:	2800      	cmpeq	r0, #0
    aeee:	bf1c      	itt	ne
    aef0:	f04f 31ff 	movne.w	r1, #4294967295
    aef4:	f04f 30ff 	movne.w	r0, #4294967295
    aef8:	f000 b97e 	b.w	b1f8 <__aeabi_idiv0>
    aefc:	f1ad 0c08 	sub.w	ip, sp, #8
    af00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    af04:	f000 f806 	bl	af14 <__udivmoddi4>
    af08:	f8dd e004 	ldr.w	lr, [sp, #4]
    af0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    af10:	b004      	add	sp, #16
    af12:	4770      	bx	lr

0000af14 <__udivmoddi4>:
    af14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af18:	468c      	mov	ip, r1
    af1a:	460e      	mov	r6, r1
    af1c:	4604      	mov	r4, r0
    af1e:	9d08      	ldr	r5, [sp, #32]
    af20:	2b00      	cmp	r3, #0
    af22:	d150      	bne.n	afc6 <__udivmoddi4+0xb2>
    af24:	428a      	cmp	r2, r1
    af26:	4617      	mov	r7, r2
    af28:	d96c      	bls.n	b004 <__udivmoddi4+0xf0>
    af2a:	fab2 fe82 	clz	lr, r2
    af2e:	f1be 0f00 	cmp.w	lr, #0
    af32:	d00b      	beq.n	af4c <__udivmoddi4+0x38>
    af34:	f1ce 0420 	rsb	r4, lr, #32
    af38:	fa20 f404 	lsr.w	r4, r0, r4
    af3c:	fa01 f60e 	lsl.w	r6, r1, lr
    af40:	ea44 0c06 	orr.w	ip, r4, r6
    af44:	fa02 f70e 	lsl.w	r7, r2, lr
    af48:	fa00 f40e 	lsl.w	r4, r0, lr
    af4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
    af50:	0c22      	lsrs	r2, r4, #16
    af52:	fbbc f0f9 	udiv	r0, ip, r9
    af56:	fa1f f887 	uxth.w	r8, r7
    af5a:	fb09 c610 	mls	r6, r9, r0, ip
    af5e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    af62:	fb00 f308 	mul.w	r3, r0, r8
    af66:	42b3      	cmp	r3, r6
    af68:	d909      	bls.n	af7e <__udivmoddi4+0x6a>
    af6a:	19f6      	adds	r6, r6, r7
    af6c:	f100 32ff 	add.w	r2, r0, #4294967295
    af70:	f080 8122 	bcs.w	b1b8 <__udivmoddi4+0x2a4>
    af74:	42b3      	cmp	r3, r6
    af76:	f240 811f 	bls.w	b1b8 <__udivmoddi4+0x2a4>
    af7a:	3802      	subs	r0, #2
    af7c:	443e      	add	r6, r7
    af7e:	1af6      	subs	r6, r6, r3
    af80:	b2a2      	uxth	r2, r4
    af82:	fbb6 f3f9 	udiv	r3, r6, r9
    af86:	fb09 6613 	mls	r6, r9, r3, r6
    af8a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    af8e:	fb03 f808 	mul.w	r8, r3, r8
    af92:	45a0      	cmp	r8, r4
    af94:	d909      	bls.n	afaa <__udivmoddi4+0x96>
    af96:	19e4      	adds	r4, r4, r7
    af98:	f103 32ff 	add.w	r2, r3, #4294967295
    af9c:	f080 810a 	bcs.w	b1b4 <__udivmoddi4+0x2a0>
    afa0:	45a0      	cmp	r8, r4
    afa2:	f240 8107 	bls.w	b1b4 <__udivmoddi4+0x2a0>
    afa6:	3b02      	subs	r3, #2
    afa8:	443c      	add	r4, r7
    afaa:	ebc8 0404 	rsb	r4, r8, r4
    afae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    afb2:	2100      	movs	r1, #0
    afb4:	2d00      	cmp	r5, #0
    afb6:	d062      	beq.n	b07e <__udivmoddi4+0x16a>
    afb8:	fa24 f40e 	lsr.w	r4, r4, lr
    afbc:	2300      	movs	r3, #0
    afbe:	602c      	str	r4, [r5, #0]
    afc0:	606b      	str	r3, [r5, #4]
    afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    afc6:	428b      	cmp	r3, r1
    afc8:	d907      	bls.n	afda <__udivmoddi4+0xc6>
    afca:	2d00      	cmp	r5, #0
    afcc:	d055      	beq.n	b07a <__udivmoddi4+0x166>
    afce:	2100      	movs	r1, #0
    afd0:	e885 0041 	stmia.w	r5, {r0, r6}
    afd4:	4608      	mov	r0, r1
    afd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    afda:	fab3 f183 	clz	r1, r3
    afde:	2900      	cmp	r1, #0
    afe0:	f040 8090 	bne.w	b104 <__udivmoddi4+0x1f0>
    afe4:	42b3      	cmp	r3, r6
    afe6:	d302      	bcc.n	afee <__udivmoddi4+0xda>
    afe8:	4282      	cmp	r2, r0
    afea:	f200 80f8 	bhi.w	b1de <__udivmoddi4+0x2ca>
    afee:	1a84      	subs	r4, r0, r2
    aff0:	eb66 0603 	sbc.w	r6, r6, r3
    aff4:	2001      	movs	r0, #1
    aff6:	46b4      	mov	ip, r6
    aff8:	2d00      	cmp	r5, #0
    affa:	d040      	beq.n	b07e <__udivmoddi4+0x16a>
    affc:	e885 1010 	stmia.w	r5, {r4, ip}
    b000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b004:	b912      	cbnz	r2, b00c <__udivmoddi4+0xf8>
    b006:	2701      	movs	r7, #1
    b008:	fbb7 f7f2 	udiv	r7, r7, r2
    b00c:	fab7 fe87 	clz	lr, r7
    b010:	f1be 0f00 	cmp.w	lr, #0
    b014:	d135      	bne.n	b082 <__udivmoddi4+0x16e>
    b016:	1bf3      	subs	r3, r6, r7
    b018:	ea4f 4817 	mov.w	r8, r7, lsr #16
    b01c:	fa1f fc87 	uxth.w	ip, r7
    b020:	2101      	movs	r1, #1
    b022:	fbb3 f0f8 	udiv	r0, r3, r8
    b026:	0c22      	lsrs	r2, r4, #16
    b028:	fb08 3610 	mls	r6, r8, r0, r3
    b02c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    b030:	fb0c f300 	mul.w	r3, ip, r0
    b034:	42b3      	cmp	r3, r6
    b036:	d907      	bls.n	b048 <__udivmoddi4+0x134>
    b038:	19f6      	adds	r6, r6, r7
    b03a:	f100 32ff 	add.w	r2, r0, #4294967295
    b03e:	d202      	bcs.n	b046 <__udivmoddi4+0x132>
    b040:	42b3      	cmp	r3, r6
    b042:	f200 80ce 	bhi.w	b1e2 <__udivmoddi4+0x2ce>
    b046:	4610      	mov	r0, r2
    b048:	1af6      	subs	r6, r6, r3
    b04a:	b2a2      	uxth	r2, r4
    b04c:	fbb6 f3f8 	udiv	r3, r6, r8
    b050:	fb08 6613 	mls	r6, r8, r3, r6
    b054:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    b058:	fb0c fc03 	mul.w	ip, ip, r3
    b05c:	45a4      	cmp	ip, r4
    b05e:	d907      	bls.n	b070 <__udivmoddi4+0x15c>
    b060:	19e4      	adds	r4, r4, r7
    b062:	f103 32ff 	add.w	r2, r3, #4294967295
    b066:	d202      	bcs.n	b06e <__udivmoddi4+0x15a>
    b068:	45a4      	cmp	ip, r4
    b06a:	f200 80b5 	bhi.w	b1d8 <__udivmoddi4+0x2c4>
    b06e:	4613      	mov	r3, r2
    b070:	ebcc 0404 	rsb	r4, ip, r4
    b074:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    b078:	e79c      	b.n	afb4 <__udivmoddi4+0xa0>
    b07a:	4629      	mov	r1, r5
    b07c:	4628      	mov	r0, r5
    b07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b082:	f1ce 0120 	rsb	r1, lr, #32
    b086:	fa06 f30e 	lsl.w	r3, r6, lr
    b08a:	fa07 f70e 	lsl.w	r7, r7, lr
    b08e:	fa20 f901 	lsr.w	r9, r0, r1
    b092:	ea4f 4817 	mov.w	r8, r7, lsr #16
    b096:	40ce      	lsrs	r6, r1
    b098:	ea49 0903 	orr.w	r9, r9, r3
    b09c:	fbb6 faf8 	udiv	sl, r6, r8
    b0a0:	ea4f 4419 	mov.w	r4, r9, lsr #16
    b0a4:	fb08 661a 	mls	r6, r8, sl, r6
    b0a8:	fa1f fc87 	uxth.w	ip, r7
    b0ac:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    b0b0:	fb0a f20c 	mul.w	r2, sl, ip
    b0b4:	429a      	cmp	r2, r3
    b0b6:	fa00 f40e 	lsl.w	r4, r0, lr
    b0ba:	d90a      	bls.n	b0d2 <__udivmoddi4+0x1be>
    b0bc:	19db      	adds	r3, r3, r7
    b0be:	f10a 31ff 	add.w	r1, sl, #4294967295
    b0c2:	f080 8087 	bcs.w	b1d4 <__udivmoddi4+0x2c0>
    b0c6:	429a      	cmp	r2, r3
    b0c8:	f240 8084 	bls.w	b1d4 <__udivmoddi4+0x2c0>
    b0cc:	f1aa 0a02 	sub.w	sl, sl, #2
    b0d0:	443b      	add	r3, r7
    b0d2:	1a9b      	subs	r3, r3, r2
    b0d4:	fa1f f989 	uxth.w	r9, r9
    b0d8:	fbb3 f1f8 	udiv	r1, r3, r8
    b0dc:	fb08 3311 	mls	r3, r8, r1, r3
    b0e0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    b0e4:	fb01 f60c 	mul.w	r6, r1, ip
    b0e8:	429e      	cmp	r6, r3
    b0ea:	d907      	bls.n	b0fc <__udivmoddi4+0x1e8>
    b0ec:	19db      	adds	r3, r3, r7
    b0ee:	f101 32ff 	add.w	r2, r1, #4294967295
    b0f2:	d26b      	bcs.n	b1cc <__udivmoddi4+0x2b8>
    b0f4:	429e      	cmp	r6, r3
    b0f6:	d969      	bls.n	b1cc <__udivmoddi4+0x2b8>
    b0f8:	3902      	subs	r1, #2
    b0fa:	443b      	add	r3, r7
    b0fc:	1b9b      	subs	r3, r3, r6
    b0fe:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    b102:	e78e      	b.n	b022 <__udivmoddi4+0x10e>
    b104:	f1c1 0e20 	rsb	lr, r1, #32
    b108:	fa22 f40e 	lsr.w	r4, r2, lr
    b10c:	408b      	lsls	r3, r1
    b10e:	4323      	orrs	r3, r4
    b110:	fa20 f70e 	lsr.w	r7, r0, lr
    b114:	fa06 f401 	lsl.w	r4, r6, r1
    b118:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    b11c:	fa26 f60e 	lsr.w	r6, r6, lr
    b120:	433c      	orrs	r4, r7
    b122:	fbb6 f9fc 	udiv	r9, r6, ip
    b126:	0c27      	lsrs	r7, r4, #16
    b128:	fb0c 6619 	mls	r6, ip, r9, r6
    b12c:	fa1f f883 	uxth.w	r8, r3
    b130:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    b134:	fb09 f708 	mul.w	r7, r9, r8
    b138:	42b7      	cmp	r7, r6
    b13a:	fa02 f201 	lsl.w	r2, r2, r1
    b13e:	fa00 fa01 	lsl.w	sl, r0, r1
    b142:	d908      	bls.n	b156 <__udivmoddi4+0x242>
    b144:	18f6      	adds	r6, r6, r3
    b146:	f109 30ff 	add.w	r0, r9, #4294967295
    b14a:	d241      	bcs.n	b1d0 <__udivmoddi4+0x2bc>
    b14c:	42b7      	cmp	r7, r6
    b14e:	d93f      	bls.n	b1d0 <__udivmoddi4+0x2bc>
    b150:	f1a9 0902 	sub.w	r9, r9, #2
    b154:	441e      	add	r6, r3
    b156:	1bf6      	subs	r6, r6, r7
    b158:	b2a0      	uxth	r0, r4
    b15a:	fbb6 f4fc 	udiv	r4, r6, ip
    b15e:	fb0c 6614 	mls	r6, ip, r4, r6
    b162:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    b166:	fb04 f808 	mul.w	r8, r4, r8
    b16a:	45b8      	cmp	r8, r7
    b16c:	d907      	bls.n	b17e <__udivmoddi4+0x26a>
    b16e:	18ff      	adds	r7, r7, r3
    b170:	f104 30ff 	add.w	r0, r4, #4294967295
    b174:	d228      	bcs.n	b1c8 <__udivmoddi4+0x2b4>
    b176:	45b8      	cmp	r8, r7
    b178:	d926      	bls.n	b1c8 <__udivmoddi4+0x2b4>
    b17a:	3c02      	subs	r4, #2
    b17c:	441f      	add	r7, r3
    b17e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    b182:	ebc8 0707 	rsb	r7, r8, r7
    b186:	fba0 8902 	umull	r8, r9, r0, r2
    b18a:	454f      	cmp	r7, r9
    b18c:	4644      	mov	r4, r8
    b18e:	464e      	mov	r6, r9
    b190:	d314      	bcc.n	b1bc <__udivmoddi4+0x2a8>
    b192:	d029      	beq.n	b1e8 <__udivmoddi4+0x2d4>
    b194:	b365      	cbz	r5, b1f0 <__udivmoddi4+0x2dc>
    b196:	ebba 0304 	subs.w	r3, sl, r4
    b19a:	eb67 0706 	sbc.w	r7, r7, r6
    b19e:	fa07 fe0e 	lsl.w	lr, r7, lr
    b1a2:	40cb      	lsrs	r3, r1
    b1a4:	40cf      	lsrs	r7, r1
    b1a6:	ea4e 0303 	orr.w	r3, lr, r3
    b1aa:	e885 0088 	stmia.w	r5, {r3, r7}
    b1ae:	2100      	movs	r1, #0
    b1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b1b4:	4613      	mov	r3, r2
    b1b6:	e6f8      	b.n	afaa <__udivmoddi4+0x96>
    b1b8:	4610      	mov	r0, r2
    b1ba:	e6e0      	b.n	af7e <__udivmoddi4+0x6a>
    b1bc:	ebb8 0402 	subs.w	r4, r8, r2
    b1c0:	eb69 0603 	sbc.w	r6, r9, r3
    b1c4:	3801      	subs	r0, #1
    b1c6:	e7e5      	b.n	b194 <__udivmoddi4+0x280>
    b1c8:	4604      	mov	r4, r0
    b1ca:	e7d8      	b.n	b17e <__udivmoddi4+0x26a>
    b1cc:	4611      	mov	r1, r2
    b1ce:	e795      	b.n	b0fc <__udivmoddi4+0x1e8>
    b1d0:	4681      	mov	r9, r0
    b1d2:	e7c0      	b.n	b156 <__udivmoddi4+0x242>
    b1d4:	468a      	mov	sl, r1
    b1d6:	e77c      	b.n	b0d2 <__udivmoddi4+0x1be>
    b1d8:	3b02      	subs	r3, #2
    b1da:	443c      	add	r4, r7
    b1dc:	e748      	b.n	b070 <__udivmoddi4+0x15c>
    b1de:	4608      	mov	r0, r1
    b1e0:	e70a      	b.n	aff8 <__udivmoddi4+0xe4>
    b1e2:	3802      	subs	r0, #2
    b1e4:	443e      	add	r6, r7
    b1e6:	e72f      	b.n	b048 <__udivmoddi4+0x134>
    b1e8:	45c2      	cmp	sl, r8
    b1ea:	d3e7      	bcc.n	b1bc <__udivmoddi4+0x2a8>
    b1ec:	463e      	mov	r6, r7
    b1ee:	e7d1      	b.n	b194 <__udivmoddi4+0x280>
    b1f0:	4629      	mov	r1, r5
    b1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b1f6:	bf00      	nop

0000b1f8 <__aeabi_idiv0>:
    b1f8:	4770      	bx	lr
    b1fa:	bf00      	nop
    b1fc:	50444d56 	.word	0x50444d56
    b200:	7c315f56 	.word	0x7c315f56
    b204:	4d565f31 	.word	0x4d565f31
    b208:	0a565044 	.word	0x0a565044
    b20c:	00000000 	.word	0x00000000
    b210:	0000007c 	.word	0x0000007c
    b214:	64323025 	.word	0x64323025
    b218:	3230253a 	.word	0x3230253a
    b21c:	30253a64 	.word	0x30253a64
    b220:	ff006432 	.word	0xff006432
    b224:	7263696d 	.word	0x7263696d
    b228:	2044536f 	.word	0x2044536f
    b22c:	72207369 	.word	0x72207369
    b230:	79646165 	.word	0x79646165
    b234:	00000000 	.word	0x00000000
    b238:	61746144 	.word	0x61746144
    b23c:	7478742e 	.word	0x7478742e
    b240:	00000000 	.word	0x00000000
    b244:	20646c4f 	.word	0x20646c4f
    b248:	61746144 	.word	0x61746144
    b24c:	7478742e 	.word	0x7478742e
    b250:	69786520 	.word	0x69786520
    b254:	20737473 	.word	0x20737473
    b258:	20646e61 	.word	0x20646e61
    b25c:	6c6c6977 	.word	0x6c6c6977
    b260:	20656220 	.word	0x20656220
    b264:	6f6d6572 	.word	0x6f6d6572
    b268:	2e646576 	.word	0x2e646576
    b26c:	00000000 	.word	0x00000000
    b270:	6f6d6552 	.word	0x6f6d6552
    b274:	676e6976 	.word	0x676e6976
    b278:	61786520 	.word	0x61786520
    b27c:	656c706d 	.word	0x656c706d
    b280:	7478742e 	.word	0x7478742e
    b284:	002e2e2e 	.word	0x002e2e2e
    b288:	61746144 	.word	0x61746144
    b28c:	7478742e 	.word	0x7478742e
    b290:	656f6420 	.word	0x656f6420
    b294:	74276e73 	.word	0x74276e73
    b298:	69786520 	.word	0x69786520
    b29c:	61207473 	.word	0x61207473
    b2a0:	6d20646e 	.word	0x6d20646e
    b2a4:	20747375 	.word	0x20747375
    b2a8:	63206562 	.word	0x63206562
    b2ac:	74616572 	.word	0x74616572
    b2b0:	002e6465 	.word	0x002e6465
    b2b4:	72756f48 	.word	0x72756f48
    b2b8:	00000020 	.word	0x00000020
    b2bc:	756e694d 	.word	0x756e694d
    b2c0:	00206574 	.word	0x00206574
    b2c4:	6f636553 	.word	0x6f636553
    b2c8:	0020646e 	.word	0x0020646e
    b2cc:	6974614c 	.word	0x6974614c
    b2d0:	65647574 	.word	0x65647574
    b2d4:	00000020 	.word	0x00000020
    b2d8:	676e6f4c 	.word	0x676e6f4c
    b2dc:	64757469 	.word	0x64757469
    b2e0:	00002065 	.word	0x00002065
    b2e4:	69746c41 	.word	0x69746c41
    b2e8:	65647574 	.word	0x65647574
    b2ec:	00000020 	.word	0x00000020
    b2f0:	20736144 	.word	0x20736144
    b2f4:	656c6946 	.word	0x656c6946
    b2f8:	72757720 	.word	0x72757720
    b2fc:	6d206564 	.word	0x6d206564
    b300:	64207469 	.word	0x64207469
    b304:	65207265 	.word	0x65207265
    b308:	65747372 	.word	0x65747372
    b30c:	655a206e 	.word	0x655a206e
    b310:	20656c69 	.word	0x20656c69
    b314:	74737265 	.word	0x74737265
    b318:	746c6c65 	.word	0x746c6c65
    b31c:	00000000 	.word	0x00000000
    b320:	64726143 	.word	0x64726143
    b324:	69616620 	.word	0x69616620
    b328:	2c64656c 	.word	0x2c64656c
    b32c:	20726f20 	.word	0x20726f20
    b330:	20746f6e 	.word	0x20746f6e
    b334:	73657270 	.word	0x73657270
    b338:	00746e65 	.word	0x00746e65
    b33c:	64323025 	.word	0x64323025
    b340:	3230253a 	.word	0x3230253a
    b344:	30253a64 	.word	0x30253a64
    b348:	00206432 	.word	0x00206432
    b34c:	00000024 	.word	0x00000024
    b350:	0000002c 	.word	0x0000002c
    b354:	6f727245 	.word	0x6f727245
    b358:	706f2072 	.word	0x706f2072
    b35c:	6e696e65 	.word	0x6e696e65
    b360:	61442067 	.word	0x61442067
    b364:	742e6174 	.word	0x742e6174
    b368:	ff007478 	.word	0xff007478
    b36c:	4d525047 	.word	0x4d525047
    b370:	00000043 	.word	0x00000043
    b374:	4d524e47 	.word	0x4d524e47
    b378:	00000043 	.word	0x00000043
    b37c:	47475047 	.word	0x47475047
    b380:	00000041 	.word	0x00000041
    b384:	4e474e47 	.word	0x4e474e47
    b388:	00000053 	.word	0x00000053
    b38c:	53474e47 	.word	0x53474e47
    b390:	00000041 	.word	0x00000041
    b394:	53475047 	.word	0x53475047
    b398:	00000041 	.word	0x00000041
    b39c:	53475047 	.word	0x53475047
    b3a0:	00000056 	.word	0x00000056
    b3a4:	53474c47 	.word	0x53474c47
    b3a8:	00000056 	.word	0x00000056
    b3ac:	0000004e 	.word	0x0000004e
    b3b0:	00454e4e 	.word	0x00454e4e
    b3b4:	0000454e 	.word	0x0000454e
    b3b8:	00454e45 	.word	0x00454e45
    b3bc:	00000045 	.word	0x00000045
    b3c0:	00455345 	.word	0x00455345
    b3c4:	00004553 	.word	0x00004553
    b3c8:	00455353 	.word	0x00455353
    b3cc:	00575353 	.word	0x00575353
    b3d0:	00005753 	.word	0x00005753
    b3d4:	00575357 	.word	0x00575357
    b3d8:	00000057 	.word	0x00000057
    b3dc:	00574e57 	.word	0x00574e57
    b3e0:	0000574e 	.word	0x0000574e
    b3e4:	00574e4e 	.word	0x00574e4e
    b3e8:	50444d56 	.word	0x50444d56
    b3ec:	00005f45 	.word	0x00005f45
    b3f0:	003a323a 	.word	0x003a323a
    b3f4:	0000003a 	.word	0x0000003a
    b3f8:	444d565f 	.word	0x444d565f
    b3fc:	00004550 	.word	0x00004550
    b400:	50444d56 	.word	0x50444d56
    b404:	00005f43 	.word	0x00005f43
    b408:	444d565f 	.word	0x444d565f
    b40c:	00004350 	.word	0x00004350
    b410:	6f727245 	.word	0x6f727245
    b414:	41203a72 	.word	0x41203a72
    b418:	6d657474 	.word	0x6d657474
    b41c:	74207470 	.word	0x74207470
    b420:	6573206f 	.word	0x6573206f
    b424:	20612074 	.word	0x20612074
    b428:	64616572 	.word	0x64616572
    b42c:	6c6e6f2d 	.word	0x6c6e6f2d
    b430:	61762079 	.word	0x61762079
    b434:	62616972 	.word	0x62616972
    b438:	6f20656c 	.word	0x6f20656c
    b43c:	61642072 	.word	0x61642072
    b440:	74206174 	.word	0x74206174
    b444:	20657079 	.word	0x20657079
    b448:	20746f6e 	.word	0x20746f6e
    b44c:	70707573 	.word	0x70707573
    b450:	6574726f 	.word	0x6574726f
    b454:	000a0d64 	.word	0x000a0d64

0000b458 <vtable for File>:
	...
    b460:	00001771 000017a1 00001769 0000182d     q.......i...-...
    b470:	00001789 000017c5 000017f1 ffff002f     ............/...

0000b480 <vtable for SdFile>:
	...
    b488:	0000341d 00005649 00001769 0000176d     .4..IV..i...m...
    b498:	5e3e3c7c 2f3f3d2b 2c3b5d5b 005c222a     |<>^+=?/[];,*"\.

0000b4a8 <SPIClass::spi0_hardware>:
    b4a8:	4004803c 00001000 00001a04 00007fff     <..@............
    b4b8:	00000e0f 0000392d ff27080c 00000200     ....-9....'.....
    b4c8:	00000200 00000200 00000000 ff1c070b     ................
    b4d8:	00000200 00000200 00000200 00000000     ................
    b4e8:	001b0e0d 00000200 00000200 00000200     ................
    b4f8:	0609020a 16151714 002d1a0f 00000200     ..........-.....
    b508:	00000200 00000200 00000200 00000200     ................
    b518:	00000200 00000200 00000200 00000200     ................
    b528:	00000200 00000300 02020101 08080404     ................
    b538:	00200110                                .. .

0000b53c <digital_pin_to_info_PGM>:
    b53c:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    b54c:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    b55c:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    b56c:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    b57c:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    b58c:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    b59c:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    b5ac:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    b5bc:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    b5cc:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    b5dc:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    b5ec:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    b5fc:	43fe2068 4004d068 43fe0014 40049014     h .Ch..@...C...@
    b60c:	43fe0038 40049038 43fe003c 4004903c     8..C8..@<..C<..@
    b61c:	43fe0040 40049040 43fe0848 4004a048     @..C@..@H..CH..@
    b62c:	43fe084c 4004a04c 43fe0828 4004a028     L..CL..@(..C(..@
    b63c:	43fe082c 4004a02c 43fe2060 4004d060     ,..C,..@` .C`..@
    b64c:	43fe2064 4004d064 43fe1020 4004b020     d .Cd..@ ..C ..@
    b65c:	43fe1024 4004b024 43fe1028 4004b028     $..C$..@(..C(..@
    b66c:	43fe102c 4004b02c 43fe0044 40049044     ,..C,..@D..CD..@
    b67c:	43fe0070 40049070 43fe0074 40049074     p..Cp..@t..Ct..@
    b68c:	43fe0068 40049068 43fe0850 4004a050     h..Ch..@P..CP..@
    b69c:	43fe0858 4004a058 43fe085c 4004a05c     X..CX..@\..C\..@
    b6ac:	43fe0854 4004a054 43fe1820 4004c020     T..CT..@ ..C ..@
    b6bc:	43fe1824 4004c024 43fe0810 4004a010     $..C$..@...C...@
    b6cc:	43fe0814 4004a014 43fe1838 4004c038     ...C...@8..C8..@
    b6dc:	43fe1834 4004c034 43fe1830 4004c030     4..C4..@0..C0..@
    b6ec:	43fe183c 4004c03c 43fe182c 4004c02c     <..C<..@,..C,..@
    b6fc:	43fe2028 4004d028 43fe202c 4004d02c     ( .C(..@, .C,..@
    b70c:	43fe2000 4004d000 43fe2004 4004d004     . .C...@. .C...@
    b71c:	43fe2008 4004d008 43fe200c 4004d00c     . .C...@. .C...@
    b72c:	43fe2010 4004d010 43fe2014 4004d014     . .C...@. .C...@
    b73c:	ffff0a0d 006e616e 0066766f 00666e69     ....nan.ovf.inf.

0000b74c <vtable for usb_serial_class>:
	...
    b754:	00005939 00005931 0000592d 00005929     9Y..1Y..-Y..)Y..
    b764:	00005925 00005921 0000591d 00005919     %Y..!Y...Y...Y..

0000b774 <usb_endpoint_config_table>:
    b774:	15191500                                ....

0000b778 <usb_descriptor_list>:
    b778:	00000100 1fff0798 00000012 00000200     ................
    b788:	1fff07c4 00000043 00000300 1fff0820     ....C....... ...
    b798:	00000000 04090301 1fff07ac 00000000     ................
    b7a8:	04090302 1fff0808 00000000 04090303     ................
    b7b8:	1fff0824 00000000 00000000 00000000     $...............
    b7c8:	00000000                                ....

0000b7cc <_global_impure_ptr>:
    b7cc:	1fff0840 49534f50 00000058 ffff002e     @...POSIX.......

0000b7dc <zeroes.7258>:
    b7dc:	30303030 30303030 30303030 30303030     0000000000000000
    b7ec:	00464e49 004e414e 33323130 37363534     INF.NAN.01234567
    b7fc:	42413938 46454443 00000000 33323130     89ABCDEF....0123
    b80c:	37363534 62613938 66656463 00000000     456789abcdef....
    b81c:	6c756e28 0000296c ffff0030              (null)..0...

0000b828 <blanks.7257>:
    b828:	20202020 20202020 20202020 20202020                     

0000b838 <_ctype_>:
    b838:	20202000 20202020 28282020 20282828     .         ((((( 
    b848:	20202020 20202020 20202020 20202020                     
    b858:	10108820 10101010 10101010 10101010      ...............
    b868:	04040410 04040404 10040404 10101010     ................
    b878:	41411010 41414141 01010101 01010101     ..AAAAAA........
    b888:	01010101 01010101 01010101 10101010     ................
    b898:	42421010 42424242 02020202 02020202     ..BBBBBB........
    b8a8:	02020202 02020202 02020202 10101010     ................
    b8b8:	00000020 00000000 00000000 00000000      ...............
	...
    b938:	ffffff00 69666e49 7974696e 00000000     ....Infinity....
    b948:	004e614e ffffffff                       NaN.....

0000b950 <__mprec_tens>:
    b950:	00000000 3ff00000 00000000 40240000     .......?......$@
    b960:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    b970:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    b980:	00000000 412e8480 00000000 416312d0     .......A......cA
    b990:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    b9a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    b9b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    b9c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    b9d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    b9e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    b9f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    ba00:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    ba10:	79d99db4 44ea7843                       ...yCx.D

0000ba18 <__mprec_bigtens>:
    ba18:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    ba28:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    ba38:	7f73bf3c 75154fdd                       <.s..O.u

0000ba40 <p05.6087>:
    ba40:	00000005 00000019 0000007d              ........}...

0000ba4c <_init>:
    ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba4e:	bf00      	nop
    ba50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ba52:	bc08      	pop	{r3}
    ba54:	469e      	mov	lr, r3
    ba56:	4770      	bx	lr

0000ba58 <__init_array_start>:
    ba58:	0000948d 	.word	0x0000948d

0000ba5c <__frame_dummy_init_array_entry>:
    ba5c:	00000435 000007c9 00001755 00001c7d     5.......U...}...
    ba6c:	00002b81                                .+..

Disassembly of section .fini:

0000ba70 <_fini>:
    ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba72:	bf00      	nop
